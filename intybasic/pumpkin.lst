00000000 intybasic_map              00000001 intybasic_jlp              
00000000 intybasic_cc3              00000000 intybasic_ecs              
00000000 intybasic_voice            00000000 intybasic_flash            
00000000 intybasic_scroll           00000001 intybasic_col              
00000000 intybasic_keypad           00000001 intybasic_music            
00000000 intybasic_music_ecs        00000001 intybasic_music_volume     
00000000 intybasic_stack            00000001 intybasic_numbers          
00000001 intybasic_fastmult         00000000 intybasic_fastdiv          
00000000 _rom                       00000000 .ROM                       
00000000 _rom_stat                  ???????? _rom.sbase                 
???????? _rom.send                  ???????? _rom.spages                
???????? static                     ???????? dynamic                    
???????? _rom.err_len               ???????? _rom.rbase                 
???????? _rom.rend                  ???????? _rom.ovrflo                
???????? _rom.sidx                  ???????? _rom.bidx                  
0000500D _ZERO                      00005040 _MAIN                      
0000500F _ONES                      0000502D _TITLE                     
???????? SRCFILE                    ???????? x                          
???????? y                          00005014 CLRSCR                     
00000346 _screen                    0000501A FILLZERO                   
0000501B MEMSET                     000002F0 STACK                      
00005059 _MAIN4                     00000104 _rand                      
0000F5F6 _set_isr                   0000507D _pal1                      
00005084 _pal2                      0000509B _pal3                      
0000508E _pal2_lp                   00005098 _pal2_cnt                  
000050B7 _ecs1                      00000103 _ntsc                      
0000F5FD _int_vector                0000F5E2 _wait                      
0000F79E _init_music                00000109 _mode_select               
0000F5E2 IV_INIT_and_wait           00008040 SYSTEM2                    
00008042 _SYSTEM2                   00000006 const_PUMPKINS             
0000000C const_VOLUME_TITLE         0000000A const_VOLUME_GAME          
0000000E const_VOLUME_BOSS          00008040 var_&RECORD                
0000012C var_C                      000050E3 T1                         
00000347 _color                     00005EAF label_WAIT_AND_CLEAN       
0000010E _music_mode                000051F8 label_TITLE_SCREEN         
0000F000 label_MUSIC_GAME           0000F7AE _play_music                
00000128 _music_vol                 00005212 T2                         
00000348 Q1                         00000105 _gram_target               
00000106 _gram_total                00006509 label_PUMPKIN_BITMAPS_0    
00000344 _gram_bitmap               00006549 label_PUMPKIN_BITMAPS_1    
00006589 label_PUMPKIN_BITMAPS_2    000065C9 label_PUMPKIN_BITMAPS_3    
00000107 _gram2_target              00000108 _gram2_total               
000064D5 label_GAME_BITMAPS_0       00000345 _gram2_bitmap              
000065F5 label_PUMPKIN_CARDS        0000F5D0 CPYBLK                     
00000348 _mobs                      00000200 Q2                         
0000FB55 PRNUM16.z                  0000534D T3                         
0000535D T5                         0000535D T6                         
0000536D T8                         0000537A T9                         
00000130 var_FIRST_TIME_EVER        00000133 var_LIVES                  
00000132 var_LEVEL                  0000013A var_SUBLEVEL               
00008041 var_&SCORE                 000053AF T10                        
00000149 array_X                    0000014F array_Y                    
00000143 array_S                    0000013D array_B                    
00005EE4 label_START_WAVE           000053CA label_RESTART_GAME         
0000012B var_BY                     00000136 var_PX                     
00000137 var_PY                     00005E33 label_UPDATE_SCORE         
00005E8D label_UPDATE_LIVES         00005E69 label_UPDATE_LEVEL         
000053EE T11                        00005AFC label_BOSS_LOOP            
00005878 T12                        000053F9 T13                        
00005415 T14                        00005440 T15                        
0000012E var_D                      0000575E T16                        
00005761 T17                        0000576C T18                        
00005779 T19                        00005785 T20                        
00005791 T21                        00005863 T22                        
00005878 label_GAME_LOOP            0000012F var_DROP_BULLET            
00005886 T23                        000058A9 T24                        
00005894 T25                        0000FE8B qs_mpy8                    
0000013B var_VALID                  000058AE T26                        
0000593A T27                        000058D6 T28                        
000058FC T29                        00000155 array_Z                    
000058FC T30                        00005938 T31                        
00005938 T32                        00005938 T33                        
00005938 T34                        00000138 var_SOUND_EFFECT           
00005938 T35                        00000139 var_SOUND_STATE            
00005941 T36                        00005E09 label_UPDATE_PLAYER        
0000010A _border_color              0000033E _col7                      
00005C19 label_PLAYER_TOUCHED       0000033D _col6                      
000059D1 T38                        00005973 T39                        
0000597D T40                        00005987 T41                        
00005991 T42                        0000599B T43                        
000059A5 T44                        000059D1 T45                        
000059D1 T46                        000059D1 T47                        
00000134 var_NEXT_BULLET            00005A04 T48                        
000059DF T49                        000059F9 T50                        
00005A47 T51                        00005A47 T52                        
00005A0D T53                        00005A3E T54                        
00005A2A T55                        00005A37 T56                        
00000135 var_NEXT_WAVE              00005A6B T57                        
00005A69 T58                        0000013C var_WAVE                   
00005A69 T60                        00005A5F T59                        
00005F1A label_START_0              00005F9F label_START_1              
00006022 label_START_2              00006086 label_START_3              
000060EC label_START_4              0000617C label_START_5              
000061D5 label_START_6              00006260 label_START_7              
0000630F label_START_8              000063CE label_START_9              
00005AF7 T61                        00005AE2 T62                        
00005ADD T63                        00005A7D T64                        
0000F5B8 CPYBLK2                    00005AA1 T65                        
00005AB3 T66                        00000129 var_BLOCKS                 
0000F5A3 label_MUSIC_BEAT           00005AE0 T67                        
00005AF7 T69                        00005AED T68                        
00005F3F label_MOVE_0               00005FC4 label_MOVE_1               
00006047 label_MOVE_2               000060AB label_MOVE_3               
00006111 label_MOVE_4               000061A5 label_MOVE_5               
00006219 label_MOVE_6               000062DD label_MOVE_7               
00006334 label_MOVE_8               00006418 label_MOVE_9               
00005D63 label_MOVE_PLAYER          00005AFF T70                        
00005B29 T71                        00005B27 T72                        
00005B4E T73                        0000F6F5 _next_random               
00000131 var_GRONK                  00005B70 T74                        
00005B7A T75                        00005C14 T77                        
0000012A var_BX                     00005BA3 T79                        
00005BAE T80                        00005C14 T78                        
00005BDB T81                        00005C14 T82                        
00005BF6 T83                        00005C46 T84                        
00005C2C T85                        00005C6B T86                        
00005C4A T87                        00005C5C T88                        
00005C70 T89                        00005C81 T90                        
00005C93 T91                        00005CA5 T92                        
00005CB7 T93                        00005CC3 T94                        
00005CC7 T95                        00005D05 T96                        
00005D5C T97                        00005D18 T98                        
00005D5A T99                        00005D76 T100                       
00005D76 T101                       00005D8B T103                       
00005D94 T104                       00005D9E T105                       
00005DA3 T102                       00005E08 T106                       
00005DAC T108                       00005DB5 T109                       
00005DBF T110                       00005DDE T107                       
00005DDE T111                       00005DDE T112                       
000064B5 label_CONTROLLER_DIRECTIO  00005DF8 T113                       
00005DF8 T114                       00005E08 T115                       
00005E08 T116                       00005E1F T117                       
00005E22 T118                       0000FB4A PRNUM16.l                  
00005EB3 T119                       00005EC4 T120                       
00005ED0 T122                       00005ED4 T123                       
0000012D var_CUCU_WAVE              00005EF5 T124                       
00005F19 T125                       00005F1E T126                       
00005F43 T127                       00005F53 T129                       
00005F4F T128                       00005F95 label_MOVE_00              
00005F53 label_MOVE_01              00005F67 label_MOVE_02              
00005F7F label_MOVE_03              00005F65 T130                       
00005F7D T131                       00005F93 T132                       
00005FA3 T133                       00005FC8 T134                       
00005FD8 T136                       00005FD4 T135                       
00006018 label_MOVE_010             00005FD8 label_MOVE_011             
00005FEC label_MOVE_012             00006004 label_MOVE_013             
00005FEA T137                       00006002 T138                       
00006016 T139                       00006026 T140                       
0000604B T141                       00006059 T143                       
00006057 T142                       0000607C label_MOVE_020             
00006059 label_MOVE_021             00006495 label_SIN24                
0000607A T144                       0000608A T145                       
000060AF T146                       000060BD T148                       
000060BB T147                       000060E2 label_MOVE_030             
000060BD label_MOVE_031             000060E0 T149                       
000060F0 T150                       00006115 T151                       
00006125 T153                       00006121 T152                       
00006172 label_MOVE_040             00006125 label_MOVE_041             
00006139 label_MOVE_042             0000615A label_MOVE_043             
00006137 T154                       00006158 T155                       
00006170 T156                       00006180 T157                       
000061A9 T158                       000061B7 T160                       
000061B5 T159                       000061CB label_MOVE_050             
000061B7 label_MOVE_051             000061C9 T161                       
000061D9 T162                       000061F3 T163                       
00006204 T164                       0000621D T165                       
0000622C T167                       00006229 T166                       
00006256 label_MOVE_060             0000622C label_MOVE_061             
00006240 label_MOVE_062             0000623E T168                       
00006254 T169                       00006264 T170                       
0000628D T171                       000062AC T172                       
000062CC T173                       000062E1 T174                       
000062EF T176                       000062ED T175                       
00006305 label_MOVE_70              000062EF label_MOVE_71              
00006303 T177                       00006313 T178                       
00006338 T179                       0000634A T181                       
00006344 T180                       000063C4 label_MOVE_080             
0000634A label_MOVE_081             0000635E label_MOVE_082             
00006384 label_MOVE_083             00006398 label_MOVE_084             
000063B0 label_MOVE_085             0000635C T182                       
00006382 T183                       0000637B T184                       
00006382 T185                       00006396 T186                       
000063AE T187                       000063C2 T188                       
000063D2 T189                       000063EE T190                       
00006402 T191                       0000641C T192                       
0000642C T194                       00006428 T193                       
0000648B label_MOVE_090             0000642C label_MOVE_091             
00006444 label_MOVE_092             00006475 label_MOVE_093             
00006442 T195                       00006459 T196                       
00006465 T197                       00006473 T198                       
00006489 T199                       000066E5 label_PLAY_SOUND           
000066F6 T201                       000066F1 T200                       
000066F7 label_PLAY_NONE            00006700 label_PLAY_FIRE            
00006729 label_PLAY_DROP            00006756 label_PLAY_EXPLOSION_1     
0000677D label_PLAY_EXPLOSION_2     00006728 T202                       
00006755 T203                       0000677C T204                       
000067AD T205                       0000F5B6 stuck                      
0000F5C0 CPYBLK2.1                  0000F5C2 CPYBLK2.2                  
0000F5D3 CPYBLK.1                   0000F5D4 CPYBLK.2                   
???????? _cnt1_p0                   ???????? _wait.2                    
???????? _cnt1_p1                   0000F5EA _keypad_table              
???????? _wait.4                    ???????? _cnt1_key                  
???????? _cnt2_p0                   ???????? _wait.5                    
???????? _cnt2_p1                   ???????? _wait.7                    
???????? _cnt2_key                  00000102 _int                       
0000F5E5 _wait.1                    00000100 ISRVEC                     
???????? _int_vector.vs             ???????? _int_vector.vs1            
???????? _int_vector.vs2            0000F608 _int_vector.ds             
0000F610 _int_vector.vi14           0000F629 _int_vector.vi0            
0000F623 _int_vector.vi15           0000010B _border_mask               
00000337 _col0                      ???????? _scroll_x                  
???????? _scroll_y                  0000F693 _int_vector.vo97           
0000010F _music_frame               0000F68F _int_vector.vo14           
0000F696 _int_vector.vo15           0000FAAA _emit_sound                
???????? _emit_sound_ecs            0000F6B9 _int_vector.vi1            
0000F6A4 _int_vector.vi3            0000F6DC _int_vector.vii1           
0000F6C7 _int_vector.vii3           ???????? _scroll_d                  
???????? _int_vector.vi4            ???????? _int_vector.vi5            
???????? _int_vector.vi6            ???????? _int_vector.vi7            
???????? _int_vector.vi8            ???????? _int_vector.vi12           
???????? _int_vector.vi11           ???????? _scroll_buffer             
???????? _int_vector.vi10           ???????? _int_vector.vi13           
???????? _int_vector.vi9            ???????? IV_ISR                     
0000F6E9 _int_vector.vo98           0000F6EC _int_vector.vo16           
0000F7C2 _generate_music            00000342 _frame                     
0000F722 ntsc_note_table            0000F760 pal_note_table             
0000F7A7 _init_music.0              00000340 _music_table               
00000123 _music_mix                 ???????? _music2_mix                
0000F7B6 _play_music.1              00000341 _music_p                   
0000010C _music_start               00000111 _music_t                   
00000110 _music_tc                  00000125 _music_vol1                
00000126 _music_vol2                00000127 _music_vol3                
???????? _music2_vol1               ???????? _music2_vol2               
???????? _music2_vol3               0000F857 _generate_music.6          
0000F7DB _generate_music.15         0000F812 _generate_music.43         
0000F7DE _generate_music.41         0000F818 _generate_music.42         
0000F800 _generate_music.40         0000F804 _generate_music.39         
0000F809 _generate_music.38         0000F80D _generate_music.37         
0000F80F _generate_music.36         0000033F _music_gosub               
0000F8E5 _generate_music.0          0000F82E _generate_music.1          
00000114 _music_n1                  00000113 _music_s1                  
00000112 _music_i1                  0000F840 _generate_music.2          
00000117 _music_n2                  00000116 _music_s2                  
00000115 _music_i2                  0000F852 _generate_music.3          
0000011A _music_n3                  00000119 _music_s3                  
00000118 _music_i3                  0000011C _music_n4                  
0000011B _music_s4                  ???????? _generate_music.33         
???????? _music_n5                  ???????? _music_s5                  
???????? _music_i5                  ???????? _generate_music.34         
???????? _music_n6                  ???????? _music_s6                  
???????? _music_i6                  ???????? _generate_music.35         
???????? _music_n7                  ???????? _music_s7                  
???????? _music_i7                  ???????? _music_n8                  
???????? _music_s8                  0000F874 _generate_music.7          
0000F8E6 _note2freq                 0000011D _music_freq10              
00000120 _music_freq11              0000F872 _generate_music.20         
0000F891 _generate_music.8          0000011E _music_freq20              
00000121 _music_freq21              0000F88F _generate_music.21         
0000F8AE _generate_music.9          0000011F _music_freq30              
00000122 _music_freq31              0000F8AC _generate_music.22         
0000F8E5 _generate_music.4          0000F8C4 _generate_music.5          
0000F8E2 _generate_music.12         0000F8BB _generate_music.10         
00000124 _music_noise               0000FAF5 _activate_drum             
0000F8D3 _generate_music.11         ???????? _generate_music.23         
???????? _music2_freq10             ???????? _music2_freq11             
???????? _generate_music.24         ???????? _generate_music.25         
???????? _music2_freq20             ???????? _music2_freq21             
???????? _generate_music.26         ???????? _generate_music.27         
???????? _music2_freq30             ???????? _music2_freq31             
???????? _generate_music.28         ???????? _generate_music.29         
???????? _generate_music.31         ???????? _generate_music.32         
???????? _music2_noise              ???????? _activate_drum_ecs         
???????? _generate_music.30         0000F90F _piano_instrument          
0000F92C _clarinet_instrument       0000F967 _flute_instrument          
0000F8F1 _bass_instrument           0000F8F7 _bass_volume               
0000F99F _global_volume             0000F914 _piano_volume              
0000F937 _clarinet_vibrato          0000F94F _clarinet_volume           
0000F96F _flute_vibrato             0000F987 _flute_volume              
0000F9AA _global_volume.table       ???????? @@6                        
0000FAB4 _emit_sound.0              0000FAF4 _emit_sound.6              
0000FAD9 _emit_sound.1              0000FACD _emit_sound.2              
0000FAD2 _emit_sound.3              0000FAEB _emit_sound.4              
0000FAF0 _emit_sound.5              0000FB43 _activate_drum.0           
0000FB10 _activate_drum.1           0000FB25 _activate_drum.2           
0000FB3D _activate_drum.3           ???????? @@0                        
???????? @@1                        ???????? @@2                        
???????? @@3                        0000FB44 _PW10                      
0000FB4A PRNUM16                    0000FB4B PRNUM16.l1                 
0000FB57 PRNUM16.z2                 0000FB52 PRNUM16.b                  
0000FB53 PRNUM16.b1                 0000FB56 PRNUM16.z1                 
0000FB68 PRNUM16.lblnk              0000FB65 PRNUM16.llp                
0000FB72 PRNUM16.ldone              0000FB73 PRNUM16.digit              
0000FB7C PRNUM16.dig1               0000FB8A PRNUM16.done               
0000FB7C PRNUM16.nxdig              0000FB7D PRNUM16.cont               
0000FB7F PRNUM16.spcl               0000FB7F PRNUM16.div                
???????? _AA                        ???????? _AA.end                    
???????? _AE1                       ???????? _AE1.end                   
???????? _AO                        ???????? _AO.end                    
???????? _AR                        ???????? _AR.end                    
???????? _AW                        ???????? _AW.end                    
???????? _AX                        ???????? _AX.end                    
???????? _AY                        ???????? _AY.end                    
???????? _BB1                       ???????? _BB1.end                   
???????? _BB2                       ???????? _BB2.end                   
???????? _CH                        ???????? _CH.end                    
???????? _DD1                       ???????? _DD1.end                   
???????? _DD2                       ???????? _DD2.end                   
???????? _DH1                       ???????? _DH1.end                   
???????? _DH2                       ???????? _DH2.end                   
???????? _EH                        ???????? _EH.end                    
???????? _EL                        ???????? _EL.end                    
???????? _ER1                       ???????? _ER1.end                   
???????? _ER2                       ???????? _ER2.end                   
???????? _EY                        ???????? _EY.end                    
???????? _FF                        ???????? _FF.end                    
???????? _GG1                       ???????? _GG1.end                   
???????? _GG2                       ???????? _GG2.end                   
???????? _GG3                       ???????? _GG3.end                   
???????? _HH1                       ???????? _HH1.end                   
???????? _HH2                       ???????? _HH2.end                   
???????? _IH                        ???????? _IH.end                    
???????? _IY                        ???????? _IY.end                    
???????? _JH                        ???????? _JH.end                    
???????? _KK1                       ???????? _KK1.end                   
???????? _KK2                       ???????? _KK2.end                   
???????? _KK3                       ???????? _KK3.end                   
???????? _LL                        ???????? _LL.end                    
???????? _MM                        ???????? _MM.end                    
???????? _NG1                       ???????? _NG1.end                   
???????? _NN1                       ???????? _NN1.end                   
???????? _NN2                       ???????? _NN2.end                   
???????? _OR2                       ???????? _OR2.end                   
???????? _OW                        ???????? _OW.end                    
???????? _OY                        ???????? _OY.end                    
???????? _PA1                       ???????? _PA1.end                   
???????? _PA2                       ???????? _PA2.end                   
???????? _PA3                       ???????? _PA3.end                   
???????? _PA4                       ???????? _PA4.end                   
???????? _PA5                       ???????? _PA5.end                   
???????? _PP                        ???????? _PP.end                    
???????? _RR1                       ???????? _RR1.end                   
???????? _RR2                       ???????? _RR2.end                   
???????? _SH                        ???????? _SH.end                    
???????? _SS                        ???????? _SS.end                    
???????? _TH                        ???????? _TH.end                    
???????? _TT1                       ???????? _TT1.end                   
???????? _TT2                       ???????? _TT2.end                   
???????? _UH                        ???????? _UH.end                    
???????? _UW1                       ???????? _UW1.end                   
???????? _UW2                       ???????? _UW2.end                   
???????? _VV                        ???????? _VV.end                    
???????? _WH                        ???????? _WH.end                    
???????? _WW                        ???????? _WW.end                    
???????? _XR2                       ???????? _XR2.end                   
???????? _YR                        ???????? _YR.end                    
???????? _YY1                       ???????? _YY1.end                   
???????? _YY2                       ???????? _YY2.end                   
???????? _ZH                        ???????? _ZH.end                    
???????? _ZZ                        ???????? _ZZ.end                    
???????? IV_INIT                    ???????? @@no_ivoice                
???????? IV.FPTR                    ???????? IV.PPTR                    
???????? IV.QH                      ???????? IV.QT                      
???????? @@ok                       ???????? @@ald_busy                 
???????? @@leave                    ???????? @@no_fifodata              
???????? @@fifo_fill                ???????? @@fifo_busy                
???????? IV.FLEN                    ???????? @@last_fifo                
???????? @@no_fifo_ald              ???????? @@next_phrase              
???????? @@process_phrase           ???????? IV.Q                       
???????? @@play_resrom_r4           ???????? @@new_phrase               
???????? @@play_fifo                ???????? @@play_resrom_r0           
???????? @@new_fifo_ok              ???????? @@qtok                     
???????? IV_PLAY                    ???????? IV_PLAYW                   
???????? IV_PLAY.leave              ???????? IV_PLAY.2                  
???????? IV_HUSH                    ???????? IV_WAIT.leave              
???????? IV_WAIT                    ???????? @@q_loop                   
???????? @@s_loop                   ???????? IV_SAYNUM16                
???????? @@zero                     ???????? @@thloop                   
???????? @@no_thousand              ???????? IV_SAYNUM16.recurse        
???????? @@no_hundred               ???????? @@hloop                    
???????? IV_PLAYW.1                 ???????? @@notrecurse               
???????? @@recurse                  ???????? @@teens                    
???????? @@tyloop                   ???????? JF.first                   
???????? JF.last                    ???????? JF.addr                    
???????? JF.row                     ???????? JF.wrcmd                   
???????? JF.rdcmd                   ???????? JF.ercmd                   
???????? JF.wrkey                   ???????? JF.rdkey                   
???????? JF.erkey                   ???????? JF.write                   
???????? JF.read                    ???????? JF.erase                   
???????? JF.INIT                    ???????? @@__code                   
???????? JF.SYSRAM                  ???????? JF.CMD                     
???????? JF.SV.R4                   ???????? JF.SV.R0                   
???????? JF.SV.R5                   ???????? JF.SV.ISR                  
0000FB8D QSQR8_TBL                  0000FC8C QSQR8_TBL.mid              
0000FE90 qs_mpy8.ok                 0000FE93 qs_mpy16                   
0000FEA4 qs_mpy16.pos_ll            0000FEAB qs_mpy16.pos_lh            
0000FEB2 qs_mpy16.pos_hl            ???????? uf_udiv16                  
???????? @@4                        ???????? @@5                        
???????? @@7                        ???????? @@8                        
???????? @@9                        ???????? @@10                       
???????? @@11                       ???????? @@12                       
???????? @@13                       ???????? @@14                       
???????? @@15                       ???????? @@16                       
???????? __rom_stats_draw_line      ???????? double                     
???????? _rom.idx                   ???????? _rom.cnt                   
???????? _rom.segnum                ???????? _rom.size                  
???????? .ROM.SegSize               ???????? _rom.used                  
???????? .ROM.SegUsed               ???????? _rom.avlb                  
???????? .ROM.SegAvlb               ???????? __rom_stats_scale          
???????? __rom_stats_pad_left       ???????? single                     
???????? _rom.bcnt                  ???????? __rom_stats_pad_right      
00000338 _col1                      00000339 _col2                      
0000033A _col3                      0000033B _col4                      
0000033C _col5                      00000343 _read                      
00000100 SCRATCH                    0000015B _SCRATCH                   
000002F0 SYSTEM                     00000308 _SYSTEM                    
                                	ROMW 16
0x0                             intybasic_map:	equ 0	; ROM map used
0x1                             intybasic_jlp:	equ 1	; JLP is used
0x0                             intybasic_cc3:	equ 0	; CC3 is used and where is RAM
                                	IF DEFINED __FEATURE.CFGVAR
                                		CFGVAR "jlp" = 1
                                	ENDI
0x0                             intybasic_ecs:	equ 0	; Forces to include ECS startup
0x0                             intybasic_voice:	equ 0	; Forces to include voice library
0x0                             intybasic_flash:	equ 0	; Forces to include Flash memory library
0x0                             intybasic_scroll:	equ 0	; Forces to include scroll library
0x1                             intybasic_col:	equ 1	; Forces to include collision detection
0x0                             intybasic_keypad:	equ 0	; Forces to include keypad library
0x1                             intybasic_music:	equ 1	; Forces to include music library
0x0                             intybasic_music_ecs:	equ 0	; Forces to include music library
0x1                             intybasic_music_volume:	equ 1	; Forces to include music volume change
0x0                             intybasic_stack:	equ 0	; Forces to include stack overflow checking
0x1                             intybasic_numbers:	equ 1	; Forces to include numbers library
0x1                             intybasic_fastmult:	equ 1	; Forces to include fast multiplication
0x0                             intybasic_fastdiv:	equ 0	; Forces to include fast division/remainder
                                	;
                                	; Prologue for IntyBASIC programs
                                	; by Oscar Toledo G.  http://nanochess.org/
                                	;
                                	; Revision: Jan/30/2014. Spacing adjustment and more comments.
                                	; Revision: Apr/01/2014. It now sets the starting screen pos. for PRINT
                                	; Revision: Aug/26/2014. Added PAL detection code.
                                	; Revision: Dec/12/2014. Added optimized constant multiplication routines.
                                	;                        by James Pujals.
                                	; Revision: Jan/25/2015. Added marker for automatic title replacement.
                                	;                        (option --title of IntyBASIC)
                                	; Revision: Aug/06/2015. Turns off ECS sound. Seed random generator using
                                	;                        trash in 16-bit RAM. Solved bugs and optimized
                                	;                        macro for constant multiplication.
                                	; Revision: Jan/12/2016. Solved bug in PAL detection.
                                	; Revision: May/03/2016. Changed in _mode_select initialization.
                                	; Revision: Jul/31/2016. Solved bug in multiplication by 126 and 127.
                                	; Revision: Sep/08/2016. Now CLRSCR initializes screen position for PRINT,
                                	;                        this solves bug when user programs goes directly
                                	;                        to PRINT.
                                	; Revision: Oct/21/2016. Accelerated MEMSET.
                                	; Revision: Jan/09/2018. Adjusted PAL/NTSC constant.
                                	; Revision: Feb/05/2018. Forces initialization of Intellivoice if included.
                                	;                        So VOICE INIT ceases to be dangerous.
                                	; Revision: Oct/30/2018. Redesigned PAL/NTSC detection using intvnut code,
                                	;                        also now compatible with Tutorvision. Reformatted.
                                	; Revision: Jan/10/2018. Added ECS detection.
                                	;

                                ;;==========================================================================;;
                                ;; IntyBASIC SDK Library: romseg-bs.mac                                     ;;
                                ;;--------------------------------------------------------------------------;;
                                ;;  This macro library is used by the IntyBASIC SDK to manage ROM address   ;;
                                ;;  segments and generate statistics on program ROM usage.  It is an        ;;
                                ;;  extension of the "romseg.mac" macro library with added support for      ;;
                                ;;  bank-switching.                                                         ;;
                                ;;                                                                          ;;
                                ;;  The library is based on a similar module created for the P-Machinery    ;;
                                ;;  programming framework, which itself was based on the "CART.MAC" macro   ;;
                                ;;  library originally created by Joe Zbiciak and distributed as part of    ;;
                                ;;  the SDK-1600 development kit.                                           ;;
                                ;;--------------------------------------------------------------------------;;
                                ;;      The file is placed into the public domain by its author.            ;;
                                ;;      All copyrights are hereby relinquished on the routines and data in  ;;
                                ;;      this file.  -- James Pujals (DZ-Jay), 2024                          ;;
                                ;;==========================================================================;;

                                ;; ======================================================================== ;;
                                ;;  ROM MANAGEMENT STRUCTURES                                               ;;
                                ;; ======================================================================== ;;

                                                ; Internal ROM information structure
0x0                             _rom            STRUCT  0
0x0                             @@null          QEQU    0
0xFFFFFFFF                      @@invalid       QEQU    -1

0x0                             @@legacy        QEQU    0
0x1                             @@static        QEQU    1
0x2                             @@dynamic       QEQU    2

0x8                             @@mapcnt        QEQU    8
0x1000                          @@pgsize        QEQU    4096

0xFFFFFFFF                      @@open          QSET    @@invalid
0x0                             @@error         QSET    @@null

0x0                             @@segcnt        QSET    0
0x0                             @@segs          QSET    0
                                                ENDS

0x0                             .ROM            STRUCT  0
0xFFFFFFFF                      @@CurrentSeg    QSET    _rom.invalid    ; No open segment

0x0                             @@Size          QSET    0
0x0                             @@Used          QSET    0
0x0                             @@Available     QSET    0

                                                ; Initialize segment counters
0x0                             @@Segments[_rom.legacy ]    QSET    0
0x0                             @@Segments[_rom.static ]    QSET    0
0x0                             @@Segments[_rom.dynamic]    QSET    0

                                                ENDS

0x0                             _rom_stat       STRUCT  0
0x20                            @@space         QEQU    "                                                                           " ; 75
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x20                            
0x2D                            @@single        QEQU    "---------------------------------------------------------------------------"
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x2D                            
0x3D                            @@double        QEQU    "==========================================================================="
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
0x3D                            
                                                ENDS


                                ;; ======================================================================== ;;
                                ;;  __rom_raise_error(err, desc)                                            ;;
                                ;;  Generates an assembler error and sets the global error flag.            ;;
                                ;;                                                                          ;;
                                ;;  NOTE:   Both strings must be devoid of semi-colons and commas, or       ;;
                                ;;          Bad Things(tm) may happen during pre-processing.                ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      err         The error message.                                      ;;
                                ;;      desc        Optional error description, or _rom.null if none.       ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 (failed).                                            ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_raise_error(err, desc)
                                ;
                                    LISTING "off"

                                _rom.error      QSET    _rom.invalid

                                _rom.err_len    QSET    _rom.null
                                _rom.err_len    QSET    %desc%

                                        IF (_rom.err_len <> _rom.null)
                                            ERR  $(%err%, ": ", %desc%)
                                        ELSE
                                            ERR  $(%err%)
                                        ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_reset_error                                                       ;;
                                ;;  Resets the global error flag.                                           ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      None.                                                               ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  0 (no error)                                            ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_reset_error
                                ;
                                _rom.error      QSET    _rom.null
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_validate_map(map)                                                 ;;
                                ;;  Validates the requested ROM map.                                        ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      map         The ROM map selected. Valid values are 0 to 7.          ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_validate_map(map)
                                ;
                                _rom.max        QSET    (_rom.mapcnt - 1)

                                        IF (((%map%) < 0) OR ((%map%) > _rom.max))
                                            __rom_raise_error(["Invalid ROM map number (", $#(%map%), ")"], ["Valid maps are from 0 to ", $#(_rom.max), "."])
                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_validate_type(type)                                               ;;
                                ;;  Validates the requested segment type symbol.                            ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      type        The segment type to validate.                           ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_validate_type(type)
                                ;
                                        IF ((CLASSIFY(_rom.%type%) = -10000))
                                            __rom_raise_error("Invalid ROM segment type \"%type%\".", _rom.null)
                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_validate_segment(seg)                                             ;;
                                ;;  Validates the requested segment number to ensure it is supported by the ;;
                                ;;  active memory map.                                                      ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      seg         The segment number to validate.                         ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_validate_segment(seg)
                                ;
                                        IF ((CLASSIFY(_rom.segidx[%seg%]) = -10000))
                                            __rom_raise_error(["Invalid ROM segment number #", $#(%seg%), " for selected memory map."], _rom.null)
                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_validate_seg_bank(seg, bank)                                      ;;
                                ;;  Validates the requested dynamic segment and bank number to ensure it is ;;
                                ;;  supported by the active memory map.                                     ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      seg         The segment number to validate, or -1 for the first one.;;
                                ;;      bank        The dynamic segment bank number to validate.            ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_validate_seg_bank(seg, bank)
                                ;
                                        ; First, check if the map supports dynamic segments at all
                                        IF (.ROM.Segments[_rom.dynamic] = 0)
                                                __rom_raise_error("The selected memory map does not support dynamic segments.", _rom.null)
                                        ENDI

                                        ; Validate the segment
                                        IF (_rom.error = _rom.null)
                                                __rom_validate_segment(%seg%)
                                        ENDI

                                        ; Validate the bank
                                        IF (_rom.error = _rom.null)

                                _rom.num    QSET    _rom.segidx[%seg%]
                                _rom.max    QSET    (_rom.bnkcnt[_rom.num] - 1)

                                            IF (((%bank%) < 0) OR ((%bank%) > _rom.max))
                                                __rom_raise_error(["Invalid bank number #", $#(%bank%), " for dynamic ROM segment #", $#(%seg%)], ["Must be between 0 and ", $#(_rom.max), "."])
                                            ENDI

                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_validate_segnum(segnum)                                           ;;
                                ;;  Validates the requested internal segment number to ensure that it is    ;;
                                ;;  valid within the active memory map.                                     ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      segnum      The internal memory map segment number to validate.     ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_validate_segnum(segnum)
                                ;
                                        IF _EXPMAC ((CLASSIFY(_rom.t[%segnum%]) = -10000))
                                            __rom_raise_error(["Unknown internal ROM segment number #", $#(%segnum%), "."], _rom.null)
                                        ELSE

                                _rom.type   QSET    _rom.t[%segnum%]
                                _rom.max    QSET    (.ROM.Segments[_rom.type] - 1)

                                            IF _EXPMAC (((%segnum%) < 0) OR ((%segnum%) > _rom.max))
                                                __rom_raise_error(["Invalid internal segment number #", $#(%segnum%), " for selected memory map"], ["Must be a value between 0 and ", $#(_rom.max), "."])
                                            ENDI

                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_assert_setup(label)                                               ;;
                                ;;  Ensures that ROM.Setup has been called.                                 ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      label       A quoted-string containing the label of the asserting   ;;
                                ;;                  macro or function.                                      ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_assert_setup(label)
                                ;
                                        IF ((CLASSIFY(_rom.init) = -10000))
                                            __rom_raise_error(["ROM", ".Setup directive must be used before calling ROM.", %label%, "."], _rom.null)
                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_assert_romseg_support(label)                                      ;;
                                ;;  Prevents the invocation of a feature that is not supported by the       ;;
                                ;;  legacy memory map when ROM map #0 is selected.                          ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      label       A quoted-string containing the label of the asserting   ;;
                                ;;                  macro or function.                                      ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_assert_romseg_support(label)
                                ;
                                        IF (_rom.map = 0)
                                            __rom_raise_error([%label%, " failed"], ["Legacy ROM map #", $#(_rom.map), " does not support it."])
                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_assert_def_order(type)                                            ;;
                                ;;  Ensures that segments are defined in the proper order:  all legacy and  ;;
                                ;;  static segments first, followed by all dynamic ones.                    ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      type        The segment type to check.                              ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_assert_def_order(type)
                                ;
                                _rom.type   QSET    _rom.%type%

                                        ; Make sure all dynamic segments are defined last
                                        IF (((_rom.type = _rom.legacy) OR (_rom.type = _rom.static)) AND (.ROM.Segments[_rom.dynamic] > 0))
                                            __rom_raise_error("Invalid ROM segment definition order", "All static and legacy segments must be defined before any dynamic ones.")
                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_segmem_size(segnum)                                               ;;
                                ;;  Computes the total size of a ROM segment.                               ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      segnum      The internal segment for which to compute the size.     ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      None.                                                               ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_segmem_size(segnum)
                                ;
                                .ROM.SegSize[%segnum%]  QSET (_rom.e[%segnum%] - _rom.b[%segnum%] + 1)
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_segmem_used(segnum)                                               ;;
                                ;;  Computes the usage of a ROM segment.                                    ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      segnum      The internal segment for which to compute the usage.    ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      None.                                                               ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_segmem_used(segnum)
                                ;
                                .ROM.SegUsed[%segnum%]  QSET (_rom.pos[%segnum%] - _rom.b[%segnum%])
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_segmem_available(segnum)                                          ;;
                                ;;  Computes the available space of a ROM segment.                          ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      segnum      The internal segment for which to compute the available ;;
                                ;;                  space.                                                  ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      None.                                                               ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_segmem_available(segnum)
                                ;
                                .ROM.SegAvlb[%segnum%]  QSET (_rom.e[%segnum%] - _rom.pos[%segnum%] + 1)
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_calculate_stats                                                   ;;
                                ;;  Computes the total ROM size and usage statistics.                       ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      None.                                                               ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      None.                                                               ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_calculate_stats
                                ;
                                _rom.segnum     QSET    0

                                            REPEAT (_rom.segcnt)

                                .ROM.Size       SET     (.ROM.Size      + .ROM.SegSize[_rom.segnum])
                                .ROM.Used       SET     (.ROM.Used      + .ROM.SegUsed[_rom.segnum])
                                .ROM.Available  SET     (.ROM.Available + .ROM.SegAvlb[_rom.segnum])

                                _rom.segnum     QSET    (_rom.segnum + 1)

                                            ENDR
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_init_segmem(seg, start, end, page, type)                          ;;
                                ;;  Initializes and configures the requested memory map segment indicated   ;;
                                ;;  by "seg," using the provided arguments.  All internal data structures   ;;
                                ;;  for memory integrity and accounting are also initialized.               ;;
                                ;;                                                                          ;;
                                ;;                                                                          ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      seg         The number of the segment to initialize.                ;;
                                ;;      start       The start address of the segment.                       ;;
                                ;;      end         The end address of the segment.                         ;;
                                ;;      page        An optional page number to switch the segment to.       ;;
                                ;;      type        The type of segment:  "legacy," "static," or "dynamic". ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_init_segmem(seg, start, end, page, type)
                                ;
                                                __rom_validate_type(%type%)
                                                __rom_assert_def_order(%type%)

                                        IF (_rom.error = _rom.null)

                                _rom.type           QSET    _rom.%type%
                                _rom.num            QSET    _rom.segcnt                 ; New internal segment number
                                _rom.segcnt         QSET    (_rom.segcnt + 1)           ; Total internal segments (so far)

                                            ; Keep track of the index for the given segment
                                            IF ((CLASSIFY(_rom.segidx[%seg%]) = -10000))
                                _rom.segs           QSET    (_rom.segs + 1)
                                _rom.segidx[%seg%]  QSET    _rom.num
                                _rom.bnkcnt[%seg%]  QSET    0
                                            ENDI

                                _rom.b   [_rom.num] QSET    %start%                     ; Start address
                                _rom.e   [_rom.num] QSET    %end%                       ; End address
                                _rom.p   [_rom.num] QSET    %page%                      ; Page number
                                _rom.t   [_rom.num] QSET    _rom.type                   ; Segment type

                                            IF ((%page%) <> _rom.invalid)

                                _rom.sbase          QSET    (_rom.b[_rom.num] AND $F000)
                                _rom.send           QSET    (_rom.e[_rom.num] OR  $0FFF)
                                _rom.spages         QSET    (((_rom.send - _rom.sbase) + 1) / _rom.pgsize)

                                _rom.pgs [_rom.num] QSET    _rom.spages                 ; Physical pages in segment

                                                ; For dynamic segments, keep track of
                                                ; the number of banks.
                                                IF (_rom.type = _rom.dynamic)
                                _rom.bnk [_rom.num] QSET    _rom.bnkcnt[%seg%]          ; Logical bank number
                                _rom.bnkcnt[%seg%]  QSET    (_rom.bnkcnt[%seg%] + 1)    ; Banks in segment
                                                ENDI

                                            ELSE

                                _rom.bnk [_rom.num] QSET    _rom.invalid
                                _rom.pgs [_rom.num] QSET    _rom.invalid

                                            ENDI

                                _rom.seg [_rom.num] QSET    %seg%
                                _rom.pos [_rom.num] QSET    %start%                     ; Starting position

                                .ROM.Segments[_rom.type] QSET   (.ROM.Segments[_rom.type] + 1)

                                            IF (_rom.type <> _rom.legacy)
                                                ; Initialize accounting statistics
                                                __rom_segmem_size     (_rom.num)
                                                __rom_segmem_used     (_rom.num)
                                                __rom_segmem_available(_rom.num)
                                            ENDI
                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_check_segmem_range(addr, segnum)                                  ;;
                                ;;  Checks an address to make sure it falls within a given ROM segment.     ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      addr        The address to check.                                   ;;
                                ;;      segnum      The internal segment for which to check the range.      ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;;      _rom.ovrflo The number of words in excess.                          ;;
                                ;;      _rom.sidx   The logical segment number.                             ;;
                                ;;      _rom.bidx   The logical bank number.                                ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_check_segmem_range(addr, segnum)
                                ;
                                        IF (_rom.open = %segnum%)
                                _rom.rbase      QSET    _rom.cb
                                _rom.rend       QSET    _rom.ce
                                        ELSE
                                _rom.rbase      QSET    _rom.b[%segnum%]
                                _rom.rend       QSET    _rom.e[%segnum%]
                                        ENDI


                                        IF _EXPMAC ((%addr%) < _rom.rbase) OR (((%addr%) - 1) > _rom.rend)

                                _rom.ovrflo     QSET    ((%addr%) - _rom.rend - 1)
                                _rom.sidx       QSET    _rom.seg[%segnum%]
                                _rom.bidx       QSET    _rom.bnk[%segnum%]

                                          ; NOTE: Overflows are significant, so we want to
                                          ;       display such errors in STDOUT as well.
                                          IF _EXPMAC (_rom.t[%segnum%] = _rom.dynamic)
                                            __rom_raise_error(["Dynamic ROM segment overflow in segment #", $#(_rom.sidx), ", bank #", $#(_rom.bidx)], ["Total ", $#(_rom.ovrflo), " words in excess."])

                                            SMSG $("ERROR: Overflow in dynamic ROM segment #", $#(_rom.sidx), ", bank #", $#(_rom.bidx), ": Total ", $#(_rom.ovrflo), " words in excess.")
                                          ELSE
                                            __rom_raise_error(["ROM segment overflow in segment #", $#(_rom.sidx)], ["Total ", $#(_rom.ovrflo), " words in excess."])

                                            SMSG $("ERROR: Overflow in ROM segment #", $#(_rom.sidx), ": Total ", $#(_rom.ovrflo), " words in excess.")
                                          ENDI
                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_set_pc_addrs(addr, page)                                          ;;
                                ;;  Relocates the program counter to the given address, selecting a         ;;
                                ;;  specific page if requested.                                             ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      addr        The new address to set the program counter.             ;;
                                ;;      page        An optional page to select (or _rom.invalid if none).   ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      None.                                                               ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_set_pc_addrs(addr, page)
                                ;
                                        IF (%page% <> _rom.invalid)

                                            LISTING "on"
                                                ; Open segment page
                                                ORG     %addr%:%page%
                                            LISTING "prev"

                                        ELSE

                                            LISTING "on"
                                                ; Open segment
                                                ORG     %addr%
                                            LISTING "prev"

                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_open_seg(segnum)                                                  ;;
                                ;;  Opens a ROM segment.  If the segment is already open, it checks the     ;;
                                ;;  current program counter to ensure it is still within valid range.       ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      segnum      The internal memory map segment to open.                ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_open_seg(segnum)
                                ;
                                                __rom_reset_error
                                                __rom_validate_segnum(%segnum%)

                                        IF _EXPMAC (_rom.error = _rom.null)

                                            IF _EXPMAC (_rom.open <> %segnum%)

                                _rom.cb         QSET    _rom.b  [%segnum%]      ; Current base address
                                _rom.ce         QSET    _rom.e  [%segnum%]      ; Current end address
                                _rom.cp         QSET    _rom.p  [%segnum%]      ; Current page

                                _rom.cpos       QSET    _rom.pos[%segnum%]

                                                __rom_set_pc_addrs(_rom.cpos, _rom.cp)

                                _rom.open       QSET    %segnum%
                                .ROM.CurrentSeg QSET    _rom.open

                                            ELSE

                                _rom.pc         QSET    $

                                                ; If the segment is already open, just
                                                ; verify we're still within in range.
                                                __rom_check_segmem_range(_rom.pc, %segnum%)

                                            ENDI

                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_close_seg(segnum)                                                 ;;
                                ;;  Closes an open ROM segment.  It also checks that the current program    ;;
                                ;;  counter falls within the valid range of the open segment.  Nothing will ;;
                                ;;  be done if "segnum" is _rom.invalid.  An error is raised if the given   ;;
                                ;;  segment is not open.                                                    ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      segnum      The internal memory map segment to close.               ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_close_seg(segnum)
                                ;
                                                __rom_reset_error

                                        IF ((%segnum%) <> _rom.invalid)

                                                __rom_validate_segnum(%segnum%)

                                          IF (_rom.error = _rom.null)

                                            IF (_rom.open <> %segnum%)
                                                IF (_rom.t[%segnum%] = _rom.dynamic)
                                                  __rom_raise_error("Dynamic ROM segment closure failed", ["Bank #", $#(_rom.bnk[%segnum%]), " is not opened."])
                                                ELSE
                                                  __rom_raise_error("ROM segment closure failed", ["Segment #", $#(_rom.seg[%segnum%]), " is not opened."])
                                                ENDI
                                            ELSE

                                _rom.pc             QSET $

                                              ; Ignore legacy segments
                                              IF (_rom.t[%segnum%] <> _rom.legacy)

                                                ; Close segment
                                                __rom_check_segmem_range(_rom.pc, %segnum%)

                                                ; Keep track of current segment position
                                _rom.pos[%segnum%]  QSET _rom.pc

                                                ; Compute usage statistics
                                                __rom_segmem_used(%segnum%)
                                                __rom_segmem_available(%segnum%)

                                              ENDI

                                _rom.open           QSET _rom.invalid                   ; Close segment %segnum%
                                .ROM.CurrentSeg     QSET _rom.open

                                            ENDI

                                          ENDI

                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_try_open_seg(segnum, min)                                         ;;
                                ;;  Opens a given ROM segment if it has a minimum of "min" words available. ;;
                                ;;                                                                          ;;
                                ;;  NOTE:   If a ROM segment is currently opened, this macro will not do    ;;
                                ;;          anything.  This lets us chain calls to __rom_try_open_seg() for ;;
                                ;;          all available segments, in order to attempt to find one with    ;;
                                ;;          sufficient capacity.                                            ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      segnum      The internal memory map segment to test and open.       ;;
                                ;;      min         The minimum size required, in 16-bit words.             ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_try_open_seg(segnum, min)
                                ;
                                        IF _EXPMAC ((_rom.open = _rom.invalid) AND (%segnum% < _rom.segcnt) AND ((_rom.pos[%segnum%] + (%min%)) < _rom.e[%segnum%]))
                                                __rom_open_seg(%segnum%)
                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_select_segment(seg)                                               ;;
                                ;;  Relocates the program counter to a static ROM segment.  Also closes the ;;
                                ;;  currently open segment, keeping track of its usage.                     ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      seg         The static ROM segment to open.                         ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_select_segment(seg)
                                ;
                                        IF (_rom.error = _rom.null)
                                                __rom_validate_segment(%seg%)
                                        ENDI

                                        IF (_rom.error = _rom.null)

                                _rom.segnum     QSET    _rom.segidx[%seg%]
                                _rom.type       QSET    _rom.t[_rom.segnum]

                                            ; Fail if the segment is dynamic
                                            IF (_rom.type = _rom.dynamic)
                                                __rom_raise_error(["Cannot select ROM segment #", $#(%seg%), " without a bank"], "Segment is dynamic.")
                                            ENDI

                                            ; Open static segment
                                            IF (_rom.type = _rom.static)
                                                __rom_close_seg(_rom.open)
                                                __rom_open_seg(_rom.segnum)
                                            ENDI

                                        ENDI
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_switch_mem_page(base, page)                                       ;;
                                ;;  Switches a range of memory addresses to a target page.                  ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      base        The base address of the range to switch.                ;;
                                ;;      page        The target page number.                                 ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_switch_mem_page(base, page)
                                ;
                                _rom.b_addr     QSET    ((%base%) AND $F000)
                                _rom.b_src      QSET    (_rom.b_addr OR $0A50 OR (%page%))
                                _rom.b_trg      QSET    (_rom.b_addr OR $0FFF)

                                    LISTING "on"

                                                MVII    #_rom.b_src, R0                 ; \_ Switch bank: [$s000 - $sFFF] to page
                                                MVO     R0,     _rom.b_trg              ; /

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_stats_scale(val, scale)                                           ;;
                                ;;  Returns value "val" scaled by "scale." The formula used for scaling is: ;;
                                ;;                                                                          ;;
                                ;;              return = ceil(val / scale)                                  ;;
                                ;;                     = [((val * base) / scale) + (base - 1)] / base       ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      val         The value to scale.                                     ;;
                                ;;      scale       The scale to apply.                                     ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      ceil(val / scale).                                                  ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_stats_scale(val, scale)
                                    (((((%val%) * 10) / (%scale%)) + 9) / 10)
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_stats_draw_line(style, len)                                       ;;
                                ;;  Outputs a horizontal line, useful for displaying tabular information.   ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      style       The line style to draw.  Available values are:          ;;
                                ;;                      single      Single (thin) line.                     ;;
                                ;;                      double      Double (thick) line.                    ;;
                                ;;                                                                          ;;
                                ;;      len         The length of the line to draw, in characters.          ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      A horizontal line in the given style.                               ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_stats_draw_line(style, len)
                                        _rom_stat.%style%[0, ((%len%) - 1)]
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_stats_pad_left(str, len)                                          ;;
                                ;;  Outputs a string in a field of "len" characters, justified to the right ;;
                                ;;  and padded on the left with blank spaces.                               ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      str         The string to output.                                   ;;
                                ;;      len         The length of the field, in characters.                 ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      The string, left-padded in the field.                               ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_stats_pad_left(str, len)
                                        $(_rom_stat.space[0, ((%len%) - STRLEN(%str%) - 1)], %str%)
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  __rom_stats_pad_right(str, len)                                         ;;
                                ;;  Outputs a string in a field of "len" characters, justified to the left  ;;
                                ;;  and padded on the right with blank spaces.                              ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      str         The string to output.                                   ;;
                                ;;      len         The length of the field, in characters.                 ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      The string, right-padded in the field.                              ;;
                                ;; ======================================================================== ;;
                                MACRO   __rom_stats_pad_right(str, len)
                                        $(%str%, _rom_stat.space[0, ((%len%) - STRLEN(%str%) - 1)])
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  ROM.Setup map                                                           ;;
                                ;;  Configures and initializes the memory map indicated by "map."           ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      map         The memory map number to initialize.                    ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   ROM.Setup map
                                ;
                                    LISTING "code"

                                                __rom_reset_error

                                        ; Make sure the directive is called only once!
                                        IF ((CLASSIFY(_rom.init) = -10000))
                                                __rom_validate_map(%map%)
                                        ELSE
                                                __rom_raise_error(["ROM", ".Setup directive must be called only once per program."], _rom.null)
                                        ENDI

                                        IF (_rom.error = _rom.null)

                                _rom.init       QEQU    1
                                _rom.map        QSET    %map%
                                _rom.ecs_off    QSET    _rom.null

                                            IF (DEFINED intybasic_ecs)
                                _rom.ecs_req    QSET    intybasic_ecs
                                            ELSE
                                _rom.ecs_req    QSET    _rom.null
                                            ENDI

                                            IF (DEFINED intybasic_jlp)
                                _rom.jlp_req    QSET    intybasic_jlp
                                            ELSE
                                _rom.jlp_req    QSET    _rom.null
                                            ENDI

                                            ; ---------------------------------------------------------
                                            ; Initialize ROM segments for active memory map.
                                            ;
                                            ; NOTE: Define below the segments available for each memory
                                            ;       map supported.  When defining a map, the following
                                            ;       rules must be observed:
                                            ;
                                            ;         - Map #0 must always be the "legacy" map.
                                            ;         - All static segments in a map must be defined
                                            ;           before any dynamic ones.
                                            ;         - Segment numbers must start at zero.
                                            ;         - Segment numbers should be defined in order.
                                            ;         - There must not be gaps in segment numbers.
                                            ; ---------------------------------------------------------

                                            ; MAP #0: Legacy memory map wit no ROM management
                                            IF (_rom.map = 0)
                                                __rom_init_segmem(0, $5000, $FFFF, _rom.invalid, legacy)
                                            ENDI

                                            ; MAP #1: Original Mattel 16K static memory map
                                            IF (_rom.map = 1)
                                                __rom_init_segmem(0, $5000, $6FFF, _rom.invalid, static)
                                                __rom_init_segmem(1, $D000, $DFFF, _rom.invalid, static)
                                                __rom_init_segmem(2, $F000, $FFFF, _rom.invalid, static)
                                            ENDI

                                            ; MAP #2: JLP 42K static memory map
                                            IF (_rom.map = 2)
                                _rom.ecs_off    QSET    1

                                                __rom_init_segmem(0, $5000, $6FFF, _rom.invalid, static)
                                                __rom_init_segmem(1, $A000, $BFFF, _rom.invalid, static)
                                                __rom_init_segmem(2, $C040, $FFFF, _rom.invalid, static)

                                              IF (_rom.jlp_req <> _rom.null)
                                                __rom_init_segmem(3, $2000, $2FFF, $F,           static)
                                                __rom_init_segmem(4, $7000, $7FFF, $F,           static)
                                              ELSE
                                                __rom_init_segmem(3, $2100, $2FFF, _rom.invalid, static)
                                                __rom_init_segmem(4, $7100, $7FFF, _rom.invalid, static)
                                              ENDI

                                                __rom_init_segmem(5, $4810, $4FFF, _rom.invalid, static)
                                            ENDI

                                            ; MAP #3: Dynamic bank-switching 98K memory map - 4K banks
                                            IF (_rom.map = 3)
                                _rom.ecs_off    QSET    1

                                                __rom_init_segmem(0, $5000, $6FFF, _rom.invalid, static)
                                                __rom_init_segmem(1, $A000, $BFFF, _rom.invalid, static)
                                                __rom_init_segmem(2, $C040, $FFFF, _rom.invalid, static)
                                                __rom_init_segmem(3, $2000, $2FFF, $F,           static)
                                                __rom_init_segmem(4, $4810, $4FFF, _rom.invalid, static)

                                                __rom_init_segmem(5, $7000, $7FFF, $1,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $2,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $3,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $4,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $5,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $6,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $7,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $8,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $9,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $A,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $B,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $C,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $D,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $E,           dynamic)
                                                __rom_init_segmem(5, $7000, $7FFF, $F,           dynamic)
                                            ENDI

                                            ; MAP #4: Dynamic bank-switching 154K memory map - 8K banks
                                            IF (_rom.map = 4)
                                _rom.ecs_off    QSET    1

                                                __rom_init_segmem(0, $5000, $6FFF, _rom.invalid, static)
                                                __rom_init_segmem(1, $A000, $BFFF, _rom.invalid, static)
                                                __rom_init_segmem(2, $C040, $DFFF, _rom.invalid, static)
                                                __rom_init_segmem(3, $2000, $2FFF, $F,           static)
                                                __rom_init_segmem(4, $7000, $7FFF, $F,           static)
                                                __rom_init_segmem(5, $4810, $4FFF, _rom.invalid, static)

                                                __rom_init_segmem(6, $E000, $FFFF, $0,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $2,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $3,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $4,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $5,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $6,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $7,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $8,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $9,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $A,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $B,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $C,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $D,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $E,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $F,           dynamic)
                                            ENDI

                                            ; MAP #5: Dynamic bank-switching 254K memory map - 16K banks
                                            IF (_rom.map = 5)
                                _rom.ecs_off    QSET    1

                                                __rom_init_segmem(0, $5000, $6FFF, _rom.invalid, static)
                                                __rom_init_segmem(1, $A000, $BFFF, _rom.invalid, static)
                                                __rom_init_segmem(2, $2000, $2FFF, $F,           static)
                                                __rom_init_segmem(3, $7000, $7FFF, $F,           static)
                                                __rom_init_segmem(4, $4810, $4FFF, _rom.invalid, static)

                                                __rom_init_segmem(5, $C040, $FFFF, $0,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $2,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $3,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $4,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $5,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $6,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $7,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $8,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $9,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $A,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $B,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $C,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $D,           dynamic)
                                                __rom_init_segmem(5, $C040, $FFFF, $E,           dynamic)
                                            ENDI

                                            ; MAP #6: Dynamic bank-switching 256K map -- 2 dynamic segments
                                            IF (_rom.map = 6)
                                _rom.ecs_off    QSET    1

                                                __rom_init_segmem(0, $5000, $6FFF, _rom.invalid, static)
                                                __rom_init_segmem(1, $C040, $DFFF, _rom.invalid, static)

                                                __rom_init_segmem(2, $A000, $BFFF, $0,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $1,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $2,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $3,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $4,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $5,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $6,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $7,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $8,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $9,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $A,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $B,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $C,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $D,           dynamic)
                                                __rom_init_segmem(2, $A000, $BFFF, $E,           dynamic)

                                                __rom_init_segmem(3, $E000, $FFFF, $0,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $2,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $3,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $4,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $5,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $6,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $7,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $8,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $9,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $A,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $B,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $C,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $D,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $E,           dynamic)
                                                __rom_init_segmem(3, $E000, $FFFF, $F,           dynamic)
                                            ENDI


                                            ; MAP #7: Dynamic bank-switching 238K map -- 4 dynamic segments
                                            IF (_rom.map = 7)
                                _rom.ecs_off    QSET    1

                                                __rom_init_segmem(0, $5000, $6FFF, _rom.invalid, static)
                                                __rom_init_segmem(1, $2000, $2FFF, $F,           static)
                                                __rom_init_segmem(2, $4810, $4FFF, _rom.invalid, static)

                                                __rom_init_segmem(3, $7000, $7FFF, $1,           dynamic)
                                                __rom_init_segmem(3, $7000, $7FFF, $2,           dynamic)
                                                __rom_init_segmem(3, $7000, $7FFF, $3,           dynamic)
                                                __rom_init_segmem(3, $7000, $7FFF, $4,           dynamic)
                                                __rom_init_segmem(3, $7000, $7FFF, $5,           dynamic)
                                                __rom_init_segmem(3, $7000, $7FFF, $6,           dynamic)
                                                __rom_init_segmem(3, $7000, $7FFF, $7,           dynamic)
                                                __rom_init_segmem(3, $7000, $7FFF, $8,           dynamic)

                                                __rom_init_segmem(4, $A000, $BFFF, $0,           dynamic)
                                                __rom_init_segmem(4, $A000, $BFFF, $1,           dynamic)
                                                __rom_init_segmem(4, $A000, $BFFF, $2,           dynamic)
                                                __rom_init_segmem(4, $A000, $BFFF, $3,           dynamic)
                                                __rom_init_segmem(4, $A000, $BFFF, $4,           dynamic)
                                                __rom_init_segmem(4, $A000, $BFFF, $5,           dynamic)
                                                __rom_init_segmem(4, $A000, $BFFF, $6,           dynamic)
                                                __rom_init_segmem(4, $A000, $BFFF, $7,           dynamic)

                                                __rom_init_segmem(5, $C040, $DFFF, $0,           dynamic)
                                                __rom_init_segmem(5, $C040, $DFFF, $1,           dynamic)
                                                __rom_init_segmem(5, $C040, $DFFF, $2,           dynamic)
                                                __rom_init_segmem(5, $C040, $DFFF, $3,           dynamic)
                                                __rom_init_segmem(5, $C040, $DFFF, $4,           dynamic)
                                                __rom_init_segmem(5, $C040, $DFFF, $5,           dynamic)
                                                __rom_init_segmem(5, $C040, $DFFF, $6,           dynamic)
                                                __rom_init_segmem(5, $C040, $DFFF, $7,           dynamic)

                                                __rom_init_segmem(6, $E000, $FFFF, $0,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $2,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $3,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $4,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $5,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $6,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $7,           dynamic)
                                                __rom_init_segmem(6, $E000, $FFFF, $8,           dynamic)
                                            ENDI

                                        ENDI

                                        IF (_rom.error = _rom.null)

                                                ; Disable ECS in advanced maps and when ECS is used.
                                            IF ((_rom.ecs_off <> _rom.null) OR (_rom.ecs_req))
                                                __rom_set_pc_addrs($4800, _rom.invalid) ; Set up bootstrap hook

                                                __rom_switch_mem_page($2000, $F)        ; \
                                                __rom_switch_mem_page($7000, $F)        ;  > Switch off ECS ROMs
                                                __rom_switch_mem_page($E000, $F)        ; /

                                                B       $1041                           ; resume boot
                                            ENDI

                                                ; Initialize ROM base to segment #0
                                                ;   ($5000 - $6FFF in all maps)
                                                __rom_open_seg(0)

                                                ; ------------------------------------------------
                                                ; Configure the ROM header (Universal Data Block)
                                                ; ------------------------------------------------
                                                BIDECLE _ZERO           ; MOB picture base
                                                BIDECLE _ZERO           ; Process table
                                                BIDECLE _MAIN           ; Program start
                                                BIDECLE _ZERO           ; Background base image
                                                BIDECLE _ONES           ; GRAM
                                                BIDECLE _TITLE          ; Cartridge title and date
                                                DECLE   $03C0           ; No ECS title, jump to code after title,
                                                                        ; ... no clicks

                                _ZERO:          DECLE   $0000           ; Border control
                                                DECLE   $0000           ; 0 = color stack, 1 = f/b mode

                                _ONES:          DECLE   $0001, $0001    ; Initial color stack 0 and 1: Blue
                                                DECLE   $0001, $0001    ; Initial color stack 2 and 3: Blue
                                                DECLE   $0001           ; Initial border color: Blue

                                        ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  ROM.SelectDefaultSegment                                                ;;
                                ;;  Relocates the program counter to the default ROM segment (#0).  Also    ;;
                                ;;  closes the currently open segment, keeping track of its usage.          ;;
                                ;;                                                                          ;;
                                ;;  The macro will do nothing when the legacy map (#0) is selected.         ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      None.                                                               ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   ROM.SelectDefaultSegment
                                ;
                                    LISTING "code"

                                                __rom_reset_error
                                                __rom_assert_setup("SelectSegment")

                                        IF (_rom.error = _rom.null)

                                            ; Ignore when the legacy map is selected
                                            IF (_rom.map > 0)
                                                __rom_select_segment(0)
                                            ENDI

                                        ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  ROM.SelectSegment seg                                                   ;;
                                ;;  Relocates the program counter to a static ROM segment.  Also closes the ;;
                                ;;  currently open segment, keeping track of its usage.                     ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      seg         The static ROM segment to open.                         ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   ROM.SelectSegment seg
                                ;
                                    LISTING "code"

                                                __rom_reset_error
                                                __rom_assert_romseg_support("Segment selection")
                                                __rom_assert_setup("SelectSegment")

                                        IF (_rom.error = _rom.null)
                                                __rom_select_segment(%seg%)
                                        ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  ROM.SelectBank seg, bank                                                ;;
                                ;;  Relocates the program counter to a dynamic ROM segment bank.  Also      ;;
                                ;;  closes the currently open segment, keeping track of its usage.          ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      seg         The dynamic ROM segment, or -1 for the first one.       ;;
                                ;;      bank        The segment bank number to open.                        ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   ROM.SelectBank seg, bank
                                ;
                                    LISTING "code"

                                                __rom_reset_error
                                                __rom_assert_romseg_support("Dynamic segment bank selection")
                                                __rom_assert_setup("SelectBank")

                                        IF (_rom.error = _rom.null)

                                            ; Determine the logical segment number
                                            IF ((%seg%) = _rom.invalid)
                                _rom.num        QSET    .ROM.Segments[_rom.static]
                                            ELSE
                                _rom.num        QSET    %seg%
                                            ENDI

                                _rom.type       QSET    _rom.t[_rom.num]

                                            ; Fail if the segment is not dynamic
                                            IF (_rom.type <> _rom.dynamic)
                                                __rom_raise_error(["Cannot select bank on ROM segment #", $#(_rom.num)], "Segment is not dynamic.")
                                            ENDI

                                            ; Validate the segment and bank
                                            IF (_rom.error = _rom.null)
                                                __rom_validate_seg_bank(_rom.num, %bank%)
                                            ENDI

                                            IF (_rom.error = _rom.null)

                                _rom.segnum     QSET    (_rom.segidx[_rom.num] + (%bank%))


                                              ; Open dynamic segment bank
                                              IF (_rom.error = _rom.null)
                                                __rom_close_seg(_rom.open)
                                                __rom_open_seg(_rom.segnum)
                                              ENDI

                                            ENDI

                                        ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  ROM.AutoSelectSegment min                                               ;;
                                ;;  Finds a static ROM segment with the specified minimum available         ;;
                                ;;  capacity, and relocates the program counter to it.  Also closes the     ;;
                                ;;  currently open segment, keeping track of its usage statistics.          ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      min         The minimum capacity required, in 16-bit words.         ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   ROM.AutoSelectSegment min
                                ;
                                    LISTING "code"

                                                __rom_reset_error
                                                __rom_assert_romseg_support("Automatic segment selection")
                                                __rom_assert_setup("AutoSelectSegment")

                                        IF (_rom.error = _rom.null)
                                                __rom_close_seg(_rom.open)
                                        ENDI

                                        IF (_rom.error = _rom.null)

                                _rom.segnum     QSET    0

                                            REPEAT (.ROM.Segments[_rom.static])
                                                __rom_try_open_seg(_rom.segnum, %min%)

                                _rom.segnum     QSET    (_rom.segnum + 1)
                                            ENDR

                                            ; Fail if no segment was found with enough space
                                            IF (_rom.open = _rom.invalid)
                                                __rom_raise_error("Automatic ROM segment selection failed", ["Could not find a suitable segment with ", $#(%min%), " words available."])
                                            ENDI

                                        ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  ROM.SwitchBank seg, bank                                                ;;
                                ;;  Switches a dynamic ROM segment to the requested bank.                   ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      seg         The dynamic ROM segment, or -1 for the first one.       ;;
                                ;;      bank        The dynamic ROM segment bank number to activate.        ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   ROM.SwitchBank seg, bank
                                ;
                                    LISTING "code"

                                                __rom_reset_error
                                                __rom_assert_romseg_support("Automatic segment selection")
                                                __rom_assert_setup("SwitchBank")

                                        IF (_rom.error = _rom.null)

                                            ; Determine the logical segment number
                                            IF ((%seg%) = _rom.invalid)
                                _rom.num        QSET    .ROM.Segments[_rom.static]
                                            ELSE
                                _rom.num        QSET    %seg%
                                            ENDI

                                _rom.type       QSET    _rom.t[_rom.num]

                                            ; Fail if the segment is not dynamic
                                            IF (_rom.type <> _rom.dynamic)
                                                __rom_raise_error(["Cannot switch bank on ROM segment #", $#(_rom.num)], "Segment is not dynamic.")
                                            ENDI

                                            ; Validate the segment and bank
                                            IF (_rom.error = _rom.null)
                                                __rom_validate_seg_bank(_rom.num, %bank%)
                                            ENDI

                                            IF (_rom.error = _rom.null)

                                _rom.segnum     QSET    (_rom.segidx[_rom.num] + (%bank%))

                                                ; Initialize REPEAT loop symbols
                                _rom.r_pgs      QSET    _rom.pgs[_rom.segnum]
                                _rom.r_addr     QSET    _rom.b  [_rom.segnum]
                                _rom.r_page     QSET    _rom.p  [_rom.segnum]

                                                ; Switch the physical pages that comprise
                                                ; the logical segment bank.
                                                REPEAT (_rom.r_pgs)
                                                    __rom_switch_mem_page(_rom.r_addr, _rom.r_page)
                                _rom.r_addr         QSET    (_rom.r_addr + _rom.pgsize)
                                                ENDR

                                            ENDI

                                        ENDI

                                    LISTING "prev"
                                ENDM


                                ;; ======================================================================== ;;
                                ;;  ROM.End                                                                 ;;
                                ;;  Closes any open ROM segment, reports usage statistics, and finalizes    ;;
                                ;;  the program.                                                            ;;
                                ;;                                                                          ;;
                                ;;  This macro must be called at the very end of the program.               ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      None.                                                               ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      _rom.error  -1 on failure.                                          ;;
                                ;; ======================================================================== ;;
                                MACRO   ROM.End
                                ;
                                    LISTING "code"

                                                __rom_reset_error
                                                __rom_assert_setup("End")

                                        IF (_rom.error = _rom.null)
                                                __rom_close_seg(_rom.open)

                                            ; The legacy map does not support usage statistics
                                            IF (_rom.map > 0)
                                                __rom_calculate_stats
                                            ENDI
                                        ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  ROM.OutputRomStats                                                      ;;
                                ;;  Outputs ROM usage statistics to STDOUT and to the listing file.         ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      None.                                                               ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      ROM usage statistics.                                               ;;
                                ;; ======================================================================== ;;
                                MACRO   ROM.OutputRomStats
                                ;
                                    LISTING "code"

                                _rom.hdr_len    QSET    55
                                _rom.fld_ttl    QSET    15
                                _rom.fld_mem    QSET    7
                                _rom.fld_bnk    QSET    3
                                _rom.fld_siz    QSET    4
                                _rom.fld_avl    QSET    8
                                _rom.scale      QSET    1024

                                      IF (_rom.map > 0)

                                                ; Draw header
                                                SMSG ""
                                                SMSG $("ROM USAGE (MAP #", $#(_rom.map), "):")
                                                SMSG    $("    ", __rom_stats_draw_line(double, _rom.hdr_len))
                                                SMSG    $("    ", "    Segment        Size       Used      Available")
                                                SMSG    $("    ", __rom_stats_draw_line(double, _rom.hdr_len))

                                _rom.idx        QSET    0
                                _rom.cnt        QSET    .ROM.Segments[_rom.static]

                                        ; Static segments
                                        REPEAT (_rom.cnt)
                                _rom.segnum     QSET    _rom.segidx[_rom.idx]

                                _rom.size       QSET    .ROM.SegSize[_rom.segnum]
                                _rom.used       QSET    .ROM.SegUsed[_rom.segnum]
                                _rom.avlb       QSET    .ROM.SegAvlb[_rom.segnum]

                                _rom.size       QSET    __rom_stats_scale(_rom.size, _rom.scale)    ; Scaled to 1K

                                                ; Static ROM segment stats
                                                SMSG    $("    ", "Static Seg #", $#(_rom.idx), "     ", __rom_stats_pad_left($#(_rom.size), _rom.fld_siz), "K     ", __rom_stats_pad_left($#(_rom.used), _rom.fld_mem), "  ", __rom_stats_pad_left($#(_rom.avlb), _rom.fld_avl), " words")

                                _rom.idx        QSET    (_rom.idx + 1)
                                        ENDR

                                _rom.cnt        QSET    (_rom.segs - _rom.idx)

                                        ; Dynamic segments
                                        REPEAT (_rom.cnt)
                                _rom.segnum     QSET    _rom.segidx[_rom.idx]

                                                ; Dynamic ROM segment header
                                                SMSG    $("    ", __rom_stats_draw_line(single, _rom.hdr_len))
                                                SMSG    $("    ", "Dynamic Seg #", $#(_rom.idx), ":")

                                _rom.bidx       QSET    0
                                _rom.bcnt       QSET    _rom.bnkcnt[_rom.idx]

                                            ; Dynamic segment banks
                                            REPEAT (_rom.bcnt)

                                _rom.segnum     QSET    (_rom.segidx[_rom.idx] + _rom.bidx)

                                _rom.size       QSET    .ROM.SegSize[_rom.segnum]
                                _rom.used       QSET    .ROM.SegUsed[_rom.segnum]
                                _rom.avlb       QSET    .ROM.SegAvlb[_rom.segnum]

                                _rom.size       QSET    __rom_stats_scale(_rom.size, _rom.scale)    ; Scaled to 1K

                                                SMSG    $("    ", "       Bank #", __rom_stats_pad_right($#(_rom.bidx), _rom.fld_bnk), "  ", __rom_stats_pad_left($#(_rom.size), _rom.fld_siz), "K     ", __rom_stats_pad_left($#(_rom.used), _rom.fld_mem), "  ", __rom_stats_pad_left($#(_rom.avlb), _rom.fld_avl), " words")

                                _rom.bidx       QSET    (_rom.bidx + 1)
                                            ENDR

                                _rom.idx        QSET    (_rom.idx + 1)
                                        ENDR

                                _rom.size       QSET    __rom_stats_scale(.ROM.Size, _rom.scale)    ; Scaled to 1K

                                                ; Draw footer
                                                SMSG    $("    ", __rom_stats_draw_line(double, _rom.hdr_len))
                                                SMSG    $("    ", __rom_stats_pad_left("TOTAL:", _rom.fld_ttl), "   ", __rom_stats_pad_left($#(_rom.size), _rom.fld_siz), "K     ", __rom_stats_pad_left($#(.ROM.Used), _rom.fld_mem), "  ", __rom_stats_pad_left($#(.ROM.Available), _rom.fld_avl), " words")
                                                SMSG    $("    ", __rom_stats_draw_line(double, _rom.hdr_len))
                                                SMSG ""

                                      ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  EOF: romseg-bs.mac                                                      ;;
                                ;; ======================================================================== ;;

                                ;	ROM.Setup intybasic_map
                                	;
                                                ; Open segment
0x5000                                          ORG     _rom.cpos
5000   000D 0050                                BIDECLE _ZERO           ; MOB picture base
5002   000D 0050                                BIDECLE _ZERO           ; Process table
5004   0040 0050                                BIDECLE _MAIN           ; Program start
5006   000D 0050                                BIDECLE _ZERO           ; Background base image
5008   000F 0050                                BIDECLE _ONES           ; GRAM
500A   002D 0050                                BIDECLE _TITLE          ; Cartridge title and date
500C   03C0                                     DECLE   $03C0           ; No ECS title, jump to code after title,
500D   0000                     _ZERO:          DECLE   $0000           ; Border control
500E   0000                                     DECLE   $0000           ; 0 = color stack, 1 = f/b mode
500F   0001 0001                _ONES:          DECLE   $0001, $0001    ; Initial color stack 0 and 1: Blue
5011   0001 0001                                DECLE   $0001, $0001    ; Initial color stack 2 and 3: Blue
5013   0001                                     DECLE   $0001           ; Initial border color: Blue

                                	; This macro will 'eat' SRCFILE directives if the assembler doesn't support the directive.
                                	IF ( DEFINED __FEATURE.SRCFILE ) = 0
                                	    MACRO SRCFILE x, y
                                	    ; macro must be non-empty, but a comment works fine.
                                	    ENDM
                                	ENDI

5014   02BC 0200                CLRSCR:	MVII #$200,R4		; Used also for CLS
5016   0244 0346                	MVO R4,_screen		; Set up starting screen position for PRINT
5018   02B9 00F0                	MVII #$F0,R1
0x501A                          FILLZERO:
501A   01C0                     	CLRR R0
0x501B                          MEMSET:
501B   007D                     	SARC R1,2
501C   020A 0002                	BNOV $+4
501E   0260                     	MVO@ R0,R4
501F   0260                     	MVO@ R0,R4
5020   0209 0001                	BNC $+3
5022   0260                     	MVO@ R0,R4
5023   0204 0005                	BEQ $+7
5025   0260                     	MVO@ R0,R4
5026   0260                     	MVO@ R0,R4
5027   0260                     	MVO@ R0,R4
5028   0260                     	MVO@ R0,R4
5029   0011                     	DECR R1
502A   022C 0006                	BNE $-5
502C   00AF                     	JR R5

                                	;
                                	; Title, Intellivision EXEC will jump over it and start
                                	; execution directly in _MAIN
                                	;
                                	; Note mark is for automatic replacement by IntyBASIC
0x502D                          _TITLE:
502D   007C 0049 006E 0074      	BYTE 124,'IntyBASIC program',0
5031   0079 0042 0041 0053 0049 0043 0020 0070 
5039   0072 006F 0067 0072 0061 006D 0000 
                                        
                                	;
                                	; Main program
                                	;
0x5040                          _MAIN:
5040   0003                     	DIS			; Disable interrupts
5041   02BE 02F0                	MVII #STACK,R6

                                	;
                                	; Clean memory
                                	;
5043   0004 0150 0014           	CALL CLRSCR		; Clean up screen, right here to avoid brief
                                				; screen display of title in Sears Intellivision.
5046   02B9 000E                	MVII #$00e,R1		; 14 of sound (ECS)
5048   02BC 00F0                	MVII #$0f0,R4		; ECS PSG
504A   0004 0150 001A           	CALL FILLZERO
504D   02B9 00FE                	MVII #$0fe,R1		; 240 words of 8 bits plus 14 of sound
504F   02BC 0100                	MVII #$100,R4		; 8-bit scratch RAM
5051   0004 0150 001A           	CALL FILLZERO

                                	; Seed random generator using 16 bit RAM (not cleared by EXEC)
5054   01C0                     	CLRR R0
5055   02BC 02F0                	MVII #$02F0,R4
5057   02B9 0044                	MVII #$0110/4,R1	; Includes phantom memory for extra randomness
0x5059                          _MAIN4:				; This loop is courtesy of GroovyBee
5059   02E0                     	ADD@ R4,R0
505A   02E0                     	ADD@ R4,R0
505B   02E0                     	ADD@ R4,R0
505C   02E0                     	ADD@ R4,R0
505D   0011                     	DECR R1
505E   022C 0006                	BNE _MAIN4
5060   0240 0104                	MVO R0,_rand

5062   02B9 0058                	MVII #$058,R1		; 88 words of 16 bits
5064   02BC 0308                	MVII #$308,R4		; 16-bit scratch RAM
5066   0004 0150 001A           	CALL FILLZERO

5069   02B9 0058                	MVII #$058,R1		; 88 words of 16 bits
506B   02BC 0308                	MVII #$308,R4		; 16-bit scratch RAM
506D   0004 0150 001A           	CALL FILLZERO

                                    IF intybasic_jlp
5070   02B9 1F40                	MVII #$1F40,R1		; Words of 16 bits
5072   02BC 8040                	MVII #$8040,R4		; 16-bit scratch RAM
5074   0004 0150 001A           	CALL FILLZERO
                                    ENDI
                                    IF intybasic_cc3
                                	MVII #$1F40,R1		; Words of 16 bits
                                	MVII #intybasic_cc3*256+$40,R4	; 16-bit scratch RAM
                                	CALL FILLZERO
                                    ENDI

                                	; PAL/NTSC detect
5077   0004 01F4 01F6           	CALL _set_isr
507A   507D                     	DECLE _pal1
507B   0002                     	EIS
507C   0017                     	DECR PC			; This is a kind of HALT instruction

                                	; First interrupt may come at a weird time on Tutorvision, or
                                	; if other startup timing changes.
507D   033E 0008                _pal1:	SUBI #8,R6		; Drop interrupt stack.
507F   0004 01F4 01F6           	CALL _set_isr
5082   5084                     	DECLE _pal2
5083   0017                     	DECR PC

                                	; Second interrupt is safe for initializing MOBs.
                                	; We will know the screen is off after this one fires.
5084   033E 0008                _pal2:	SUBI #8,R6		; Drop interrupt stack.
5086   0004 01F4 01F6           	CALL _set_isr
5089   509B                     	DECLE _pal3
                                	; clear MOBs
508A   01C0                     	CLRR R0
508B   01E4                     	CLRR R4
508C   02BA 0018                	MVII #$18,R2
0x508E                          _pal2_lp:
508E   0260                     	MVO@ R0,R4
508F   0012                     	DECR R2
5090   022C 0003                	BNE _pal2_lp
5092   0240 0030                	MVO R0,$30		; Reset horizontal delay register
5094   0240 0031                	MVO R0,$31		; Reset vertical delay register

5096   02BA FBB4                	MVII #-1100,R2		; PAL/NTSC threshold
0x5098                          _pal2_cnt:
5098   000A                     	INCR R2
5099   0220 0002                	B _pal2_cnt

                                	; The final count in R2 will either be negative or positive.
                                	; If R2 is still -ve, NTSC; else PAL.
509B   033E 0008                _pal3:	SUBI #8,R6		; Drop interrupt stack.
509D   0052                     	RLC R2,1
509E   0052                     	RLC R2,1
509F   03BA 0001                	ANDI #1,R2		; 1 = NTSC, 0 = PAL

50A1   02B9 0055                	MVII #$55,R1
50A3   0241 4040                	MVO R1,$4040
50A5   02B9 00AA                	MVII #$AA,R1
50A7   0241 4041                	MVO R1,$4041
50A9   0281 4040                	MVI $4040,R1
50AB   0379 0055                	CMPI #$55,R1
50AD   020C 0008                	BNE _ecs1
50AF   0281 4041                	MVI $4041,R1
50B1   0379 00AA                	CMPI #$AA,R1
50B3   020C 0002                	BNE _ecs1
50B5   02FA 0002                	ADDI #2,R2		; ECS detected flag
0x50B7                          _ecs1:
50B7   0242 0103                	MVO R2,_ntsc

50B9   0004 01F4 01F6           	CALL _set_isr
50BC   F5FD                     	DECLE _int_vector

50BD   0004 0150 0014           	CALL CLRSCR		; Because _screen was reset to zero
50C0   0004 01F4 01E2           	CALL _wait
50C3   0004 01F4 039E           	CALL _init_music
50C6   02B8 0002                	MVII #2,R0		; Color Stack mode
50C8   0240 0109                	MVO R0,_mode_select
50CA   02B8 0038                	MVII #$038,R0
50CC   0240 01F8                	MVO R0,$01F8		; Configures sound
50CE   0240 00F8                	MVO R0,$00F8		; Configures sound (ECS)
50D0   0004 01F4 01E2           	CALL IV_INIT_and_wait	; Setup Intellivoice

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- James Pujals (DZ-Jay), 2014                              *;
                                ;* ======================================================================== *;

                                ; Modified by Oscar Toledo G. (nanochess), Aug/06/2015
                                ; * Tested all multiplications with automated test.
                                ; * Accelerated multiplication by 7,14,15,28,31,60,62,63,112,120,124
                                ; * Solved bug in multiplication by 23,39,46,47,55,71,78,79,87,92,93,94,95,103,110,111,119
                                ; * Improved sequence of instructions to be more interruptible.

                                ;; ======================================================================== ;;
                                ;;  MULT reg, tmp, const                                                    ;;
                                ;;  Multiplies "reg" by constant "const" and using "tmp" for temporary      ;;
                                ;;  calculations.  The result is placed in "reg."  The multiplication is    ;;
                                ;;  performed by an optimal combination of shifts, additions, and           ;;
                                ;;  subtractions.                                                           ;;
                                ;;                                                                          ;;
                                ;;  NOTE:   The resulting contents of the "tmp" are undefined.              ;;
                                ;;                                                                          ;;
                                ;;  ARGUMENTS                                                               ;;
                                ;;      reg         A register containing the multiplicand.                 ;;
                                ;;      tmp         A register for temporary calculations.                  ;;
                                ;;      const       The constant multiplier.                                ;;
                                ;;                                                                          ;;
                                ;;  OUTPUT                                                                  ;;
                                ;;      reg         Output value.                                           ;;
                                ;;      tmp         Trashed.                                                ;;
                                ;;      .ERR.Failed True if operation failed.                               ;;
                                ;; ======================================================================== ;;
                                MACRO   MULT reg, tmp, const
                                ;
                                    LISTING "code"

                                _mul.const      QSET    %const%
                                _mul.done       QSET    0

                                        IF (%const% > $7F)
                                _mul.const      QSET    (_mul.const SHR 1)
                                                SLL     %reg%,  1
                                        ENDI

                                        ; Multiply by $00 (0)
                                        IF (_mul.const = $00)
                                _mul.done       QSET    -1
                                                CLRR    %reg%
                                        ENDI

                                        ; Multiply by $01 (1)
                                        IF (_mul.const = $01)
                                _mul.done       QSET    -1
                                                ; Nothing to do
                                        ENDI

                                        ; Multiply by $02 (2)
                                        IF (_mul.const = $02)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                        ENDI

                                        ; Multiply by $03 (3)
                                        IF (_mul.const = $03)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $04 (4)
                                        IF (_mul.const = $04)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                        ENDI

                                        ; Multiply by $05 (5)
                                        IF (_mul.const = $05)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $06 (6)
                                        IF (_mul.const = $06)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $07 (7)
                                        IF (_mul.const = $07)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $08 (8)
                                        IF (_mul.const = $08)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                        ENDI

                                        ; Multiply by $09 (9)
                                        IF (_mul.const = $09)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0A (10)
                                        IF (_mul.const = $0A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0B (11)
                                        IF (_mul.const = $0B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0C (12)
                                        IF (_mul.const = $0C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0D (13)
                                        IF (_mul.const = $0D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0E (14)
                                        IF (_mul.const = $0E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $0F (15)
                                        IF (_mul.const = $0F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $10 (16)
                                        IF (_mul.const = $10)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                        ENDI

                                        ; Multiply by $11 (17)
                                        IF (_mul.const = $11)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $12 (18)
                                        IF (_mul.const = $12)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $13 (19)
                                        IF (_mul.const = $13)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $14 (20)
                                        IF (_mul.const = $14)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $15 (21)
                                        IF (_mul.const = $15)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $16 (22)
                                        IF (_mul.const = $16)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $17 (23)
                                        IF (_mul.const = $17)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $18 (24)
                                        IF (_mul.const = $18)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $19 (25)
                                        IF (_mul.const = $19)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1A (26)
                                        IF (_mul.const = $1A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1B (27)
                                        IF (_mul.const = $1B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1C (28)
                                        IF (_mul.const = $1C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1D (29)
                                        IF (_mul.const = $1D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1E (30)
                                        IF (_mul.const = $1E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $1F (31)
                                        IF (_mul.const = $1F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $20 (32)
                                        IF (_mul.const = $20)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                        ENDI

                                        ; Multiply by $21 (33)
                                        IF (_mul.const = $21)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $22 (34)
                                        IF (_mul.const = $22)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $23 (35)
                                        IF (_mul.const = $23)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $24 (36)
                                        IF (_mul.const = $24)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $25 (37)
                                        IF (_mul.const = $25)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $26 (38)
                                        IF (_mul.const = $26)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $27 (39)
                                        IF (_mul.const = $27)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $28 (40)
                                        IF (_mul.const = $28)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $29 (41)
                                        IF (_mul.const = $29)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2A (42)
                                        IF (_mul.const = $2A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2B (43)
                                        IF (_mul.const = $2B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2C (44)
                                        IF (_mul.const = $2C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2D (45)
                                        IF (_mul.const = $2D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2E (46)
                                        IF (_mul.const = $2E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $2F (47)
                                        IF (_mul.const = $2F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $30 (48)
                                        IF (_mul.const = $30)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $31 (49)
                                        IF (_mul.const = $31)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $32 (50)
                                        IF (_mul.const = $32)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $33 (51)
                                        IF (_mul.const = $33)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $34 (52)
                                        IF (_mul.const = $34)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $35 (53)
                                        IF (_mul.const = $35)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $36 (54)
                                        IF (_mul.const = $36)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $37 (55)
                                        IF (_mul.const = $37)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SLL	%reg%,	1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $38 (56)
                                        IF (_mul.const = $38)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $39 (57)
                                        IF (_mul.const = $39)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3A (58)
                                        IF (_mul.const = $3A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3B (59)
                                        IF (_mul.const = $3B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3C (60)
                                        IF (_mul.const = $3C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3D (61)
                                        IF (_mul.const = $3D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3E (62)
                                        IF (_mul.const = $3E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $3F (63)
                                        IF (_mul.const = $3F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $40 (64)
                                        IF (_mul.const = $40)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                        ENDI

                                        ; Multiply by $41 (65)
                                        IF (_mul.const = $41)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $42 (66)
                                        IF (_mul.const = $42)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $43 (67)
                                        IF (_mul.const = $43)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $44 (68)
                                        IF (_mul.const = $44)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $45 (69)
                                        IF (_mul.const = $45)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $46 (70)
                                        IF (_mul.const = $46)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $47 (71)
                                        IF (_mul.const = $47)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $48 (72)
                                        IF (_mul.const = $48)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $49 (73)
                                        IF (_mul.const = $49)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4A (74)
                                        IF (_mul.const = $4A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4B (75)
                                        IF (_mul.const = $4B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4C (76)
                                        IF (_mul.const = $4C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4D (77)
                                        IF (_mul.const = $4D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $4E (78)
                                        IF (_mul.const = $4E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $4F (79)
                                        IF (_mul.const = $4F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $50 (80)
                                        IF (_mul.const = $50)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $51 (81)
                                        IF (_mul.const = $51)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $52 (82)
                                        IF (_mul.const = $52)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $53 (83)
                                        IF (_mul.const = $53)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $54 (84)
                                        IF (_mul.const = $54)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $55 (85)
                                        IF (_mul.const = $55)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $56 (86)
                                        IF (_mul.const = $56)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $57 (87)
                                        IF (_mul.const = $57)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR    %reg%,	%tmp%
                                                SLL     %reg%,  2
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $58 (88)
                                        IF (_mul.const = $58)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $59 (89)
                                        IF (_mul.const = $59)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $5A (90)
                                        IF (_mul.const = $5A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $5B (91)
                                        IF (_mul.const = $5B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $5C (92)
                                        IF (_mul.const = $5C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $5D (93)
                                        IF (_mul.const = $5D)
                                _mul.done       QSET    -1
                                		MOVR	%reg%,	%tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $5E (94)
                                        IF (_mul.const = $5E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $5F (95)
                                        IF (_mul.const = $5F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                ADDR	%reg%,	%reg%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $60 (96)
                                        IF (_mul.const = $60)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $61 (97)
                                        IF (_mul.const = $61)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $62 (98)
                                        IF (_mul.const = $62)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $63 (99)
                                        IF (_mul.const = $63)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $64 (100)
                                        IF (_mul.const = $64)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $65 (101)
                                        IF (_mul.const = $65)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $66 (102)
                                        IF (_mul.const = $66)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $67 (103)
                                        IF (_mul.const = $67)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $68 (104)
                                        IF (_mul.const = $68)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $69 (105)
                                        IF (_mul.const = $69)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6A (106)
                                        IF (_mul.const = $6A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6B (107)
                                        IF (_mul.const = $6B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6C (108)
                                        IF (_mul.const = $6C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6D (109)
                                        IF (_mul.const = $6D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $6E (110)
                                        IF (_mul.const = $6E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $6F (111)
                                        IF (_mul.const = $6F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                		SUBR	%tmp%,	%reg%
                                        ENDI

                                        ; Multiply by $70 (112)
                                        IF (_mul.const = $70)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $71 (113)
                                        IF (_mul.const = $71)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $72 (114)
                                        IF (_mul.const = $72)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $73 (115)
                                        IF (_mul.const = $73)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $74 (116)
                                        IF (_mul.const = $74)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $75 (117)
                                        IF (_mul.const = $75)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $76 (118)
                                        IF (_mul.const = $76)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $77 (119)
                                        IF (_mul.const = $77)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $78 (120)
                                        IF (_mul.const = $78)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $79 (121)
                                        IF (_mul.const = $79)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7A (122)
                                        IF (_mul.const = $7A)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7B (123)
                                        IF (_mul.const = $7B)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  1
                                                ADDR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7C (124)
                                        IF (_mul.const = $7C)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  2
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7D (125)
                                        IF (_mul.const = $7D)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SUBR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                		ADDR	%reg%,	%reg%
                                                ADDR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7E (126)
                                        IF (_mul.const = $7E)
                                _mul.done       QSET    -1
                                                SLL     %reg%,  1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        ; Multiply by $7F (127)
                                        IF (_mul.const = $7F)
                                _mul.done       QSET    -1
                                                MOVR    %reg%,  %tmp%
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  2
                                                SLL     %reg%,  1
                                                SUBR    %tmp%,  %reg%
                                        ENDI

                                        IF  (_mul.done = 0)
                                            ERR $("Invalid multiplication constant \'%const%\', must be between 0 and ", $#($7F), ".")
                                        ENDI

                                    LISTING "prev"
                                ENDM

                                ;; ======================================================================== ;;
                                ;;  EOF: pm:mac:lang:mult                                                   ;;
                                ;; ======================================================================== ;;

                                	; IntyBASIC compiler v1.5.0 Dec/10/2024

50D3   02BD 8040                	MVII #SYSTEM2,R5
50D5   02B9 0001                	MVII #_SYSTEM2-SYSTEM2-1,R1
50D7   01C0                     	CLRR R0
50D8   0268                     	MVO@ R0,R5
50D9   0011                     	DECR R1
50DA   0223 0003                	BPL $-2

                                	;FILE samples/pumpkin_master.bas
                                	;[1] 	'
                                	SRCFILE "samples/pumpkin_master.bas",1
                                	;[2] 	' Pumpkin master
                                	SRCFILE "samples/pumpkin_master.bas",2
                                	;[3] 	'
                                	SRCFILE "samples/pumpkin_master.bas",3
                                	;[4] 	' Demo for IntyBASIC
                                	SRCFILE "samples/pumpkin_master.bas",4
                                	;[5] 	'
                                	SRCFILE "samples/pumpkin_master.bas",5
                                	;[6] 	' by Oscar Toledo G. (nanochess)
                                	SRCFILE "samples/pumpkin_master.bas",6
                                	;[7] 	' http://nanochess.org
                                	SRCFILE "samples/pumpkin_master.bas",7
                                	;[8] 	'
                                	SRCFILE "samples/pumpkin_master.bas",8
                                	;[9] 	' Creation date: Oct/28/2018.
                                	SRCFILE "samples/pumpkin_master.bas",9
                                	;[10] 	' Revision date: Oct/29/2018. Added the pumpkin master and story.
                                	SRCFILE "samples/pumpkin_master.bas",10
                                	;[11] 	' Revision date: Oct/31/2018. Story can be accelerated pressing button.
                                	SRCFILE "samples/pumpkin_master.bas",11
                                	;[12] 	'                             Added 3 more waves.
                                	SRCFILE "samples/pumpkin_master.bas",12
                                	;[13] 	'
                                	SRCFILE "samples/pumpkin_master.bas",13
                                	;[14] 
                                	SRCFILE "samples/pumpkin_master.bas",14
                                	;[15] 	ON FRAME GOSUB play_sound
                                	SRCFILE "samples/pumpkin_master.bas",15
                                	;[16] 
                                	SRCFILE "samples/pumpkin_master.bas",16
                                	;[17] 	' Number of pumpkins at same time, maximum 6 because SPRITE 6 is bullet
                                	SRCFILE "samples/pumpkin_master.bas",17
                                	;[18] 	' and SPRITE 7 is player
                                	SRCFILE "samples/pumpkin_master.bas",18
                                	;[19] 	CONST PUMPKINS = 6
                                	SRCFILE "samples/pumpkin_master.bas",19
0x6                             const_PUMPKINS:	EQU 6
                                	;[20] 
                                	SRCFILE "samples/pumpkin_master.bas",20
                                	;[21] 	CONST VOLUME_TITLE = 12	' Volume of music during title
                                	SRCFILE "samples/pumpkin_master.bas",21
0xC                             const_VOLUME_TITLE:	EQU 12
                                	;[22] 	CONST VOLUME_GAME = 10		' Volume of music inside the game
                                	SRCFILE "samples/pumpkin_master.bas",22
0xA                             const_VOLUME_GAME:	EQU 10
                                	;[23] 	CONST VOLUME_BOSS = 14		' Volume of music during boss
                                	SRCFILE "samples/pumpkin_master.bas",23
0xE                             const_VOLUME_BOSS:	EQU 14
                                	;[24] 
                                	SRCFILE "samples/pumpkin_master.bas",24
                                	;[25] 	UNSIGNED #score, #record
                                	SRCFILE "samples/pumpkin_master.bas",25
                                	;[26] 
                                	SRCFILE "samples/pumpkin_master.bas",26
                                	;[27] 	DIM x(PUMPKINS)		' X-coordinate of pumpkin or boss bullet
                                	SRCFILE "samples/pumpkin_master.bas",27
                                	;[28] 	DIM y(PUMPKINS)		' Y-coordinate of pumpkin or boss bullet
                                	SRCFILE "samples/pumpkin_master.bas",28
                                	;[29] 	DIM s(PUMPKINS)		' State of pumpkin (in current wave)
                                	SRCFILE "samples/pumpkin_master.bas",29
                                	;[30] 	DIM z(PUMPKINS)		' Timing of pumpkin explosion
                                	SRCFILE "samples/pumpkin_master.bas",30
                                	;[31] 	DIM b(PUMPKINS)		' Pumpkin bullet
                                	SRCFILE "samples/pumpkin_master.bas",31
                                	;[32] 
                                	SRCFILE "samples/pumpkin_master.bas",32
                                	;[33] 	#record = 25		' Setup a default record
                                	SRCFILE "samples/pumpkin_master.bas",33
50DC   02B8 0019                	MVII #25,R0
50DE   0240 8040                	MVO R0,var_&RECORD
                                	;[34] 
                                	SRCFILE "samples/pumpkin_master.bas",34
                                	;[35] 	FOR c = 0 TO 60
                                	SRCFILE "samples/pumpkin_master.bas",35
50E0   01C0                     	CLRR R0
50E1   0240 012C                	MVO R0,var_C
0x50E3                          T1:
                                	;[36] 		WAIT
                                	SRCFILE "samples/pumpkin_master.bas",36
50E3   0004 01F4 01E2           	CALL _wait
                                	;[37] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",37
50E6   0280 012C                	MVI var_C,R0
50E8   0008                     	INCR R0
50E9   0240 012C                	MVO R0,var_C
50EB   0378 003C                	CMPI #60,R0
50ED   0226 000B                	BLE T1
                                	;[38] 
                                	SRCFILE "samples/pumpkin_master.bas",38
                                	;[39] 	'
                                	SRCFILE "samples/pumpkin_master.bas",39
                                	;[40] 	' For the good guys :)
                                	SRCFILE "samples/pumpkin_master.bas",40
                                	;[41] 	'
                                	SRCFILE "samples/pumpkin_master.bas",41
                                	;[42] 	PRINT AT 61 COLOR 5,"For all my friends"
                                	SRCFILE "samples/pumpkin_master.bas",42
50EF   02B8 023D                	MVII #573,R0
50F1   0240 0346                	MVO R0,_screen
50F3   02B8 0005                	MVII #5,R0
50F5   0240 0347                	MVO R0,_color
50F7   0284 0346                	MVI _screen,R4
50F9   02B8 0130                	MVII #304,R0
50FB   03C0 0347                	XOR _color,R0
50FD   0260                     	MVO@ R0,R4
50FE   03F8 0348                	XORI #840,R0
5100   0260                     	MVO@ R0,R4
5101   03F8 00E8                	XORI #232,R0
5103   0260                     	MVO@ R0,R4
5104   03F8 0290                	XORI #656,R0
5106   0260                     	MVO@ R0,R4
5107   03F8 0208                	XORI #520,R0
5109   0260                     	MVO@ R0,R4
510A   03F8 0068                	XORI #104,R0
510C   0260                     	MVO@ R0,R4
510D   0260                     	MVO@ R0,R4
510E   03F8 0260                	XORI #608,R0
5110   0260                     	MVO@ R0,R4
5111   03F8 0268                	XORI #616,R0
5113   0260                     	MVO@ R0,R4
5114   03F8 00A0                	XORI #160,R0
5116   0260                     	MVO@ R0,R4
5117   03F8 02C8                	XORI #712,R0
5119   0260                     	MVO@ R0,R4
511A   03F8 0230                	XORI #560,R0
511C   0260                     	MVO@ R0,R4
511D   03F8 00A0                	XORI #160,R0
511F   0260                     	MVO@ R0,R4
5120   03F8 00D8                	XORI #216,R0
5122   0260                     	MVO@ R0,R4
5123   03F8 0060                	XORI #96,R0
5125   0260                     	MVO@ R0,R4
5126   03F8 0058                	XORI #88,R0
5128   0260                     	MVO@ R0,R4
5129   03F8 0050                	XORI #80,R0
512B   0260                     	MVO@ R0,R4
512C   03F8 00B8                	XORI #184,R0
512E   0260                     	MVO@ R0,R4
512F   0244 0346                	MVO R4,_screen
                                	;[43] 	PRINT AT 81 COLOR 5,"   at Atariage!"
                                	SRCFILE "samples/pumpkin_master.bas",43
5131   02B8 0251                	MVII #593,R0
5133   0240 0346                	MVO R0,_screen
5135   02B8 0005                	MVII #5,R0
5137   0240 0347                	MVO R0,_color
5139   0284 0346                	MVI _screen,R4
513B   0260                     	MVO@ R0,R4
513C   0260                     	MVO@ R0,R4
513D   0260                     	MVO@ R0,R4
513E   03F8 0208                	XORI #520,R0
5140   0260                     	MVO@ R0,R4
5141   03F8 00A8                	XORI #168,R0
5143   0260                     	MVO@ R0,R4
5144   03F8 02A0                	XORI #672,R0
5146   0260                     	MVO@ R0,R4
5147   03F8 0108                	XORI #264,R0
5149   0260                     	MVO@ R0,R4
514A   03F8 03A8                	XORI #936,R0
514C   0260                     	MVO@ R0,R4
514D   03F8 00A8                	XORI #168,R0
514F   0260                     	MVO@ R0,R4
5150   03F8 0098                	XORI #152,R0
5152   0260                     	MVO@ R0,R4
5153   03F8 00D8                	XORI #216,R0
5155   0260                     	MVO@ R0,R4
5156   03F8 0040                	XORI #64,R0
5158   0260                     	MVO@ R0,R4
5159   03F8 0030                	XORI #48,R0
515B   0260                     	MVO@ R0,R4
515C   03F8 0010                	XORI #16,R0
515E   0260                     	MVO@ R0,R4
515F   03F8 0220                	XORI #544,R0
5161   0260                     	MVO@ R0,R4
5162   0244 0346                	MVO R4,_screen
                                	;[44] 	GOSUB wait_and_clean
                                	SRCFILE "samples/pumpkin_master.bas",44
5164   0004 015C 02AF           	CALL label_WAIT_AND_CLEAN
                                	;[45] 
                                	SRCFILE "samples/pumpkin_master.bas",45
                                	;[46] 	PRINT AT 102 COLOR 5,"Is it already"
                                	SRCFILE "samples/pumpkin_master.bas",46
5167   02B8 0266                	MVII #614,R0
5169   0240 0346                	MVO R0,_screen
516B   02B8 0005                	MVII #5,R0
516D   0240 0347                	MVO R0,_color
516F   0284 0346                	MVI _screen,R4
5171   02B8 0148                	MVII #328,R0
5173   03C0 0347                	XOR _color,R0
5175   0260                     	MVO@ R0,R4
5176   03F8 03D0                	XORI #976,R0
5178   0260                     	MVO@ R0,R4
5179   03F8 0298                	XORI #664,R0
517B   0260                     	MVO@ R0,R4
517C   03F8 0248                	XORI #584,R0
517E   0260                     	MVO@ R0,R4
517F   03F8 00E8                	XORI #232,R0
5181   0260                     	MVO@ R0,R4
5182   03F8 02A0                	XORI #672,R0
5184   0260                     	MVO@ R0,R4
5185   03F8 0208                	XORI #520,R0
5187   0260                     	MVO@ R0,R4
5188   03F8 0068                	XORI #104,R0
518A   0260                     	MVO@ R0,R4
518B   03F8 00F0                	XORI #240,R0
518D   0260                     	MVO@ R0,R4
518E   03F8 00B8                	XORI #184,R0
5190   0260                     	MVO@ R0,R4
5191   03F8 0020                	XORI #32,R0
5193   0260                     	MVO@ R0,R4
5194   03F8 0028                	XORI #40,R0
5196   0260                     	MVO@ R0,R4
5197   03F8 00E8                	XORI #232,R0
5199   0260                     	MVO@ R0,R4
519A   0244 0346                	MVO R4,_screen
                                	;[47] 	PRINT AT 122 COLOR 2,"Halloween 2018?"
                                	SRCFILE "samples/pumpkin_master.bas",47
519C   02B8 027A                	MVII #634,R0
519E   0240 0346                	MVO R0,_screen
51A0   02B8 0002                	MVII #2,R0
51A2   0240 0347                	MVO R0,_color
51A4   0284 0346                	MVI _screen,R4
51A6   02B8 0140                	MVII #320,R0
51A8   03C0 0347                	XOR _color,R0
51AA   0260                     	MVO@ R0,R4
51AB   03F8 0348                	XORI #840,R0
51AD   0260                     	MVO@ R0,R4
51AE   03F8 0068                	XORI #104,R0
51B0   0260                     	MVO@ R0,R4
51B1   0260                     	MVO@ R0,R4
51B2   03F8 0018                	XORI #24,R0
51B4   0260                     	MVO@ R0,R4
51B5   03F8 00C0                	XORI #192,R0
51B7   0260                     	MVO@ R0,R4
51B8   03F8 0090                	XORI #144,R0
51BA   0260                     	MVO@ R0,R4
51BB   0260                     	MVO@ R0,R4
51BC   03F8 0058                	XORI #88,R0
51BE   0260                     	MVO@ R0,R4
51BF   03F8 0270                	XORI #624,R0
51C1   0260                     	MVO@ R0,R4
51C2   03F8 0090                	XORI #144,R0
51C4   0260                     	MVO@ R0,R4
51C5   03F8 0010                	XORI #16,R0
51C7   0260                     	MVO@ R0,R4
51C8   03F8 0008                	XORI #8,R0
51CA   0260                     	MVO@ R0,R4
51CB   03F8 0048                	XORI #72,R0
51CD   0260                     	MVO@ R0,R4
51CE   03F8 0038                	XORI #56,R0
51D0   0260                     	MVO@ R0,R4
51D1   0244 0346                	MVO R4,_screen
                                	;[48] 	PRINT AT 216 COLOR 3,";)"
                                	SRCFILE "samples/pumpkin_master.bas",48
51D3   02B8 02D8                	MVII #728,R0
51D5   0240 0346                	MVO R0,_screen
51D7   02B8 0003                	MVII #3,R0
51D9   0240 0347                	MVO R0,_color
51DB   0284 0346                	MVI _screen,R4
51DD   02B8 00D8                	MVII #216,R0
51DF   03C0 0347                	XOR _color,R0
51E1   0260                     	MVO@ R0,R4
51E2   03F8 0090                	XORI #144,R0
51E4   0260                     	MVO@ R0,R4
51E5   0244 0346                	MVO R4,_screen
                                	;[49] 	GOSUB wait_and_clean
                                	SRCFILE "samples/pumpkin_master.bas",49
51E7   0004 015C 02AF           	CALL label_WAIT_AND_CLEAN
                                	;[50] 
                                	SRCFILE "samples/pumpkin_master.bas",50
                                	;[51] 	'
                                	SRCFILE "samples/pumpkin_master.bas",51
                                	;[52] 	' Show my logo
                                	SRCFILE "samples/pumpkin_master.bas",52
                                	;[53] 	'
                                	SRCFILE "samples/pumpkin_master.bas",53
                                	;[54] 	CLS
                                	SRCFILE "samples/pumpkin_master.bas",54
51EA   0004 0150 0014           	CALL CLRSCR
                                	;[55] 	MODE 1
                                	SRCFILE "samples/pumpkin_master.bas",55
51ED   02B8 0003                	MVII #3,R0
51EF   0240 0109                	MVO R0,_mode_select
                                	;[56] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",56
51F1   0004 01F4 01E2           	CALL _wait
                                	;[57] 
                                	SRCFILE "samples/pumpkin_master.bas",57
                                	;[58] 	PLAY SIMPLE
                                	SRCFILE "samples/pumpkin_master.bas",58
51F4   02BB 0003                	MVII #3,R3
51F6   0243 010E                	MVO R3,_music_mode
                                	;[59] 
                                	SRCFILE "samples/pumpkin_master.bas",59
                                	;[60] 	'
                                	SRCFILE "samples/pumpkin_master.bas",60
                                	;[61] 	' Title screen
                                	SRCFILE "samples/pumpkin_master.bas",61
                                	;[62] 	'
                                	SRCFILE "samples/pumpkin_master.bas",62
                                	;[63] title_screen:
                                	SRCFILE "samples/pumpkin_master.bas",63
                                	; TITLE_SCREEN
0x51F8                          label_TITLE_SCREEN:	;[64] 	PLAY music_game
                                	SRCFILE "samples/pumpkin_master.bas",64
51F8   02B8 F000                	MVII #label_MUSIC_GAME,R0
51FA   0004 01F4 03AE           	CALL _play_music
                                	;[65] 	PLAY VOLUME VOLUME_TITLE
                                	SRCFILE "samples/pumpkin_master.bas",65
51FD   02B8 000C                	MVII #12,R0
51FF   0240 0128                	MVO R0,_music_vol
                                	;[66] 
                                	SRCFILE "samples/pumpkin_master.bas",66
                                	;[67] 	CLS
                                	SRCFILE "samples/pumpkin_master.bas",67
5201   0004 0150 0014           	CALL CLRSCR
                                	;[68] 	MODE 0,0,1,0,0
                                	SRCFILE "samples/pumpkin_master.bas",68
5204   02B8 0100                	MVII #256,R0
5206   0240 0347                	MVO R0,_color
5208   02B8 0002                	MVII #2,R0
520A   0240 0109                	MVO R0,_mode_select
                                	;[69] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",69
520C   0004 01F4 01E2           	CALL _wait
                                	;[70] 	FOR c = 0 TO 7
                                	SRCFILE "samples/pumpkin_master.bas",70
520F   01C0                     	CLRR R0
5210   0240 012C                	MVO R0,var_C
0x5212                          T2:
                                	;[71] 		SPRITE c, 0
                                	SRCFILE "samples/pumpkin_master.bas",71
5212   02B8 0348                	MVII #Q1,R0
5214   02C0 012C                	ADD var_C,R0
5216   0084                     	MOVR R0,R4
5217   01C0                     	CLRR R0
5218   0260                     	MVO@ R0,R4
                                	;[72] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",72
5219   0280 012C                	MVI var_C,R0
521B   0008                     	INCR R0
521C   0240 012C                	MVO R0,var_C
521E   0378 0007                	CMPI #7,R0
5220   0226 000F                	BLE T2
                                	;[73] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",73
5222   0004 01F4 01E2           	CALL _wait
                                	;[74] 	DEFINE 0,16,pumpkin_bitmaps_0
                                	SRCFILE "samples/pumpkin_master.bas",74
5225   01C0                     	CLRR R0
5226   0240 0105                	MVO R0,_gram_target
5228   02B8 0010                	MVII #16,R0
522A   0240 0106                	MVO R0,_gram_total
522C   02B8 6509                	MVII #label_PUMPKIN_BITMAPS_0,R0
522E   0240 0344                	MVO R0,_gram_bitmap
                                	;[75] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",75
5230   0004 01F4 01E2           	CALL _wait
                                	;[76] 	DEFINE 16,16,pumpkin_bitmaps_1
                                	SRCFILE "samples/pumpkin_master.bas",76
5233   02B8 0010                	MVII #16,R0
5235   0240 0105                	MVO R0,_gram_target
5237   0240 0106                	MVO R0,_gram_total
5239   02B8 6549                	MVII #label_PUMPKIN_BITMAPS_1,R0
523B   0240 0344                	MVO R0,_gram_bitmap
                                	;[77] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",77
523D   0004 01F4 01E2           	CALL _wait
                                	;[78] 	DEFINE 32,16,pumpkin_bitmaps_2
                                	SRCFILE "samples/pumpkin_master.bas",78
5240   02B8 0020                	MVII #32,R0
5242   0240 0105                	MVO R0,_gram_target
5244   02B8 0010                	MVII #16,R0
5246   0240 0106                	MVO R0,_gram_total
5248   02B8 6589                	MVII #label_PUMPKIN_BITMAPS_2,R0
524A   0240 0344                	MVO R0,_gram_bitmap
                                	;[79] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",79
524C   0004 01F4 01E2           	CALL _wait
                                	;[80] 	DEFINE 48,11,pumpkin_bitmaps_3
                                	SRCFILE "samples/pumpkin_master.bas",80
524F   02B8 0030                	MVII #48,R0
5251   0240 0105                	MVO R0,_gram_target
5253   02B8 000B                	MVII #11,R0
5255   0240 0106                	MVO R0,_gram_total
5257   02B8 65C9                	MVII #label_PUMPKIN_BITMAPS_3,R0
5259   0240 0344                	MVO R0,_gram_bitmap
                                	;[81] 	DEFINE ALTERNATE 60,4,game_bitmaps_0
                                	SRCFILE "samples/pumpkin_master.bas",81
525B   02B8 003C                	MVII #60,R0
525D   0240 0107                	MVO R0,_gram2_target
525F   02B8 0004                	MVII #4,R0
5261   0240 0108                	MVO R0,_gram2_total
5263   02B8 64D5                	MVII #label_GAME_BITMAPS_0,R0
5265   0240 0345                	MVO R0,_gram2_bitmap
                                	;[82] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",82
5267   0004 01F4 01E2           	CALL _wait
                                	;[83] 	' Show the Pumpkin Master and the title letters
                                	SRCFILE "samples/pumpkin_master.bas",83
                                	;[84] 	SCREEN pumpkin_cards,20,0,20,11
                                	SRCFILE "samples/pumpkin_master.bas",84
526A   02B8 6609                	MVII #label_PUMPKIN_CARDS+20,R0
526C   0270                     	PSHR R0
526D   02B8 0200                	MVII #512,R0
526F   0270                     	PSHR R0
5270   02B8 0014                	MVII #20,R0
5272   0270                     	PSHR R0
5273   02B8 000B                	MVII #11,R0
5275   02B1                     	PULR R1
5276   02B2                     	PULR R2
5277   02B3                     	PULR R3
5278   0004 01F4 01D0           	CALL CPYBLK
                                	;[85] 
                                	SRCFILE "samples/pumpkin_master.bas",85
                                	;[86] 	' Add some houses
                                	SRCFILE "samples/pumpkin_master.bas",86
                                	;[87] 	SPRITE 0,$0308 + 8, $0088 + 64, $1801 + 62 * 8
                                	SRCFILE "samples/pumpkin_master.bas",87
527B   02B8 0310                	MVII #784,R0
527D   0240 0348                	MVO R0,_mobs
527F   02B8 00C8                	MVII #200,R0
5281   0240 0350                	MVO R0,_mobs+8
5283   02B8 19F1                	MVII #6641,R0
5285   0240 0358                	MVO R0,_mobs+16
                                	;[88] 	SPRITE 1,$0308 + 24, $0088 + 64, $1801 + 62 * 8
                                	SRCFILE "samples/pumpkin_master.bas",88
5287   02B8 0320                	MVII #800,R0
5289   0240 0349                	MVO R0,_mobs+1
528B   02B8 00C8                	MVII #200,R0
528D   0240 0351                	MVO R0,_mobs+9
528F   02B8 19F1                	MVII #6641,R0
5291   0240 0359                	MVO R0,_mobs+17
                                	;[89] 	SPRITE 2,$0308 + 40, $0088 + 64, $1801 + 62 * 8
                                	SRCFILE "samples/pumpkin_master.bas",89
5293   02B8 0330                	MVII #816,R0
5295   0240 034A                	MVO R0,_mobs+2
5297   02B8 00C8                	MVII #200,R0
5299   0240 0352                	MVO R0,_mobs+10
529B   02B8 19F1                	MVII #6641,R0
529D   0240 035A                	MVO R0,_mobs+18
                                	;[90] 	SPRITE 3,$0308 + 104, $0088 + 64, $1801 + 62 * 8
                                	SRCFILE "samples/pumpkin_master.bas",90
529F   02B8 0370                	MVII #880,R0
52A1   0240 034B                	MVO R0,_mobs+3
52A3   02B8 00C8                	MVII #200,R0
52A5   0240 0353                	MVO R0,_mobs+11
52A7   02B8 19F1                	MVII #6641,R0
52A9   0240 035B                	MVO R0,_mobs+19
                                	;[91] 	SPRITE 4,$0308 + 120, $0088 + 64, $1801 + 62 * 8
                                	SRCFILE "samples/pumpkin_master.bas",91
52AB   02B8 0380                	MVII #896,R0
52AD   0240 034C                	MVO R0,_mobs+4
52AF   02B8 00C8                	MVII #200,R0
52B1   0240 0354                	MVO R0,_mobs+12
52B3   02B8 19F1                	MVII #6641,R0
52B5   0240 035C                	MVO R0,_mobs+20
                                	;[92] 	SPRITE 5,$0308 + 136, $0088 + 64, $1801 + 62 * 8
                                	SRCFILE "samples/pumpkin_master.bas",92
52B7   02B8 0390                	MVII #912,R0
52B9   0240 034D                	MVO R0,_mobs+5
52BB   02B8 00C8                	MVII #200,R0
52BD   0240 0355                	MVO R0,_mobs+13
52BF   02B8 19F1                	MVII #6641,R0
52C1   0240 035D                	MVO R0,_mobs+21
                                	;[93] 
                                	SRCFILE "samples/pumpkin_master.bas",93
                                	;[94] 	' Add a pair of pumpkins
                                	SRCFILE "samples/pumpkin_master.bas",94
                                	;[95] 	SPRITE 6,$0308 + 64, $0088 + 8, $1802 + 60 * 8
                                	SRCFILE "samples/pumpkin_master.bas",95
52C3   02B8 0348                	MVII #840,R0
52C5   0240 034E                	MVO R0,_mobs+6
52C7   02B8 0090                	MVII #144,R0
52C9   0240 0356                	MVO R0,_mobs+14
52CB   02B8 19E2                	MVII #6626,R0
52CD   0240 035E                	MVO R0,_mobs+22
                                	;[96] 	SPRITE 7,$0308 + 92, $0088 + 22, $1802 + 60 * 8
                                	SRCFILE "samples/pumpkin_master.bas",96
52CF   02B8 0364                	MVII #868,R0
52D1   0240 034F                	MVO R0,_mobs+7
52D3   02B8 009E                	MVII #158,R0
52D5   0240 0357                	MVO R0,_mobs+15
52D7   02B8 19E2                	MVII #6626,R0
52D9   0240 035F                	MVO R0,_mobs+23
                                	;[97] 
                                	SRCFILE "samples/pumpkin_master.bas",97
                                	;[98] 	' Show the record in a color bar (as ground)
                                	SRCFILE "samples/pumpkin_master.bas",98
                                	;[99] 	#backtab(180) = $2000
                                	SRCFILE "samples/pumpkin_master.bas",99
52DB   02B8 2000                	MVII #8192,R0
52DD   0240 02B4                	MVO R0,Q2+180
                                	;[100] 	PRINT AT 183 COLOR 5,"Record: ",<5>#record,"0"
                                	SRCFILE "samples/pumpkin_master.bas",100
52DF   02B8 02B7                	MVII #695,R0
52E1   0240 0346                	MVO R0,_screen
52E3   02B8 0005                	MVII #5,R0
52E5   0240 0347                	MVO R0,_color
52E7   0284 0346                	MVI _screen,R4
52E9   02B8 0190                	MVII #400,R0
52EB   03C0 0347                	XOR _color,R0
52ED   0260                     	MVO@ R0,R4
52EE   03F8 03B8                	XORI #952,R0
52F0   0260                     	MVO@ R0,R4
52F1   03F8 0030                	XORI #48,R0
52F3   0260                     	MVO@ R0,R4
52F4   03F8 0060                	XORI #96,R0
52F6   0260                     	MVO@ R0,R4
52F7   03F8 00E8                	XORI #232,R0
52F9   0260                     	MVO@ R0,R4
52FA   03F8 00B0                	XORI #176,R0
52FC   0260                     	MVO@ R0,R4
52FD   03F8 02F0                	XORI #752,R0
52FF   0260                     	MVO@ R0,R4
5300   03F8 00D0                	XORI #208,R0
5302   0260                     	MVO@ R0,R4
5303   0244 0346                	MVO R4,_screen
5305   0280 8040                	MVI var_&RECORD,R0
5307   02BA 0005                	MVII #5,R2
5309   0283 0347                	MVI _color,R3
530B   0284 0346                	MVI _screen,R4
530D   0004 01F8 0355           	CALL PRNUM16.z
5310   0244 0346                	MVO R4,_screen
5312   0284 0346                	MVI _screen,R4
5314   02B8 0080                	MVII #128,R0
5316   03C0 0347                	XOR _color,R0
5318   0260                     	MVO@ R0,R4
5319   0244 0346                	MVO R4,_screen
                                	;[101] 	#backtab(200) = $2000
                                	SRCFILE "samples/pumpkin_master.bas",101
531B   02B8 2000                	MVII #8192,R0
531D   0240 02C8                	MVO R0,Q2+200
                                	;[102] 
                                	SRCFILE "samples/pumpkin_master.bas",102
                                	;[103] 	PRINT AT 224 COLOR 6,"Press button"
                                	SRCFILE "samples/pumpkin_master.bas",103
531F   02B8 02E0                	MVII #736,R0
5321   0240 0346                	MVO R0,_screen
5323   02B8 0006                	MVII #6,R0
5325   0240 0347                	MVO R0,_color
5327   0284 0346                	MVI _screen,R4
5329   02B8 0180                	MVII #384,R0
532B   03C0 0347                	XOR _color,R0
532D   0260                     	MVO@ R0,R4
532E   03F8 0310                	XORI #784,R0
5330   0260                     	MVO@ R0,R4
5331   03F8 00B8                	XORI #184,R0
5333   0260                     	MVO@ R0,R4
5334   03F8 00B0                	XORI #176,R0
5336   0260                     	MVO@ R0,R4
5337   0260                     	MVO@ R0,R4
5338   03F8 0298                	XORI #664,R0
533A   0260                     	MVO@ R0,R4
533B   03F8 0210                	XORI #528,R0
533D   0260                     	MVO@ R0,R4
533E   03F8 00B8                	XORI #184,R0
5340   0260                     	MVO@ R0,R4
5341   03F8 0008                	XORI #8,R0
5343   0260                     	MVO@ R0,R4
5344   0260                     	MVO@ R0,R4
5345   03F8 00D8                	XORI #216,R0
5347   0260                     	MVO@ R0,R4
5348   03F8 0008                	XORI #8,R0
534A   0260                     	MVO@ R0,R4
534B   0244 0346                	MVO R4,_screen
                                	;[104] 
                                	SRCFILE "samples/pumpkin_master.bas",104
                                	;[105] 	' Wait for controller to be "free"
                                	SRCFILE "samples/pumpkin_master.bas",105
                                	;[106] 	DO
                                	SRCFILE "samples/pumpkin_master.bas",106
0x534D                          T3:
                                	;[107] 		WAIT
                                	SRCFILE "samples/pumpkin_master.bas",107
534D   0004 01F4 01E2           	CALL _wait
                                	;[108] 		c = CONT
                                	SRCFILE "samples/pumpkin_master.bas",108
5350   0280 01FE                	MVI 510,R0
5352   03C0 01FF                	XOR 511,R0
5354   0240 012C                	MVO R0,var_C
                                	;[109] 	LOOP WHILE c
                                	SRCFILE "samples/pumpkin_master.bas",109
5356   0280 012C                	MVI var_C,R0
5358   0080                     	TSTR R0
5359   0204 0002                	BEQ T5
535B   0220 000F                	B T3
0x535D                          T5:
                                	;[110] 
                                	SRCFILE "samples/pumpkin_master.bas",110
                                	;[111] 	' Now wait for controller press
                                	SRCFILE "samples/pumpkin_master.bas",111
                                	;[112] 	DO
                                	SRCFILE "samples/pumpkin_master.bas",112
0x535D                          T6:
                                	;[113] 		WAIT
                                	SRCFILE "samples/pumpkin_master.bas",113
535D   0004 01F4 01E2           	CALL _wait
                                	;[114] 		c = CONT
                                	SRCFILE "samples/pumpkin_master.bas",114
5360   0280 01FE                	MVI 510,R0
5362   03C0 01FF                	XOR 511,R0
5364   0240 012C                	MVO R0,var_C
                                	;[115] 	LOOP WHILE c = 0
                                	SRCFILE "samples/pumpkin_master.bas",115
5366   0280 012C                	MVI var_C,R0
5368   0080                     	TSTR R0
5369   020C 0002                	BNE T8
536B   0220 000F                	B T6
0x536D                          T8:
                                	;[116] 
                                	SRCFILE "samples/pumpkin_master.bas",116
                                	;[117] 	'
                                	SRCFILE "samples/pumpkin_master.bas",117
                                	;[118] 	' Prepare for starting game
                                	SRCFILE "samples/pumpkin_master.bas",118
                                	;[119] 	'
                                	SRCFILE "samples/pumpkin_master.bas",119
                                	;[120] 	CLS
                                	SRCFILE "samples/pumpkin_master.bas",120
536D   0004 0150 0014           	CALL CLRSCR
                                	;[121] 	MODE 0,0,0,0,0
                                	SRCFILE "samples/pumpkin_master.bas",121
5370   01C0                     	CLRR R0
5371   0240 0347                	MVO R0,_color
5373   02B8 0002                	MVII #2,R0
5375   0240 0109                	MVO R0,_mode_select
                                	;[122] 	FOR c = 0 TO 7
                                	SRCFILE "samples/pumpkin_master.bas",122
5377   01C0                     	CLRR R0
5378   0240 012C                	MVO R0,var_C
0x537A                          T9:
                                	;[123] 		SPRITE c, 0
                                	SRCFILE "samples/pumpkin_master.bas",123
537A   02B8 0348                	MVII #Q1,R0
537C   02C0 012C                	ADD var_C,R0
537E   0084                     	MOVR R0,R4
537F   01C0                     	CLRR R0
5380   0260                     	MVO@ R0,R4
                                	;[124] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",124
5381   0280 012C                	MVI var_C,R0
5383   0008                     	INCR R0
5384   0240 012C                	MVO R0,var_C
5386   0378 0007                	CMPI #7,R0
5388   0226 000F                	BLE T9
                                	;[125] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",125
538A   0004 01F4 01E2           	CALL _wait
                                	;[126] 	DEFINE 0,16,game_bitmaps_0
                                	SRCFILE "samples/pumpkin_master.bas",126
538D   01C0                     	CLRR R0
538E   0240 0105                	MVO R0,_gram_target
5390   02B8 0010                	MVII #16,R0
5392   0240 0106                	MVO R0,_gram_total
5394   02B8 64D5                	MVII #label_GAME_BITMAPS_0,R0
5396   0240 0344                	MVO R0,_gram_bitmap
                                	;[127] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",127
5398   0004 01F4 01E2           	CALL _wait
                                	;[128] 
                                	SRCFILE "samples/pumpkin_master.bas",128
                                	;[129] 	first_time_ever = 1	' In order to show story
                                	SRCFILE "samples/pumpkin_master.bas",129
539B   02B8 0001                	MVII #1,R0
539D   0240 0130                	MVO R0,var_FIRST_TIME_EVER
                                	;[130] 	lives = 4		' Default lives
                                	SRCFILE "samples/pumpkin_master.bas",130
539F   02B8 0004                	MVII #4,R0
53A1   0240 0133                	MVO R0,var_LIVES
                                	;[131] 	level = 1		' Start level
                                	SRCFILE "samples/pumpkin_master.bas",131
53A3   02B8 0001                	MVII #1,R0
53A5   0240 0132                	MVO R0,var_LEVEL
                                	;[132] 	sublevel = 0		' Sublevel (or wave number)
                                	SRCFILE "samples/pumpkin_master.bas",132
53A7   01C0                     	CLRR R0
53A8   0240 013A                	MVO R0,var_SUBLEVEL
                                	;[133] 	#score = 0		' Reset score
                                	SRCFILE "samples/pumpkin_master.bas",133
53AA   0240 8041                	MVO R0,var_&SCORE
                                	;[134] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",134
53AC   0034                     	NOP
53AD   0240 012C                	MVO R0,var_C
0x53AF                          T10:
                                	;[135] 		x(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",135
53AF   01C0                     	CLRR R0
53B0   02BB 0149                	MVII #array_X,R3
53B2   02C3 012C                	ADD var_C,R3
53B4   0258                     	MVO@ R0,R3
                                	;[136] 		y(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",136
53B5   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
53B7   0258                     	MVO@ R0,R3
                                	;[137] 		s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",137
53B8   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
53BA   0258                     	MVO@ R0,R3
                                	;[138] 		b(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",138
53BB   02FB FFFA                	ADDI #(array_B-array_S) AND $FFFF,R3
53BD   0258                     	MVO@ R0,R3
                                	;[139] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",139
53BE   0280 012C                	MVI var_C,R0
53C0   0008                     	INCR R0
53C1   0240 012C                	MVO R0,var_C
53C3   0378 0005                	CMPI #5,R0
53C5   0226 0017                	BLE T10
                                	;[140] 	GOSUB start_wave	' Start a pumpkins wave
                                	SRCFILE "samples/pumpkin_master.bas",140
53C7   0004 015C 02E4           	CALL label_START_WAVE
                                	;[141] 
                                	SRCFILE "samples/pumpkin_master.bas",141
                                	;[142] 	'
                                	SRCFILE "samples/pumpkin_master.bas",142
                                	;[143] 	' Restart game after losing a life
                                	SRCFILE "samples/pumpkin_master.bas",143
                                	;[144] 	'
                                	SRCFILE "samples/pumpkin_master.bas",144
                                	;[145] restart_game:
                                	SRCFILE "samples/pumpkin_master.bas",145
                                	; RESTART_GAME
0x53CA                          label_RESTART_GAME:	;[146] 	PLAY VOLUME VOLUME_GAME
                                	SRCFILE "samples/pumpkin_master.bas",146
53CA   02B8 000A                	MVII #10,R0
53CC   0240 0128                	MVO R0,_music_vol
                                	;[147] 	by = 0			' No player bullet
                                	SRCFILE "samples/pumpkin_master.bas",147
53CE   01C0                     	CLRR R0
53CF   0240 012B                	MVO R0,var_BY
                                	;[148] 	px = 84			' Setup player at bottom center
                                	SRCFILE "samples/pumpkin_master.bas",148
53D1   02B8 0054                	MVII #84,R0
53D3   0240 0136                	MVO R0,var_PX
                                	;[149] 	py = 96
                                	SRCFILE "samples/pumpkin_master.bas",149
53D5   02B8 0060                	MVII #96,R0
53D7   0240 0137                	MVO R0,var_PY
                                	;[150] 
                                	SRCFILE "samples/pumpkin_master.bas",150
                                	;[151] 	GOSUB update_score
                                	SRCFILE "samples/pumpkin_master.bas",151
53D9   0004 015C 0233           	CALL label_UPDATE_SCORE
                                	;[152] 	GOSUB update_lives
                                	SRCFILE "samples/pumpkin_master.bas",152
53DC   0004 015C 028D           	CALL label_UPDATE_LIVES
                                	;[153] 	GOSUB update_level
                                	SRCFILE "samples/pumpkin_master.bas",153
53DF   0004 015C 0269           	CALL label_UPDATE_LEVEL
                                	;[154] 
                                	SRCFILE "samples/pumpkin_master.bas",154
                                	;[155] 	' If restarting inside boss level, go to boss game loop
                                	SRCFILE "samples/pumpkin_master.bas",155
                                	;[156] 	IF sublevel = 10 THEN PLAY VOLUME VOLUME_BOSS: GOTO boss_loop
                                	SRCFILE "samples/pumpkin_master.bas",156
53E2   0280 013A                	MVI var_SUBLEVEL,R0
53E4   0378 000A                	CMPI #10,R0
53E6   020C 0006                	BNE T11
53E8   02B8 000E                	MVII #14,R0
53EA   0240 0128                	MVO R0,_music_vol
53EC   0200 070E                	B label_BOSS_LOOP
0x53EE                          T11:
                                	;[157] 
                                	SRCFILE "samples/pumpkin_master.bas",157
                                	;[158] 	' Is it the first time the game restarts? show story.
                                	SRCFILE "samples/pumpkin_master.bas",158
                                	;[159] 	IF first_time_ever = 1 THEN
                                	SRCFILE "samples/pumpkin_master.bas",159
53EE   0280 0130                	MVI var_FIRST_TIME_EVER,R0
53F0   0378 0001                	CMPI #1,R0
53F2   020C 0484                	BNE T12
                                	;[160] 		first_time_ever = 0
                                	SRCFILE "samples/pumpkin_master.bas",160
53F4   01C0                     	CLRR R0
53F5   0240 0130                	MVO R0,var_FIRST_TIME_EVER
                                	;[161] 
                                	SRCFILE "samples/pumpkin_master.bas",161
                                	;[162] 		' Re-use pumpkin arrays for tiny houses
                                	SRCFILE "samples/pumpkin_master.bas",162
                                	;[163] 		FOR c = 0 TO 2
                                	SRCFILE "samples/pumpkin_master.bas",163
53F7   0240 012C                	MVO R0,var_C
0x53F9                          T13:
                                	;[164] 			x(c) = px - 12 * (c + 1)
                                	SRCFILE "samples/pumpkin_master.bas",164
53F9   0280 0136                	MVI var_PX,R0
53FB   0281 012C                	MVI var_C,R1
53FD   0009                     	INCR R1
                                ;	MULT R1,R4,12
                                	;
53FE   004D                                     SLL     R1,  2
53FF   008C                                     MOVR    R1,  R4
5400   0049                                     SLL     R1,  1
5401   00E1                                     ADDR    R4,  R1
5402   0108                     	SUBR R1,R0
5403   02BB 0149                	MVII #array_X,R3
5405   02C3 012C                	ADD var_C,R3
5407   0258                     	MVO@ R0,R3
                                	;[165] 		NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",165
5408   0280 012C                	MVI var_C,R0
540A   0008                     	INCR R0
540B   0240 012C                	MVO R0,var_C
540D   0378 0002                	CMPI #2,R0
540F   0226 0017                	BLE T13
                                	;[166] 		FOR c = 3 TO 5
                                	SRCFILE "samples/pumpkin_master.bas",166
5411   02B8 0003                	MVII #3,R0
5413   0240 012C                	MVO R0,var_C
0x5415                          T14:
                                	;[167] 			x(c) = px + 12 * (c - 2)
                                	SRCFILE "samples/pumpkin_master.bas",167
5415   0280 012C                	MVI var_C,R0
5417   0338 0002                	SUBI #2,R0
                                ;	MULT R0,R4,12
                                	;
5419   004C                                     SLL     R0,  2
541A   0084                                     MOVR    R0,  R4
541B   0048                                     SLL     R0,  1
541C   00E0                                     ADDR    R4,  R0
541D   02C0 0136                	ADD var_PX,R0
541F   02BB 0149                	MVII #array_X,R3
5421   02C3 012C                	ADD var_C,R3
5423   0258                     	MVO@ R0,R3
                                	;[168] 		NEXT c 
                                	SRCFILE "samples/pumpkin_master.bas",168
5424   0280 012C                	MVI var_C,R0
5426   0008                     	INCR R0
5427   0240 012C                	MVO R0,var_C
5429   0378 0005                	CMPI #5,R0
542B   0226 0017                	BLE T14
                                	;[169] 		SPRITE 7, $0300 + px, $0080 + py, $1801 + 2 * 8
                                	SRCFILE "samples/pumpkin_master.bas",169
542D   0280 0136                	MVI var_PX,R0
542F   02F8 0300                	ADDI #768,R0
5431   0240 034F                	MVO R0,_mobs+7
5433   0280 0137                	MVI var_PY,R0
5435   02F8 0080                	ADDI #128,R0
5437   0240 0357                	MVO R0,_mobs+15
5439   02B8 1811                	MVII #6161,R0
543B   0240 035F                	MVO R0,_mobs+23
                                	;[170] 		FOR c = 0 TO 6
                                	SRCFILE "samples/pumpkin_master.bas",170
543D   01C0                     	CLRR R0
543E   0240 012C                	MVO R0,var_C
0x5440                          T15:
                                	;[171] 			SPRITE c, $0300 + x(c), $0080 + py, $1801 + 2 * 8
                                	SRCFILE "samples/pumpkin_master.bas",171
5440   02B8 0348                	MVII #Q1,R0
5442   02C0 012C                	ADD var_C,R0
5444   0084                     	MOVR R0,R4
5445   02BB 0149                	MVII #array_X,R3
5447   02C3 012C                	ADD var_C,R3
5449   0298                     	MVI@ R3,R0
544A   02F8 0300                	ADDI #768,R0
544C   0260                     	MVO@ R0,R4
544D   0280 0137                	MVI var_PY,R0
544F   02F8 0080                	ADDI #128,R0
5451   02FC 0007                	ADDI #7,R4
5453   0260                     	MVO@ R0,R4
5454   02B8 1811                	MVII #6161,R0
5456   02FC 0007                	ADDI #7,R4
5458   0260                     	MVO@ R0,R4
                                	;[172] 		NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",172
5459   0280 012C                	MVI var_C,R0
545B   0008                     	INCR R0
545C   0240 012C                	MVO R0,var_C
545E   0378 0006                	CMPI #6,R0
5460   0226 0021                	BLE T15
                                	;[173] 
                                	SRCFILE "samples/pumpkin_master.bas",173
                                	;[174] 		PRINT AT 65 COLOR 6,"Hey guys!"
                                	SRCFILE "samples/pumpkin_master.bas",174
5462   02B8 0241                	MVII #577,R0
5464   0240 0346                	MVO R0,_screen
5466   02B8 0006                	MVII #6,R0
5468   0240 0347                	MVO R0,_color
546A   0284 0346                	MVI _screen,R4
546C   02B8 0140                	MVII #320,R0
546E   03C0 0347                	XOR _color,R0
5470   0260                     	MVO@ R0,R4
5471   03F8 0368                	XORI #872,R0
5473   0260                     	MVO@ R0,R4
5474   03F8 00E0                	XORI #224,R0
5476   0260                     	MVO@ R0,R4
5477   03F8 02C8                	XORI #712,R0
5479   0260                     	MVO@ R0,R4
547A   03F8 0238                	XORI #568,R0
547C   0260                     	MVO@ R0,R4
547D   03F8 0090                	XORI #144,R0
547F   0260                     	MVO@ R0,R4
5480   03F8 0060                	XORI #96,R0
5482   0260                     	MVO@ R0,R4
5483   03F8 0050                	XORI #80,R0
5485   0260                     	MVO@ R0,R4
5486   03F8 0290                	XORI #656,R0
5488   0260                     	MVO@ R0,R4
5489   0244 0346                	MVO R4,_screen
                                	;[175] 		PRINT AT 85,"Thanks for"
                                	SRCFILE "samples/pumpkin_master.bas",175
548B   02B8 0255                	MVII #597,R0
548D   0240 0346                	MVO R0,_screen
548F   0084                     	MOVR R0,R4
5490   02B8 01A0                	MVII #416,R0
5492   03C0 0347                	XOR _color,R0
5494   0260                     	MVO@ R0,R4
5495   03F8 03E0                	XORI #992,R0
5497   0260                     	MVO@ R0,R4
5498   03F8 0048                	XORI #72,R0
549A   0260                     	MVO@ R0,R4
549B   03F8 0078                	XORI #120,R0
549D   0260                     	MVO@ R0,R4
549E   03F8 0028                	XORI #40,R0
54A0   0260                     	MVO@ R0,R4
54A1   03F8 00C0                	XORI #192,R0
54A3   0260                     	MVO@ R0,R4
54A4   03F8 0298                	XORI #664,R0
54A6   0260                     	MVO@ R0,R4
54A7   03F8 0230                	XORI #560,R0
54A9   0260                     	MVO@ R0,R4
54AA   03F8 0048                	XORI #72,R0
54AC   0260                     	MVO@ R0,R4
54AD   03F8 00E8                	XORI #232,R0
54AF   0260                     	MVO@ R0,R4
54B0   0244 0346                	MVO R4,_screen
                                	;[176] 		PRINT AT 105,"helping me."
                                	SRCFILE "samples/pumpkin_master.bas",176
54B2   02B8 0269                	MVII #617,R0
54B4   0240 0346                	MVO R0,_screen
54B6   0084                     	MOVR R0,R4
54B7   02B8 0240                	MVII #576,R0
54B9   03C0 0347                	XOR _color,R0
54BB   0260                     	MVO@ R0,R4
54BC   03F8 0068                	XORI #104,R0
54BE   0260                     	MVO@ R0,R4
54BF   03F8 0048                	XORI #72,R0
54C1   0260                     	MVO@ R0,R4
54C2   03F8 00E0                	XORI #224,R0
54C4   0260                     	MVO@ R0,R4
54C5   03F8 00C8                	XORI #200,R0
54C7   0260                     	MVO@ R0,R4
54C8   03F8 0038                	XORI #56,R0
54CA   0260                     	MVO@ R0,R4
54CB   03F8 0048                	XORI #72,R0
54CD   0260                     	MVO@ R0,R4
54CE   03F8 0238                	XORI #568,R0
54D0   0260                     	MVO@ R0,R4
54D1   03F8 0268                	XORI #616,R0
54D3   0260                     	MVO@ R0,R4
54D4   03F8 0040                	XORI #64,R0
54D6   0260                     	MVO@ R0,R4
54D7   03F8 0258                	XORI #600,R0
54D9   0260                     	MVO@ R0,R4
54DA   0244 0346                	MVO R4,_screen
                                	;[177] 		GOSUB wait_and_clean
                                	SRCFILE "samples/pumpkin_master.bas",177
54DC   0004 015C 02AF           	CALL label_WAIT_AND_CLEAN
                                	;[178] 
                                	SRCFILE "samples/pumpkin_master.bas",178
                                	;[179] 		PRINT AT 64 COLOR 2,"Of course, we"
                                	SRCFILE "samples/pumpkin_master.bas",179
54DF   02B8 0240                	MVII #576,R0
54E1   0240 0346                	MVO R0,_screen
54E3   02B8 0002                	MVII #2,R0
54E5   0240 0347                	MVO R0,_color
54E7   0284 0346                	MVI _screen,R4
54E9   02B8 0178                	MVII #376,R0
54EB   03C0 0347                	XOR _color,R0
54ED   0260                     	MVO@ R0,R4
54EE   03F8 0348                	XORI #840,R0
54F0   0260                     	MVO@ R0,R4
54F1   03F8 0230                	XORI #560,R0
54F3   0260                     	MVO@ R0,R4
54F4   03F8 0218                	XORI #536,R0
54F6   0260                     	MVO@ R0,R4
54F7   03F8 0060                	XORI #96,R0
54F9   0260                     	MVO@ R0,R4
54FA   03F8 00D0                	XORI #208,R0
54FC   0260                     	MVO@ R0,R4
54FD   03F8 0038                	XORI #56,R0
54FF   0260                     	MVO@ R0,R4
5500   03F8 0008                	XORI #8,R0
5502   0260                     	MVO@ R0,R4
5503   03F8 00B0                	XORI #176,R0
5505   0260                     	MVO@ R0,R4
5506   03F8 0248                	XORI #584,R0
5508   0260                     	MVO@ R0,R4
5509   03F8 0060                	XORI #96,R0
550B   0260                     	MVO@ R0,R4
550C   03F8 02B8                	XORI #696,R0
550E   0260                     	MVO@ R0,R4
550F   03F8 0090                	XORI #144,R0
5511   0260                     	MVO@ R0,R4
5512   0244 0346                	MVO R4,_screen
                                	;[180] 		PRINT AT 84,"like to eat"
                                	SRCFILE "samples/pumpkin_master.bas",180
5514   02B8 0254                	MVII #596,R0
5516   0240 0346                	MVO R0,_screen
5518   0084                     	MOVR R0,R4
5519   02B8 0260                	MVII #608,R0
551B   03C0 0347                	XOR _color,R0
551D   0260                     	MVO@ R0,R4
551E   03F8 0028                	XORI #40,R0
5520   0260                     	MVO@ R0,R4
5521   03F8 0010                	XORI #16,R0
5523   0260                     	MVO@ R0,R4
5524   03F8 0070                	XORI #112,R0
5526   0260                     	MVO@ R0,R4
5527   03F8 0228                	XORI #552,R0
5529   0260                     	MVO@ R0,R4
552A   03F8 02A0                	XORI #672,R0
552C   0260                     	MVO@ R0,R4
552D   03F8 00D8                	XORI #216,R0
552F   0260                     	MVO@ R0,R4
5530   03F8 0278                	XORI #632,R0
5532   0260                     	MVO@ R0,R4
5533   03F8 0228                	XORI #552,R0
5535   0260                     	MVO@ R0,R4
5536   03F8 0020                	XORI #32,R0
5538   0260                     	MVO@ R0,R4
5539   03F8 00A8                	XORI #168,R0
553B   0260                     	MVO@ R0,R4
553C   0244 0346                	MVO R4,_screen
                                	;[181] 		PRINT AT 104,"pumpkin."
                                	SRCFILE "samples/pumpkin_master.bas",181
553E   02B8 0268                	MVII #616,R0
5540   0240 0346                	MVO R0,_screen
5542   0084                     	MOVR R0,R4
5543   02B8 0280                	MVII #640,R0
5545   03C0 0347                	XOR _color,R0
5547   0260                     	MVO@ R0,R4
5548   03F8 0028                	XORI #40,R0
554A   0260                     	MVO@ R0,R4
554B   03F8 00C0                	XORI #192,R0
554D   0260                     	MVO@ R0,R4
554E   03F8 00E8                	XORI #232,R0
5550   0260                     	MVO@ R0,R4
5551   03F8 00D8                	XORI #216,R0
5553   0260                     	MVO@ R0,R4
5554   03F8 0010                	XORI #16,R0
5556   0260                     	MVO@ R0,R4
5557   03F8 0038                	XORI #56,R0
5559   0260                     	MVO@ R0,R4
555A   03F8 0200                	XORI #512,R0
555C   0260                     	MVO@ R0,R4
555D   0244 0346                	MVO R4,_screen
                                	;[182] 		GOSUB wait_and_clean
                                	SRCFILE "samples/pumpkin_master.bas",182
555F   0004 015C 02AF           	CALL label_WAIT_AND_CLEAN
                                	;[183] 
                                	SRCFILE "samples/pumpkin_master.bas",183
                                	;[184] 		PRINT AT 62 COLOR 6,"Wait, we aren't"
                                	SRCFILE "samples/pumpkin_master.bas",184
5562   02B8 023E                	MVII #574,R0
5564   0240 0346                	MVO R0,_screen
5566   02B8 0006                	MVII #6,R0
5568   0240 0347                	MVO R0,_color
556A   0284 0346                	MVI _screen,R4
556C   02B8 01B8                	MVII #440,R0
556E   03C0 0347                	XOR _color,R0
5570   0260                     	MVO@ R0,R4
5571   03F8 03B0                	XORI #944,R0
5573   0260                     	MVO@ R0,R4
5574   03F8 0040                	XORI #64,R0
5576   0260                     	MVO@ R0,R4
5577   03F8 00E8                	XORI #232,R0
5579   0260                     	MVO@ R0,R4
557A   03F8 02C0                	XORI #704,R0
557C   0260                     	MVO@ R0,R4
557D   03F8 0060                	XORI #96,R0
557F   0260                     	MVO@ R0,R4
5580   03F8 02B8                	XORI #696,R0
5582   0260                     	MVO@ R0,R4
5583   03F8 0090                	XORI #144,R0
5585   0260                     	MVO@ R0,R4
5586   03F8 0228                	XORI #552,R0
5588   0260                     	MVO@ R0,R4
5589   03F8 0208                	XORI #520,R0
558B   0260                     	MVO@ R0,R4
558C   03F8 0098                	XORI #152,R0
558E   0260                     	MVO@ R0,R4
558F   03F8 00B8                	XORI #184,R0
5591   0260                     	MVO@ R0,R4
5592   03F8 0058                	XORI #88,R0
5594   0260                     	MVO@ R0,R4
5595   03F8 0248                	XORI #584,R0
5597   0260                     	MVO@ R0,R4
5598   03F8 0298                	XORI #664,R0
559A   0260                     	MVO@ R0,R4
559B   0244 0346                	MVO R4,_screen
                                	;[185] 		PRINT AT 82,"eating pumpkin"
                                	SRCFILE "samples/pumpkin_master.bas",185
559D   02B8 0252                	MVII #594,R0
559F   0240 0346                	MVO R0,_screen
55A1   0084                     	MOVR R0,R4
55A2   02B8 0228                	MVII #552,R0
55A4   03C0 0347                	XOR _color,R0
55A6   0260                     	MVO@ R0,R4
55A7   03F8 0020                	XORI #32,R0
55A9   0260                     	MVO@ R0,R4
55AA   03F8 00A8                	XORI #168,R0
55AC   0260                     	MVO@ R0,R4
55AD   03F8 00E8                	XORI #232,R0
55AF   0260                     	MVO@ R0,R4
55B0   03F8 0038                	XORI #56,R0
55B2   0260                     	MVO@ R0,R4
55B3   03F8 0048                	XORI #72,R0
55B5   0260                     	MVO@ R0,R4
55B6   03F8 0238                	XORI #568,R0
55B8   0260                     	MVO@ R0,R4
55B9   03F8 0280                	XORI #640,R0
55BB   0260                     	MVO@ R0,R4
55BC   03F8 0028                	XORI #40,R0
55BE   0260                     	MVO@ R0,R4
55BF   03F8 00C0                	XORI #192,R0
55C1   0260                     	MVO@ R0,R4
55C2   03F8 00E8                	XORI #232,R0
55C4   0260                     	MVO@ R0,R4
55C5   03F8 00D8                	XORI #216,R0
55C7   0260                     	MVO@ R0,R4
55C8   03F8 0010                	XORI #16,R0
55CA   0260                     	MVO@ R0,R4
55CB   03F8 0038                	XORI #56,R0
55CD   0260                     	MVO@ R0,R4
55CE   0244 0346                	MVO R4,_screen
                                	;[186] 		PRINT AT 102,"but killing them."
                                	SRCFILE "samples/pumpkin_master.bas",186
55D0   02B8 0266                	MVII #614,R0
55D2   0240 0346                	MVO R0,_screen
55D4   0084                     	MOVR R0,R4
55D5   02B8 0210                	MVII #528,R0
55D7   03C0 0347                	XOR _color,R0
55D9   0260                     	MVO@ R0,R4
55DA   03F8 00B8                	XORI #184,R0
55DC   0260                     	MVO@ R0,R4
55DD   03F8 0008                	XORI #8,R0
55DF   0260                     	MVO@ R0,R4
55E0   03F8 02A0                	XORI #672,R0
55E2   0260                     	MVO@ R0,R4
55E3   03F8 0258                	XORI #600,R0
55E5   0260                     	MVO@ R0,R4
55E6   03F8 0010                	XORI #16,R0
55E8   0260                     	MVO@ R0,R4
55E9   03F8 0028                	XORI #40,R0
55EB   0260                     	MVO@ R0,R4
55EC   0260                     	MVO@ R0,R4
55ED   03F8 0028                	XORI #40,R0
55EF   0260                     	MVO@ R0,R4
55F0   03F8 0038                	XORI #56,R0
55F2   0260                     	MVO@ R0,R4
55F3   03F8 0048                	XORI #72,R0
55F5   0260                     	MVO@ R0,R4
55F6   03F8 0238                	XORI #568,R0
55F8   0260                     	MVO@ R0,R4
55F9   03F8 02A0                	XORI #672,R0
55FB   0260                     	MVO@ R0,R4
55FC   03F8 00E0                	XORI #224,R0
55FE   0260                     	MVO@ R0,R4
55FF   03F8 0068                	XORI #104,R0
5601   0260                     	MVO@ R0,R4
5602   03F8 0040                	XORI #64,R0
5604   0260                     	MVO@ R0,R4
5605   03F8 0218                	XORI #536,R0
5607   0260                     	MVO@ R0,R4
5608   0244 0346                	MVO R4,_screen
                                	;[187] 		GOSUB wait_and_clean
                                	SRCFILE "samples/pumpkin_master.bas",187
560A   0004 015C 02AF           	CALL label_WAIT_AND_CLEAN
                                	;[188] 
                                	SRCFILE "samples/pumpkin_master.bas",188
                                	;[189] 		PRINT AT 65 COLOR 2,"Killing?"
                                	SRCFILE "samples/pumpkin_master.bas",189
560D   02B8 0241                	MVII #577,R0
560F   0240 0346                	MVO R0,_screen
5611   02B8 0002                	MVII #2,R0
5613   0240 0347                	MVO R0,_color
5615   0284 0346                	MVI _screen,R4
5617   02B8 0158                	MVII #344,R0
5619   03C0 0347                	XOR _color,R0
561B   0260                     	MVO@ R0,R4
561C   03F8 0310                	XORI #784,R0
561E   0260                     	MVO@ R0,R4
561F   03F8 0028                	XORI #40,R0
5621   0260                     	MVO@ R0,R4
5622   0260                     	MVO@ R0,R4
5623   03F8 0028                	XORI #40,R0
5625   0260                     	MVO@ R0,R4
5626   03F8 0038                	XORI #56,R0
5628   0260                     	MVO@ R0,R4
5629   03F8 0048                	XORI #72,R0
562B   0260                     	MVO@ R0,R4
562C   03F8 02C0                	XORI #704,R0
562E   0260                     	MVO@ R0,R4
562F   0244 0346                	MVO R4,_screen
                                	;[190] 		GOSUB wait_and_clean
                                	SRCFILE "samples/pumpkin_master.bas",190
5631   0004 015C 02AF           	CALL label_WAIT_AND_CLEAN
                                	;[191] 
                                	SRCFILE "samples/pumpkin_master.bas",191
                                	;[192] 		PRINT AT 61 COLOR 6,"These are witched"
                                	SRCFILE "samples/pumpkin_master.bas",192
5634   02B8 023D                	MVII #573,R0
5636   0240 0346                	MVO R0,_screen
5638   02B8 0006                	MVII #6,R0
563A   0240 0347                	MVO R0,_color
563C   0284 0346                	MVI _screen,R4
563E   02B8 01A0                	MVII #416,R0
5640   03C0 0347                	XOR _color,R0
5642   0260                     	MVO@ R0,R4
5643   03F8 03E0                	XORI #992,R0
5645   0260                     	MVO@ R0,R4
5646   03F8 0068                	XORI #104,R0
5648   0260                     	MVO@ R0,R4
5649   03F8 00B0                	XORI #176,R0
564B   0260                     	MVO@ R0,R4
564C   03F8 00B0                	XORI #176,R0
564E   0260                     	MVO@ R0,R4
564F   03F8 0228                	XORI #552,R0
5651   0260                     	MVO@ R0,R4
5652   03F8 0208                	XORI #520,R0
5654   0260                     	MVO@ R0,R4
5655   03F8 0098                	XORI #152,R0
5657   0260                     	MVO@ R0,R4
5658   03F8 00B8                	XORI #184,R0
565A   0260                     	MVO@ R0,R4
565B   03F8 0228                	XORI #552,R0
565D   0260                     	MVO@ R0,R4
565E   03F8 02B8                	XORI #696,R0
5660   0260                     	MVO@ R0,R4
5661   03F8 00F0                	XORI #240,R0
5663   0260                     	MVO@ R0,R4
5664   03F8 00E8                	XORI #232,R0
5666   0260                     	MVO@ R0,R4
5667   03F8 00B8                	XORI #184,R0
5669   0260                     	MVO@ R0,R4
566A   03F8 0058                	XORI #88,R0
566C   0260                     	MVO@ R0,R4
566D   03F8 0068                	XORI #104,R0
566F   0260                     	MVO@ R0,R4
5670   03F8 0008                	XORI #8,R0
5672   0260                     	MVO@ R0,R4
5673   0244 0346                	MVO R4,_screen
                                	;[193] 		PRINT AT 81,"pumpkins!"
                                	SRCFILE "samples/pumpkin_master.bas",193
5675   02B8 0251                	MVII #593,R0
5677   0240 0346                	MVO R0,_screen
5679   0084                     	MOVR R0,R4
567A   02B8 0280                	MVII #640,R0
567C   03C0 0347                	XOR _color,R0
567E   0260                     	MVO@ R0,R4
567F   03F8 0028                	XORI #40,R0
5681   0260                     	MVO@ R0,R4
5682   03F8 00C0                	XORI #192,R0
5684   0260                     	MVO@ R0,R4
5685   03F8 00E8                	XORI #232,R0
5687   0260                     	MVO@ R0,R4
5688   03F8 00D8                	XORI #216,R0
568A   0260                     	MVO@ R0,R4
568B   03F8 0010                	XORI #16,R0
568D   0260                     	MVO@ R0,R4
568E   03F8 0038                	XORI #56,R0
5690   0260                     	MVO@ R0,R4
5691   03F8 00E8                	XORI #232,R0
5693   0260                     	MVO@ R0,R4
5694   03F8 0290                	XORI #656,R0
5696   0260                     	MVO@ R0,R4
5697   0244 0346                	MVO R4,_screen
                                	;[194] 		GOSUB wait_and_clean
                                	SRCFILE "samples/pumpkin_master.bas",194
5699   0004 015C 02AF           	CALL label_WAIT_AND_CLEAN
                                	;[195] 
                                	SRCFILE "samples/pumpkin_master.bas",195
                                	;[196] 		PRINT AT 65 COLOR 2,"Witched?"
                                	SRCFILE "samples/pumpkin_master.bas",196
569C   02B8 0241                	MVII #577,R0
569E   0240 0346                	MVO R0,_screen
56A0   02B8 0002                	MVII #2,R0
56A2   0240 0347                	MVO R0,_color
56A4   0284 0346                	MVI _screen,R4
56A6   02B8 01B8                	MVII #440,R0
56A8   03C0 0347                	XOR _color,R0
56AA   0260                     	MVO@ R0,R4
56AB   03F8 03F0                	XORI #1008,R0
56AD   0260                     	MVO@ R0,R4
56AE   03F8 00E8                	XORI #232,R0
56B0   0260                     	MVO@ R0,R4
56B1   03F8 00B8                	XORI #184,R0
56B3   0260                     	MVO@ R0,R4
56B4   03F8 0058                	XORI #88,R0
56B6   0260                     	MVO@ R0,R4
56B7   03F8 0068                	XORI #104,R0
56B9   0260                     	MVO@ R0,R4
56BA   03F8 0008                	XORI #8,R0
56BC   0260                     	MVO@ R0,R4
56BD   03F8 02D8                	XORI #728,R0
56BF   0260                     	MVO@ R0,R4
56C0   0244 0346                	MVO R4,_screen
                                	;[197] 		GOSUB wait_and_clean
                                	SRCFILE "samples/pumpkin_master.bas",197
56C2   0004 015C 02AF           	CALL label_WAIT_AND_CLEAN
                                	;[198] 
                                	SRCFILE "samples/pumpkin_master.bas",198
                                	;[199] 		PRINT AT 63 COLOR 2,"Err... we have"
                                	SRCFILE "samples/pumpkin_master.bas",199
56C5   02B8 023F                	MVII #575,R0
56C7   0240 0346                	MVO R0,_screen
56C9   02B8 0002                	MVII #2,R0
56CB   0240 0347                	MVO R0,_color
56CD   0284 0346                	MVI _screen,R4
56CF   02B8 0128                	MVII #296,R0
56D1   03C0 0347                	XOR _color,R0
56D3   0260                     	MVO@ R0,R4
56D4   03F8 03B8                	XORI #952,R0
56D6   0260                     	MVO@ R0,R4
56D7   0260                     	MVO@ R0,R4
56D8   03F8 02E0                	XORI #736,R0
56DA   0260                     	MVO@ R0,R4
56DB   0260                     	MVO@ R0,R4
56DC   0260                     	MVO@ R0,R4
56DD   03F8 0070                	XORI #112,R0
56DF   0260                     	MVO@ R0,R4
56E0   03F8 02B8                	XORI #696,R0
56E2   0260                     	MVO@ R0,R4
56E3   03F8 0090                	XORI #144,R0
56E5   0260                     	MVO@ R0,R4
56E6   03F8 0228                	XORI #552,R0
56E8   0260                     	MVO@ R0,R4
56E9   03F8 0240                	XORI #576,R0
56EB   0260                     	MVO@ R0,R4
56EC   03F8 0048                	XORI #72,R0
56EE   0260                     	MVO@ R0,R4
56EF   03F8 00B8                	XORI #184,R0
56F1   0260                     	MVO@ R0,R4
56F2   03F8 0098                	XORI #152,R0
56F4   0260                     	MVO@ R0,R4
56F5   0244 0346                	MVO R4,_screen
                                	;[200] 		PRINT AT 83,"things to do..."
                                	SRCFILE "samples/pumpkin_master.bas",200
56F7   02B8 0253                	MVII #595,R0
56F9   0240 0346                	MVO R0,_screen
56FB   0084                     	MOVR R0,R4
56FC   02B8 02A0                	MVII #672,R0
56FE   03C0 0347                	XOR _color,R0
5700   0260                     	MVO@ R0,R4
5701   03F8 00E0                	XORI #224,R0
5703   0260                     	MVO@ R0,R4
5704   03F8 0008                	XORI #8,R0
5706   0260                     	MVO@ R0,R4
5707   03F8 0038                	XORI #56,R0
5709   0260                     	MVO@ R0,R4
570A   03F8 0048                	XORI #72,R0
570C   0260                     	MVO@ R0,R4
570D   03F8 00A0                	XORI #160,R0
570F   0260                     	MVO@ R0,R4
5710   03F8 0298                	XORI #664,R0
5712   0260                     	MVO@ R0,R4
5713   03F8 02A0                	XORI #672,R0
5715   0260                     	MVO@ R0,R4
5716   03F8 00D8                	XORI #216,R0
5718   0260                     	MVO@ R0,R4
5719   03F8 0278                	XORI #632,R0
571B   0260                     	MVO@ R0,R4
571C   03F8 0220                	XORI #544,R0
571E   0260                     	MVO@ R0,R4
571F   03F8 0058                	XORI #88,R0
5721   0260                     	MVO@ R0,R4
5722   03F8 0208                	XORI #520,R0
5724   0260                     	MVO@ R0,R4
5725   0260                     	MVO@ R0,R4
5726   0260                     	MVO@ R0,R4
5727   0034                     	NOP
5728   0244 0346                	MVO R4,_screen
                                	;[201] 		PRINT AT 103,"See you later!"
                                	SRCFILE "samples/pumpkin_master.bas",201
572A   02B8 0267                	MVII #615,R0
572C   0240 0346                	MVO R0,_screen
572E   0084                     	MOVR R0,R4
572F   02B8 0198                	MVII #408,R0
5731   03C0 0347                	XOR _color,R0
5733   0260                     	MVO@ R0,R4
5734   03F8 03B0                	XORI #944,R0
5736   0260                     	MVO@ R0,R4
5737   0260                     	MVO@ R0,R4
5738   03F8 0228                	XORI #552,R0
573A   0260                     	MVO@ R0,R4
573B   03F8 02C8                	XORI #712,R0
573D   0260                     	MVO@ R0,R4
573E   03F8 00B0                	XORI #176,R0
5740   0260                     	MVO@ R0,R4
5741   03F8 00D0                	XORI #208,R0
5743   0260                     	MVO@ R0,R4
5744   03F8 02A8                	XORI #680,R0
5746   0260                     	MVO@ R0,R4
5747   03F8 0260                	XORI #608,R0
5749   0260                     	MVO@ R0,R4
574A   03F8 0068                	XORI #104,R0
574C   0260                     	MVO@ R0,R4
574D   03F8 00A8                	XORI #168,R0
574F   0260                     	MVO@ R0,R4
5750   03F8 0088                	XORI #136,R0
5752   0260                     	MVO@ R0,R4
5753   03F8 00B8                	XORI #184,R0
5755   0260                     	MVO@ R0,R4
5756   03F8 0298                	XORI #664,R0
5758   0260                     	MVO@ R0,R4
5759   0244 0346                	MVO R4,_screen
                                	;[202] 
                                	SRCFILE "samples/pumpkin_master.bas",202
                                	;[203] 		' Tiny houses run to the sides
                                	SRCFILE "samples/pumpkin_master.bas",203
                                	;[204] 		FOR d = 0 TO 120
                                	SRCFILE "samples/pumpkin_master.bas",204
575B   01C0                     	CLRR R0
575C   0240 012E                	MVO R0,var_D
0x575E                          T16:
                                	;[205] 			' Houses at left side
                                	SRCFILE "samples/pumpkin_master.bas",205
                                	;[206] 			FOR c = 0 TO 2
                                	SRCFILE "samples/pumpkin_master.bas",206
575E   01C0                     	CLRR R0
575F   0240 012C                	MVO R0,var_C
0x5761                          T17:
                                	;[207] 				IF x(c) THEN x(c) = x(c) - 1
                                	SRCFILE "samples/pumpkin_master.bas",207
5761   02BB 0149                	MVII #array_X,R3
5763   02C3 012C                	ADD var_C,R3
5765   0298                     	MVI@ R3,R0
5766   0080                     	TSTR R0
5767   0204 0003                	BEQ T18
5769   0298                     	MVI@ R3,R0
576A   0010                     	DECR R0
576B   0258                     	MVO@ R0,R3
0x576C                          T18:
                                	;[208] 			NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",208
576C   0280 012C                	MVI var_C,R0
576E   0008                     	INCR R0
576F   0240 012C                	MVO R0,var_C
5771   0378 0002                	CMPI #2,R0
5773   0226 0013                	BLE T17
                                	;[209] 			' House at right side
                                	SRCFILE "samples/pumpkin_master.bas",209
                                	;[210] 			FOR c = 3 TO 5
                                	SRCFILE "samples/pumpkin_master.bas",210
5775   02B8 0003                	MVII #3,R0
5777   0240 012C                	MVO R0,var_C
0x5779                          T19:
                                	;[211] 				IF x(c) < 168 THEN x(c) = x(c) + 1
                                	SRCFILE "samples/pumpkin_master.bas",211
5779   02BB 0149                	MVII #array_X,R3
577B   02C3 012C                	ADD var_C,R3
577D   0298                     	MVI@ R3,R0
577E   0378 00A8                	CMPI #168,R0
5780   020D 0003                	BGE T20
5782   0298                     	MVI@ R3,R0
5783   0008                     	INCR R0
5784   0258                     	MVO@ R0,R3
0x5785                          T20:
                                	;[212] 			NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",212
5785   0280 012C                	MVI var_C,R0
5787   0008                     	INCR R0
5788   0240 012C                	MVO R0,var_C
578A   0378 0005                	CMPI #5,R0
578C   0226 0014                	BLE T19
                                	;[213] 			' Update sprites
                                	SRCFILE "samples/pumpkin_master.bas",213
                                	;[214] 			FOR c = 0 TO 6
                                	SRCFILE "samples/pumpkin_master.bas",214
578E   01C0                     	CLRR R0
578F   0240 012C                	MVO R0,var_C
0x5791                          T21:
                                	;[215] 				SPRITE c, $0300 + x(c), $0080 + py, $1801 + 2 * 8
                                	SRCFILE "samples/pumpkin_master.bas",215
5791   02B8 0348                	MVII #Q1,R0
5793   02C0 012C                	ADD var_C,R0
5795   0084                     	MOVR R0,R4
5796   02BB 0149                	MVII #array_X,R3
5798   02C3 012C                	ADD var_C,R3
579A   0298                     	MVI@ R3,R0
579B   02F8 0300                	ADDI #768,R0
579D   0260                     	MVO@ R0,R4
579E   0280 0137                	MVI var_PY,R0
57A0   02F8 0080                	ADDI #128,R0
57A2   02FC 0007                	ADDI #7,R4
57A4   0260                     	MVO@ R0,R4
57A5   02B8 1811                	MVII #6161,R0
57A7   02FC 0007                	ADDI #7,R4
57A9   0260                     	MVO@ R0,R4
                                	;[216] 			NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",216
57AA   0280 012C                	MVI var_C,R0
57AC   0008                     	INCR R0
57AD   0240 012C                	MVO R0,var_C
57AF   0378 0006                	CMPI #6,R0
57B1   0226 0021                	BLE T21
                                	;[217] 			WAIT
                                	SRCFILE "samples/pumpkin_master.bas",217
57B3   0004 01F4 01E2           	CALL _wait
                                	;[218] 		NEXT d
                                	SRCFILE "samples/pumpkin_master.bas",218
57B6   0280 012E                	MVI var_D,R0
57B8   0008                     	INCR R0
57B9   0240 012E                	MVO R0,var_D
57BB   0378 0078                	CMPI #120,R0
57BD   0226 0060                	BLE T16
                                	;[219] 		GOSUB wait_and_clean
                                	SRCFILE "samples/pumpkin_master.bas",219
57BF   0004 015C 02AF           	CALL label_WAIT_AND_CLEAN
                                	;[220] 
                                	SRCFILE "samples/pumpkin_master.bas",220
                                	;[221] 		PRINT AT 63 COLOR 6,"Cowards! I'll"
                                	SRCFILE "samples/pumpkin_master.bas",221
57C2   02B8 023F                	MVII #575,R0
57C4   0240 0346                	MVO R0,_screen
57C6   02B8 0006                	MVII #6,R0
57C8   0240 0347                	MVO R0,_color
57CA   0284 0346                	MVI _screen,R4
57CC   02B8 0118                	MVII #280,R0
57CE   03C0 0347                	XOR _color,R0
57D0   0260                     	MVO@ R0,R4
57D1   03F8 0360                	XORI #864,R0
57D3   0260                     	MVO@ R0,R4
57D4   03F8 00C0                	XORI #192,R0
57D6   0260                     	MVO@ R0,R4
57D7   03F8 00B0                	XORI #176,R0
57D9   0260                     	MVO@ R0,R4
57DA   03F8 0098                	XORI #152,R0
57DC   0260                     	MVO@ R0,R4
57DD   03F8 00B0                	XORI #176,R0
57DF   0260                     	MVO@ R0,R4
57E0   03F8 00B8                	XORI #184,R0
57E2   0260                     	MVO@ R0,R4
57E3   03F8 0290                	XORI #656,R0
57E5   0260                     	MVO@ R0,R4
57E6   03F8 0008                	XORI #8,R0
57E8   0260                     	MVO@ R0,R4
57E9   03F8 0148                	XORI #328,R0
57EB   0260                     	MVO@ R0,R4
57EC   03F8 0170                	XORI #368,R0
57EE   0260                     	MVO@ R0,R4
57EF   03F8 0258                	XORI #600,R0
57F1   0260                     	MVO@ R0,R4
57F2   0260                     	MVO@ R0,R4
57F3   0034                     	NOP
57F4   0244 0346                	MVO R4,_screen
                                	;[222] 		PRINT AT 83,"use my homebrew"
                                	SRCFILE "samples/pumpkin_master.bas",222
57F6   02B8 0253                	MVII #595,R0
57F8   0240 0346                	MVO R0,_screen
57FA   0084                     	MOVR R0,R4
57FB   02B8 02A8                	MVII #680,R0
57FD   03C0 0347                	XOR _color,R0
57FF   0260                     	MVO@ R0,R4
5800   03F8 0030                	XORI #48,R0
5802   0260                     	MVO@ R0,R4
5803   03F8 00B0                	XORI #176,R0
5805   0260                     	MVO@ R0,R4
5806   03F8 0228                	XORI #552,R0
5808   0260                     	MVO@ R0,R4
5809   03F8 0268                	XORI #616,R0
580B   0260                     	MVO@ R0,R4
580C   03F8 00A0                	XORI #160,R0
580E   0260                     	MVO@ R0,R4
580F   03F8 02C8                	XORI #712,R0
5811   0260                     	MVO@ R0,R4
5812   03F8 0240                	XORI #576,R0
5814   0260                     	MVO@ R0,R4
5815   03F8 0038                	XORI #56,R0
5817   0260                     	MVO@ R0,R4
5818   03F8 0010                	XORI #16,R0
581A   0260                     	MVO@ R0,R4
581B   03F8 0040                	XORI #64,R0
581D   0260                     	MVO@ R0,R4
581E   03F8 0038                	XORI #56,R0
5820   0260                     	MVO@ R0,R4
5821   03F8 0080                	XORI #128,R0
5823   0260                     	MVO@ R0,R4
5824   03F8 00B8                	XORI #184,R0
5826   0260                     	MVO@ R0,R4
5827   03F8 0090                	XORI #144,R0
5829   0260                     	MVO@ R0,R4
582A   0244 0346                	MVO R4,_screen
                                	;[223] 		PRINT AT 103,"proton cannon."
                                	SRCFILE "samples/pumpkin_master.bas",223
582C   02B8 0267                	MVII #615,R0
582E   0240 0346                	MVO R0,_screen
5830   0084                     	MOVR R0,R4
5831   02B8 0280                	MVII #640,R0
5833   03C0 0347                	XOR _color,R0
5835   0260                     	MVO@ R0,R4
5836   03F8 0010                	XORI #16,R0
5838   0260                     	MVO@ R0,R4
5839   03F8 00E8                	XORI #232,R0
583B   0260                     	MVO@ R0,R4
583C   03F8 00D8                	XORI #216,R0
583E   0260                     	MVO@ R0,R4
583F   03F8 00D8                	XORI #216,R0
5841   0260                     	MVO@ R0,R4
5842   03F8 0008                	XORI #8,R0
5844   0260                     	MVO@ R0,R4
5845   03F8 0270                	XORI #624,R0
5847   0260                     	MVO@ R0,R4
5848   03F8 0218                	XORI #536,R0
584A   0260                     	MVO@ R0,R4
584B   03F8 0010                	XORI #16,R0
584D   0260                     	MVO@ R0,R4
584E   03F8 0078                	XORI #120,R0
5850   0260                     	MVO@ R0,R4
5851   0260                     	MVO@ R0,R4
5852   03F8 0008                	XORI #8,R0
5854   0260                     	MVO@ R0,R4
5855   03F8 0008                	XORI #8,R0
5857   0260                     	MVO@ R0,R4
5858   03F8 0200                	XORI #512,R0
585A   0260                     	MVO@ R0,R4
585B   0244 0346                	MVO R4,_screen
                                	;[224] 		GOSUB wait_and_clean
                                	SRCFILE "samples/pumpkin_master.bas",224
585D   0004 015C 02AF           	CALL label_WAIT_AND_CLEAN
                                	;[225] 
                                	SRCFILE "samples/pumpkin_master.bas",225
                                	;[226] 		' Clean pumpkins array
                                	SRCFILE "samples/pumpkin_master.bas",226
                                	;[227] 		FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",227
5860   01C0                     	CLRR R0
5861   0240 012C                	MVO R0,var_C
0x5863                          T22:
                                	;[228] 			x(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",228
5863   01C0                     	CLRR R0
5864   02BB 0149                	MVII #array_X,R3
5866   02C3 012C                	ADD var_C,R3
5868   0258                     	MVO@ R0,R3
                                	;[229] 			y(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",229
5869   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
586B   0258                     	MVO@ R0,R3
                                	;[230] 			s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",230
586C   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
586E   0258                     	MVO@ R0,R3
                                	;[231] 		NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",231
586F   0280 012C                	MVI var_C,R0
5871   0008                     	INCR R0
5872   0240 012C                	MVO R0,var_C
5874   0378 0005                	CMPI #5,R0
5876   0226 0014                	BLE T22
                                	;[232] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",232
0x5878                          T12:
                                	;[233] 
                                	SRCFILE "samples/pumpkin_master.bas",233
                                	;[234] 	'
                                	SRCFILE "samples/pumpkin_master.bas",234
                                	;[235] 	' Game loop for pumpkins waves
                                	SRCFILE "samples/pumpkin_master.bas",235
                                	;[236] 	'
                                	SRCFILE "samples/pumpkin_master.bas",236
                                	;[237] game_loop:
                                	SRCFILE "samples/pumpkin_master.bas",237
                                	; GAME_LOOP
0x5878                          label_GAME_LOOP:	;[238] 
                                	SRCFILE "samples/pumpkin_master.bas",238
                                	;[239] 	'
                                	SRCFILE "samples/pumpkin_master.bas",239
                                	;[240] 	' Update pumpkins and drop bullets
                                	SRCFILE "samples/pumpkin_master.bas",240
                                	;[241] 	'
                                	SRCFILE "samples/pumpkin_master.bas",241
                                	;[242] 	IF drop_bullet THEN	' Not yet time for a bullet?
                                	SRCFILE "samples/pumpkin_master.bas",242
5878   0280 012F                	MVI var_DROP_BULLET,R0
587A   0080                     	TSTR R0
587B   0204 0009                	BEQ T23
                                	;[243] 		drop_bullet = drop_bullet - 1
                                	SRCFILE "samples/pumpkin_master.bas",243
587D   0010                     	DECR R0
587E   0240 012F                	MVO R0,var_DROP_BULLET
                                	;[244] 		d = PUMPKINS
                                	SRCFILE "samples/pumpkin_master.bas",244
5880   02B8 0006                	MVII #6,R0
5882   0240 012E                	MVO R0,var_D
                                	;[245] 	ELSE
                                	SRCFILE "samples/pumpkin_master.bas",245
5884   0200 0023                	B T24
0x5886                          T23:
                                	;[246] 		c = level
                                	SRCFILE "samples/pumpkin_master.bas",246
5886   0280 0132                	MVI var_LEVEL,R0
5888   0240 012C                	MVO R0,var_C
                                	;[247] 		IF c > 10 THEN c = 10
                                	SRCFILE "samples/pumpkin_master.bas",247
588A   0280 012C                	MVI var_C,R0
588C   0378 000A                	CMPI #10,R0
588E   0206 0004                	BLE T25
5890   02B8 000A                	MVII #10,R0
5892   0240 012C                	MVO R0,var_C
0x5894                          T25:
                                	;[248] 		drop_bullet = 15 - c + RAND(16)	' Time for next bullet
                                	SRCFILE "samples/pumpkin_master.bas",248
5894   02B8 000F                	MVII #15,R0
5896   0300 012C                	SUB var_C,R0
5898   0281 0104                	MVI _rand,R1
589A   03B9 000F                	ANDI #15,R1
589C   00C8                     	ADDR R1,R0
589D   0240 012F                	MVO R0,var_DROP_BULLET
                                	;[249] 		d = RAND(PUMPKINS)	' Choose a random pumpkin that will shot
                                	SRCFILE "samples/pumpkin_master.bas",249
589F   02B8 0006                	MVII #6,R0
58A1   0281 0104                	MVI _rand,R1
58A3   0004 01FC 028B           	CALL qs_mpy8
58A6   0040                     	SWAP R0
58A7   0240 012E                	MVO R0,var_D
                                	;[250] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",250
0x58A9                          T24:
                                	;[251] 
                                	SRCFILE "samples/pumpkin_master.bas",251
                                	;[252] 	'
                                	SRCFILE "samples/pumpkin_master.bas",252
                                	;[253] 	' Check also if no pumpkins are shown (in order to trigger another wave)
                                	SRCFILE "samples/pumpkin_master.bas",253
                                	;[254] 	'
                                	SRCFILE "samples/pumpkin_master.bas",254
                                	;[255] 	valid = 0
                                	SRCFILE "samples/pumpkin_master.bas",255
58A9   01C0                     	CLRR R0
58AA   0240 013B                	MVO R0,var_VALID
                                	;[256] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",256
58AC   0240 012C                	MVO R0,var_C
0x58AE                          T26:
                                	;[257] 		IF y(c) THEN
                                	SRCFILE "samples/pumpkin_master.bas",257
58AE   02BB 014F                	MVII #array_Y,R3
58B0   02C3 012C                	ADD var_C,R3
58B2   0298                     	MVI@ R3,R0
58B3   0080                     	TSTR R0
58B4   0204 0084                	BEQ T27
                                	;[258] 			IF s(c) THEN
                                	SRCFILE "samples/pumpkin_master.bas",258
58B6   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
58B8   0298                     	MVI@ R3,R0
58B9   0080                     	TSTR R0
58BA   0204 001A                	BEQ T28
                                	;[259] 				SPRITE c, $0300 + x(c), $0080 + y(c), $1802 + 0 * 8
                                	SRCFILE "samples/pumpkin_master.bas",259
58BC   02B8 0348                	MVII #Q1,R0
58BE   02C0 012C                	ADD var_C,R0
58C0   0084                     	MOVR R0,R4
58C1   02FB 0006                	ADDI #(array_X-array_S) AND $FFFF,R3
58C3   0298                     	MVI@ R3,R0
58C4   02F8 0300                	ADDI #768,R0
58C6   0260                     	MVO@ R0,R4
58C7   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
58C9   0298                     	MVI@ R3,R0
58CA   02F8 0080                	ADDI #128,R0
58CC   02FC 0007                	ADDI #7,R4
58CE   0260                     	MVO@ R0,R4
58CF   02B8 1802                	MVII #6146,R0
58D1   02FC 0007                	ADDI #7,R4
58D3   0260                     	MVO@ R0,R4
                                	;[260] 			ELSE
                                	SRCFILE "samples/pumpkin_master.bas",260
58D4   0200 0026                	B T29
0x58D6                          T28:
                                	;[261] 				SPRITE c, $0300 + x(c), $0080 + y(c), $1802 + 6 * 8
                                	SRCFILE "samples/pumpkin_master.bas",261
58D6   02B8 0348                	MVII #Q1,R0
58D8   02C0 012C                	ADD var_C,R0
58DA   0084                     	MOVR R0,R4
58DB   02BB 0149                	MVII #array_X,R3
58DD   02C3 012C                	ADD var_C,R3
58DF   0298                     	MVI@ R3,R0
58E0   02F8 0300                	ADDI #768,R0
58E2   0260                     	MVO@ R0,R4
58E3   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
58E5   0298                     	MVI@ R3,R0
58E6   02F8 0080                	ADDI #128,R0
58E8   02FC 0007                	ADDI #7,R4
58EA   0260                     	MVO@ R0,R4
58EB   02B8 1832                	MVII #6194,R0
58ED   02FC 0007                	ADDI #7,R4
58EF   0260                     	MVO@ R0,R4
                                	;[262] 				z(c) = z(c) - 1
                                	SRCFILE "samples/pumpkin_master.bas",262
58F0   02FB 0006                	ADDI #(array_Z-array_Y) AND $FFFF,R3
58F2   0298                     	MVI@ R3,R0
58F3   0010                     	DECR R0
58F4   0258                     	MVO@ R0,R3
                                	;[263] 				IF z(c) = 0 THEN y(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",263
58F5   0298                     	MVI@ R3,R0
58F6   0080                     	TSTR R0
58F7   020C 0003                	BNE T30
58F9   02FB FFFA                	ADDI #(array_Y-array_Z) AND $FFFF,R3
58FB   0258                     	MVO@ R0,R3
0x58FC                          T30:
                                	;[264] 			END IF
                                	SRCFILE "samples/pumpkin_master.bas",264
0x58FC                          T29:
                                	;[265] 			valid = 1
                                	SRCFILE "samples/pumpkin_master.bas",265
58FC   02B8 0001                	MVII #1,R0
58FE   0240 013B                	MVO R0,var_VALID
                                	;[266] 			' Shot if possible
                                	SRCFILE "samples/pumpkin_master.bas",266
                                	;[267] 			IF c = d THEN	' Pumpkin can shot
                                	SRCFILE "samples/pumpkin_master.bas",267
5900   0280 012C                	MVI var_C,R0
5902   0340 012E                	CMP var_D,R0
5904   020C 0032                	BNE T31
                                	;[268] 				IF b(c) = 0 THEN	' Free space for shot
                                	SRCFILE "samples/pumpkin_master.bas",268
5906   02BB 013D                	MVII #array_B,R3
5908   00C3                     	ADDR R0,R3
5909   0298                     	MVI@ R3,R0
590A   0080                     	TSTR R0
590B   020C 002B                	BNE T32
                                	;[269] 					IF x(c) > 7 THEN	' Pumpkin inside visible screen
                                	SRCFILE "samples/pumpkin_master.bas",269
590D   02FB 000C                	ADDI #(array_X-array_B) AND $FFFF,R3
590F   0298                     	MVI@ R3,R0
5910   0378 0007                	CMPI #7,R0
5912   0206 0024                	BLE T33
                                	;[270] 						IF x(c) < 168 THEN
                                	SRCFILE "samples/pumpkin_master.bas",270
5914   0298                     	MVI@ R3,R0
5915   0378 00A8                	CMPI #168,R0
5917   020D 001F                	BGE T34
                                	;[271] 							b(c) = x(c) / 8 + (y(c) / 8) * 20 - 21
                                	SRCFILE "samples/pumpkin_master.bas",271
5919   0298                     	MVI@ R3,R0
591A   0064                     	SLR R0,2
591B   0060                     	SLR R0,1
591C   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
591E   0299                     	MVI@ R3,R1
591F   0065                     	SLR R1,2
5920   0061                     	SLR R1,1
                                ;	MULT R1,R4,20
                                	;
5921   004D                                     SLL     R1,  2
5922   008C                                     MOVR    R1,  R4
5923   004D                                     SLL     R1,  2
5924   00E1                                     ADDR    R4,  R1
5925   00C8                     	ADDR R1,R0
5926   0338 0015                	SUBI #21,R0
5928   02FB FFEE                	ADDI #(array_B-array_Y) AND $FFFF,R3
592A   0258                     	MVO@ R0,R3
                                	;[272] 							IF sound_effect < 3 THEN sound_effect = 2: sound_state = 0
                                	SRCFILE "samples/pumpkin_master.bas",272
592B   0280 0138                	MVI var_SOUND_EFFECT,R0
592D   0378 0003                	CMPI #3,R0
592F   020D 0007                	BGE T35
5931   02B8 0002                	MVII #2,R0
5933   0240 0138                	MVO R0,var_SOUND_EFFECT
5935   01C0                     	CLRR R0
5936   0240 0139                	MVO R0,var_SOUND_STATE
0x5938                          T35:
                                	;[273] 						END IF
                                	SRCFILE "samples/pumpkin_master.bas",273
0x5938                          T34:
                                	;[274] 					END IF
                                	SRCFILE "samples/pumpkin_master.bas",274
0x5938                          T33:
                                	;[275] 				END IF
                                	SRCFILE "samples/pumpkin_master.bas",275
0x5938                          T32:
                                	;[276] 			END IF
                                	SRCFILE "samples/pumpkin_master.bas",276
0x5938                          T31:
                                	;[277] 		ELSE
                                	SRCFILE "samples/pumpkin_master.bas",277
5938   0200 0007                	B T36
0x593A                          T27:
                                	;[278] 			SPRITE c, 0
                                	SRCFILE "samples/pumpkin_master.bas",278
593A   02B8 0348                	MVII #Q1,R0
593C   02C0 012C                	ADD var_C,R0
593E   0084                     	MOVR R0,R4
593F   01C0                     	CLRR R0
5940   0260                     	MVO@ R0,R4
                                	;[279] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",279
0x5941                          T36:
                                	;[280] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",280
5941   0280 012C                	MVI var_C,R0
5943   0008                     	INCR R0
5944   0240 012C                	MVO R0,var_C
5946   0378 0005                	CMPI #5,R0
5948   0226 009B                	BLE T26
                                	;[281] 
                                	SRCFILE "samples/pumpkin_master.bas",281
                                	;[282] 	'
                                	SRCFILE "samples/pumpkin_master.bas",282
                                	;[283] 	' Update player house and bullet
                                	SRCFILE "samples/pumpkin_master.bas",283
                                	;[284] 	'
                                	SRCFILE "samples/pumpkin_master.bas",284
                                	;[285] 	GOSUB update_player
                                	SRCFILE "samples/pumpkin_master.bas",285
594A   0004 015C 0209           	CALL label_UPDATE_PLAYER
                                	;[286] 	MODE 0,0,0,0,0:BORDER 0
                                	SRCFILE "samples/pumpkin_master.bas",286
594D   01C0                     	CLRR R0
594E   0240 0347                	MVO R0,_color
5950   02B8 0002                	MVII #2,R0
5952   0240 0109                	MVO R0,_mode_select
5954   01C0                     	CLRR R0
5955   0240 010A                	MVO R0,_border_color
                                	;[287] 
                                	SRCFILE "samples/pumpkin_master.bas",287
                                	;[288] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",288
5957   0004 01F4 01E2           	CALL _wait
                                	;[289] 	' Check if player is touched by background (bullet)
                                	SRCFILE "samples/pumpkin_master.bas",289
                                	;[290] 	IF COL7 AND $0100 THEN	GOTO player_touched
                                	SRCFILE "samples/pumpkin_master.bas",290
595A   0280 033E                	MVI _col7,R0
595C   03B8 0100                	ANDI #256,R0
595E   020C 02B9                	BNE label_PLAYER_TOUCHED
                                	;[291] 	' Check if player bullet touches pumpkin
                                	SRCFILE "samples/pumpkin_master.bas",291
                                	;[292] 	IF COL6 AND $003F THEN
                                	SRCFILE "samples/pumpkin_master.bas",292
5960   0280 033D                	MVI _col6,R0
5962   03B8 003F                	ANDI #63,R0
5964   0204 006B                	BEQ T38
                                	;[293] 		' Hardware saves us of tedious collision checking
                                	SRCFILE "samples/pumpkin_master.bas",293
                                	;[294] 		c = 255
                                	SRCFILE "samples/pumpkin_master.bas",294
5966   02B8 00FF                	MVII #255,R0
5968   0240 012C                	MVO R0,var_C
                                	;[295] 		IF COL6 AND $0001 THEN c = 0
                                	SRCFILE "samples/pumpkin_master.bas",295
596A   0280 033D                	MVI _col6,R0
596C   03B8 0001                	ANDI #1,R0
596E   0204 0003                	BEQ T39
5970   01C0                     	CLRR R0
5971   0240 012C                	MVO R0,var_C
0x5973                          T39:
                                	;[296] 		IF COL6 AND $0002 THEN c = 1
                                	SRCFILE "samples/pumpkin_master.bas",296
5973   0280 033D                	MVI _col6,R0
5975   03B8 0002                	ANDI #2,R0
5977   0204 0004                	BEQ T40
5979   02B8 0001                	MVII #1,R0
597B   0240 012C                	MVO R0,var_C
0x597D                          T40:
                                	;[297] 		IF COL6 AND $0004 THEN c = 2
                                	SRCFILE "samples/pumpkin_master.bas",297
597D   0280 033D                	MVI _col6,R0
597F   03B8 0004                	ANDI #4,R0
5981   0204 0004                	BEQ T41
5983   02B8 0002                	MVII #2,R0
5985   0240 012C                	MVO R0,var_C
0x5987                          T41:
                                	;[298] 		IF COL6 AND $0008 THEN c = 3
                                	SRCFILE "samples/pumpkin_master.bas",298
5987   0280 033D                	MVI _col6,R0
5989   03B8 0008                	ANDI #8,R0
598B   0204 0004                	BEQ T42
598D   02B8 0003                	MVII #3,R0
598F   0240 012C                	MVO R0,var_C
0x5991                          T42:
                                	;[299] 		IF COL6 AND $0010 THEN c = 4
                                	SRCFILE "samples/pumpkin_master.bas",299
5991   0280 033D                	MVI _col6,R0
5993   03B8 0010                	ANDI #16,R0
5995   0204 0004                	BEQ T43
5997   02B8 0004                	MVII #4,R0
5999   0240 012C                	MVO R0,var_C
0x599B                          T43:
                                	;[300] 		IF COL6 AND $0020 THEN c = 5
                                	SRCFILE "samples/pumpkin_master.bas",300
599B   0280 033D                	MVI _col6,R0
599D   03B8 0020                	ANDI #32,R0
599F   0204 0004                	BEQ T44
59A1   02B8 0005                	MVII #5,R0
59A3   0240 012C                	MVO R0,var_C
0x59A5                          T44:
                                	;[301] 		IF c < 6 THEN	' Pumpkin touched?
                                	SRCFILE "samples/pumpkin_master.bas",301
59A5   0280 012C                	MVI var_C,R0
59A7   0378 0006                	CMPI #6,R0
59A9   020D 0026                	BGE T45
                                	;[302] 			IF y(c) THEN	' Pumpkin alive?
                                	SRCFILE "samples/pumpkin_master.bas",302
59AB   02BB 014F                	MVII #array_Y,R3
59AD   00C3                     	ADDR R0,R3
59AE   0298                     	MVI@ R3,R0
59AF   0080                     	TSTR R0
59B0   0204 001F                	BEQ T46
                                	;[303] 				IF s(c) THEN	' Pumpkin moving?
                                	SRCFILE "samples/pumpkin_master.bas",303
59B2   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
59B4   0298                     	MVI@ R3,R0
59B5   0080                     	TSTR R0
59B6   0204 0019                	BEQ T47
                                	;[304] 					s(c) = 0	' Cease movement
                                	SRCFILE "samples/pumpkin_master.bas",304
59B8   01C0                     	CLRR R0
59B9   0258                     	MVO@ R0,R3
                                	;[305] 					z(c) = 8	' Start explosion timing
                                	SRCFILE "samples/pumpkin_master.bas",305
59BA   02B8 0008                	MVII #8,R0
59BC   02FB 0012                	ADDI #(array_Z-array_S) AND $FFFF,R3
59BE   0258                     	MVO@ R0,R3
                                	;[306] 					by = 0
                                	SRCFILE "samples/pumpkin_master.bas",306
59BF   01C0                     	CLRR R0
59C0   0240 012B                	MVO R0,var_BY
                                	;[307] 					#score = #score + 1
                                	SRCFILE "samples/pumpkin_master.bas",307
59C2   0280 8041                	MVI var_&SCORE,R0
59C4   0008                     	INCR R0
59C5   0240 8041                	MVO R0,var_&SCORE
                                	;[308] 					GOSUB update_score
                                	SRCFILE "samples/pumpkin_master.bas",308
59C7   0004 015C 0233           	CALL label_UPDATE_SCORE
                                	;[309] 					sound_effect = 3: sound_state = 0
                                	SRCFILE "samples/pumpkin_master.bas",309
59CA   02B8 0003                	MVII #3,R0
59CC   0240 0138                	MVO R0,var_SOUND_EFFECT
59CE   01C0                     	CLRR R0
59CF   0240 0139                	MVO R0,var_SOUND_STATE
                                	;[310] 				END IF
                                	SRCFILE "samples/pumpkin_master.bas",310
0x59D1                          T47:
                                	;[311] 			END IF
                                	SRCFILE "samples/pumpkin_master.bas",311
0x59D1                          T46:
                                	;[312] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",312
0x59D1                          T45:
                                	;[313] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",313
0x59D1                          T38:
                                	;[314] 
                                	SRCFILE "samples/pumpkin_master.bas",314
                                	;[315] 	'
                                	SRCFILE "samples/pumpkin_master.bas",315
                                	;[316] 	' Move pumpkins bullets in 4px steps.
                                	SRCFILE "samples/pumpkin_master.bas",316
                                	;[317] 	'
                                	SRCFILE "samples/pumpkin_master.bas",317
                                	;[318] 	next_bullet = (next_bullet + 1) AND 3
                                	SRCFILE "samples/pumpkin_master.bas",318
59D1   0280 0134                	MVI var_NEXT_BULLET,R0
59D3   0008                     	INCR R0
59D4   03B8 0003                	ANDI #3,R0
59D6   0240 0134                	MVO R0,var_NEXT_BULLET
                                	;[319] 	IF next_bullet = 0 THEN
                                	SRCFILE "samples/pumpkin_master.bas",319
59D8   0280 0134                	MVI var_NEXT_BULLET,R0
59DA   0080                     	TSTR R0
59DB   020C 0027                	BNE T48
                                	;[320] 		FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",320
59DD   0240 012C                	MVO R0,var_C
0x59DF                          T49:
                                	;[321] 			d = b(c)
                                	SRCFILE "samples/pumpkin_master.bas",321
59DF   02BB 013D                	MVII #array_B,R3
59E1   02C3 012C                	ADD var_C,R3
59E3   0298                     	MVI@ R3,R0
59E4   0240 012E                	MVO R0,var_D
                                	;[322] 			IF d THEN
                                	SRCFILE "samples/pumpkin_master.bas",322
59E6   0280 012E                	MVI var_D,R0
59E8   0080                     	TSTR R0
59E9   0204 000E                	BEQ T50
                                	;[323] 				#backtab(d) = $0802 + 5 * 8
                                	SRCFILE "samples/pumpkin_master.bas",323
59EB   02B8 082A                	MVII #2090,R0
59ED   02BB 0200                	MVII #Q2,R3
59EF   02C3 012E                	ADD var_D,R3
59F1   0258                     	MVO@ R0,R3
                                	;[324] 				b(c) = d
                                	SRCFILE "samples/pumpkin_master.bas",324
59F2   0280 012E                	MVI var_D,R0
59F4   02BB 013D                	MVII #array_B,R3
59F6   02C3 012C                	ADD var_C,R3
59F8   0258                     	MVO@ R0,R3
                                	;[325] 			END IF
                                	SRCFILE "samples/pumpkin_master.bas",325
0x59F9                          T50:
                                	;[326] 		NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",326
59F9   0280 012C                	MVI var_C,R0
59FB   0008                     	INCR R0
59FC   0240 012C                	MVO R0,var_C
59FE   0378 0005                	CMPI #5,R0
5A00   0226 0022                	BLE T49
                                	;[327] 	ELSEIF next_bullet = 2 THEN
                                	SRCFILE "samples/pumpkin_master.bas",327
5A02   0200 0043                	B T51
0x5A04                          T48:
5A04   0280 0134                	MVI var_NEXT_BULLET,R0
5A06   0378 0002                	CMPI #2,R0
5A08   020C 003D                	BNE T52
                                	;[328] 		FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",328
5A0A   01C0                     	CLRR R0
5A0B   0240 012C                	MVO R0,var_C
0x5A0D                          T53:
                                	;[329] 			d = b(c)
                                	SRCFILE "samples/pumpkin_master.bas",329
5A0D   02BB 013D                	MVII #array_B,R3
5A0F   02C3 012C                	ADD var_C,R3
5A11   0298                     	MVI@ R3,R0
5A12   0240 012E                	MVO R0,var_D
                                	;[330] 			IF d THEN
                                	SRCFILE "samples/pumpkin_master.bas",330
5A14   0280 012E                	MVI var_D,R0
5A16   0080                     	TSTR R0
5A17   0204 0025                	BEQ T54
                                	;[331] 				#backtab(d) = 0
                                	SRCFILE "samples/pumpkin_master.bas",331
5A19   01C0                     	CLRR R0
5A1A   02BB 0200                	MVII #Q2,R3
5A1C   02C3 012E                	ADD var_D,R3
5A1E   0258                     	MVO@ R0,R3
                                	;[332] 				IF d >= 220 THEN
                                	SRCFILE "samples/pumpkin_master.bas",332
5A1F   0280 012E                	MVI var_D,R0
5A21   0378 00DC                	CMPI #220,R0
5A23   0205 0005                	BLT T55
                                	;[333] 					d = 0
                                	SRCFILE "samples/pumpkin_master.bas",333
5A25   01C0                     	CLRR R0
5A26   0240 012E                	MVO R0,var_D
                                	;[334] 				ELSE
                                	SRCFILE "samples/pumpkin_master.bas",334
5A28   0200 000D                	B T56
0x5A2A                          T55:
                                	;[335] 					d = d + 20
                                	SRCFILE "samples/pumpkin_master.bas",335
5A2A   0280 012E                	MVI var_D,R0
5A2C   02F8 0014                	ADDI #20,R0
5A2E   0240 012E                	MVO R0,var_D
                                	;[336] 					#backtab(d) = $0802 + 4 * 8
                                	SRCFILE "samples/pumpkin_master.bas",336
5A30   02B8 0822                	MVII #2082,R0
5A32   02BB 0200                	MVII #Q2,R3
5A34   02C3 012E                	ADD var_D,R3
5A36   0258                     	MVO@ R0,R3
                                	;[337] 				END IF
                                	SRCFILE "samples/pumpkin_master.bas",337
0x5A37                          T56:
                                	;[338] 				b(c) = d
                                	SRCFILE "samples/pumpkin_master.bas",338
5A37   0280 012E                	MVI var_D,R0
5A39   02BB 013D                	MVII #array_B,R3
5A3B   02C3 012C                	ADD var_C,R3
5A3D   0258                     	MVO@ R0,R3
                                	;[339] 			END IF
                                	SRCFILE "samples/pumpkin_master.bas",339
0x5A3E                          T54:
                                	;[340] 		NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",340
5A3E   0280 012C                	MVI var_C,R0
5A40   0008                     	INCR R0
5A41   0240 012C                	MVO R0,var_C
5A43   0378 0005                	CMPI #5,R0
5A45   0226 0039                	BLE T53
                                	;[341] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",341
0x5A47                          T51:
0x5A47                          T52:
                                	;[342] 
                                	SRCFILE "samples/pumpkin_master.bas",342
                                	;[343] 	'
                                	SRCFILE "samples/pumpkin_master.bas",343
                                	;[344] 	' Start a new wave of pumpkins, pumpkin boss or move pumpkins
                                	SRCFILE "samples/pumpkin_master.bas",344
                                	;[345] 	'
                                	SRCFILE "samples/pumpkin_master.bas",345
                                	;[346] 	IF next_wave THEN	' Waiting for next wave
                                	SRCFILE "samples/pumpkin_master.bas",346
5A47   0280 0135                	MVI var_NEXT_WAVE,R0
5A49   0080                     	TSTR R0
5A4A   0204 001F                	BEQ T57
                                	;[347] 		next_wave = next_wave - 1
                                	SRCFILE "samples/pumpkin_master.bas",347
5A4C   0010                     	DECR R0
5A4D   0240 0135                	MVO R0,var_NEXT_WAVE
                                	;[348] 		IF next_wave = 0 THEN	' Start it?
                                	SRCFILE "samples/pumpkin_master.bas",348
5A4F   0280 0135                	MVI var_NEXT_WAVE,R0
5A51   0080                     	TSTR R0
5A52   020C 0015                	BNE T58
                                	;[349] 			ON wave GOSUB start_0, start_1, start_2, start_3, start_4, start_5, start_6, start_7, start_8, start_9
                                	SRCFILE "samples/pumpkin_master.bas",349
5A54   0281 013C                	MVI var_WAVE,R1
5A56   0379 000A                	CMPI #10,R1
5A58   0201 000F                	BC T60
5A5A   02BD 5A69                	MVII #T60,R5
5A5C   02F9 5A5F                	ADDI #T59,R1
5A5E   028F                     	MVI@ R1,PC
0x5A5F                          T59:
5A5F   5F1A                     	DECLE label_START_0
5A60   5F9F                     	DECLE label_START_1
5A61   6022                     	DECLE label_START_2
5A62   6086                     	DECLE label_START_3
5A63   60EC                     	DECLE label_START_4
5A64   617C                     	DECLE label_START_5
5A65   61D5                     	DECLE label_START_6
5A66   6260                     	DECLE label_START_7
5A67   630F                     	DECLE label_START_8
5A68   63CE                     	DECLE label_START_9
0x5A69                          T60:
                                	;[350] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",350
0x5A69                          T58:
                                	;[351] 	ELSEIF valid = 0 THEN	' No pumpkins alive?
                                	SRCFILE "samples/pumpkin_master.bas",351
5A69   0200 008C                	B T61
0x5A6B                          T57:
5A6B   0280 013B                	MVI var_VALID,R0
5A6D   0080                     	TSTR R0
5A6E   020C 0072                	BNE T62
                                	;[352] 		IF sublevel = 9 THEN	' Last wave?
                                	SRCFILE "samples/pumpkin_master.bas",352
5A70   0280 013A                	MVI var_SUBLEVEL,R0
5A72   0378 0009                	CMPI #9,R0
5A74   020C 0067                	BNE T63
                                	;[353] 
                                	SRCFILE "samples/pumpkin_master.bas",353
                                	;[354] 			'
                                	SRCFILE "samples/pumpkin_master.bas",354
                                	;[355] 			' Start boss wave
                                	SRCFILE "samples/pumpkin_master.bas",355
                                	;[356] 			'
                                	SRCFILE "samples/pumpkin_master.bas",356
                                	;[357] 			sublevel = 10
                                	SRCFILE "samples/pumpkin_master.bas",357
5A76   02B8 000A                	MVII #10,R0
5A78   0240 013A                	MVO R0,var_SUBLEVEL
                                	;[358] 
                                	SRCFILE "samples/pumpkin_master.bas",358
                                	;[359] 			' Remove pumpkin bullets
                                	SRCFILE "samples/pumpkin_master.bas",359
                                	;[360] 			FOR c = 0 TO PUMPKINS - 1	
                                	SRCFILE "samples/pumpkin_master.bas",360
5A7A   01C0                     	CLRR R0
5A7B   0240 012C                	MVO R0,var_C
0x5A7D                          T64:
                                	;[361] 				b(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",361
5A7D   01C0                     	CLRR R0
5A7E   02BB 013D                	MVII #array_B,R3
5A80   02C3 012C                	ADD var_C,R3
5A82   0258                     	MVO@ R0,R3
                                	;[362] 			NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",362
5A83   0280 012C                	MVI var_C,R0
5A85   0008                     	INCR R0
5A86   0240 012C                	MVO R0,var_C
5A88   0378 0005                	CMPI #5,R0
5A8A   0226 000E                	BLE T64
                                	;[363] 
                                	SRCFILE "samples/pumpkin_master.bas",363
                                	;[364] 			' Bring in the Pumpkin Master and clean screen
                                	SRCFILE "samples/pumpkin_master.bas",364
                                	;[365] 			SCREEN pumpkin_cards, 60, 20, 20, 7, 20
                                	SRCFILE "samples/pumpkin_master.bas",365
5A8C   02B8 6631                	MVII #label_PUMPKIN_CARDS+60,R0
5A8E   0270                     	PSHR R0
5A8F   02B8 0214                	MVII #532,R0
5A91   0270                     	PSHR R0
5A92   02B8 0014                	MVII #20,R0
5A94   0270                     	PSHR R0
5A95   02B8 0007                	MVII #7,R0
5A97   0270                     	PSHR R0
5A98   02B8 0014                	MVII #20,R0
5A9A   0004 01F4 01B8           	CALL CPYBLK2
                                	;[366] 			FOR c = 160 TO 239
                                	SRCFILE "samples/pumpkin_master.bas",366
5A9D   02B8 00A0                	MVII #160,R0
5A9F   0240 012C                	MVO R0,var_C
0x5AA1                          T65:
                                	;[367] 				#backtab(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",367
5AA1   01C0                     	CLRR R0
5AA2   02BB 0200                	MVII #Q2,R3
5AA4   02C3 012C                	ADD var_C,R3
5AA6   0258                     	MVO@ R0,R3
                                	;[368] 			NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",368
5AA7   0280 012C                	MVI var_C,R0
5AA9   0008                     	INCR R0
5AAA   0240 012C                	MVO R0,var_C
5AAC   0378 00EF                	CMPI #239,R0
5AAE   0226 000E                	BLE T65
                                	;[369] 
                                	SRCFILE "samples/pumpkin_master.bas",369
                                	;[370] 			' Remove all pumpkins
                                	SRCFILE "samples/pumpkin_master.bas",370
                                	;[371] 			FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",371
5AB0   01C0                     	CLRR R0
5AB1   0240 012C                	MVO R0,var_C
0x5AB3                          T66:
                                	;[372] 				y(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",372
5AB3   01C0                     	CLRR R0
5AB4   02BB 014F                	MVII #array_Y,R3
5AB6   02C3 012C                	ADD var_C,R3
5AB8   0258                     	MVO@ R0,R3
                                	;[373] 				s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",373
5AB9   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
5ABB   0258                     	MVO@ R0,R3
                                	;[374] 				SPRITE c, 0
                                	SRCFILE "samples/pumpkin_master.bas",374
5ABC   02B8 0348                	MVII #Q1,R0
5ABE   02C0 012C                	ADD var_C,R0
5AC0   0084                     	MOVR R0,R4
5AC1   01C0                     	CLRR R0
5AC2   0260                     	MVO@ R0,R4
                                	;[375] 			NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",375
5AC3   0280 012C                	MVI var_C,R0
5AC5   0008                     	INCR R0
5AC6   0240 012C                	MVO R0,var_C
5AC8   0378 0005                	CMPI #5,R0
5ACA   0226 0018                	BLE T66
                                	;[376] 
                                	SRCFILE "samples/pumpkin_master.bas",376
                                	;[377] 			' Count of boss blocks
                                	SRCFILE "samples/pumpkin_master.bas",377
                                	;[378] 			blocks = 7 * 7 - 7
                                	SRCFILE "samples/pumpkin_master.bas",378
5ACC   02B8 002A                	MVII #42,R0
5ACE   0240 0129                	MVO R0,var_BLOCKS
                                	;[379] 
                                	SRCFILE "samples/pumpkin_master.bas",379
                                	;[380] 			' Start boss music
                                	SRCFILE "samples/pumpkin_master.bas",380
                                	;[381] 			PLAY VOLUME VOLUME_BOSS
                                	SRCFILE "samples/pumpkin_master.bas",381
5AD0   02B8 000E                	MVII #14,R0
5AD2   0240 0128                	MVO R0,_music_vol
                                	;[382] 			PLAY music_beat
                                	SRCFILE "samples/pumpkin_master.bas",382
5AD4   02B8 F5A3                	MVII #label_MUSIC_BEAT,R0
5AD6   0004 01F4 03AE           	CALL _play_music
                                	;[383] 
                                	SRCFILE "samples/pumpkin_master.bas",383
                                	;[384] 			' Go to boss game loop
                                	SRCFILE "samples/pumpkin_master.bas",384
                                	;[385] 			GOTO boss_loop
                                	SRCFILE "samples/pumpkin_master.bas",385
5AD9   0200 0021                	B label_BOSS_LOOP
                                	;[386] 		ELSE
                                	SRCFILE "samples/pumpkin_master.bas",386
5ADB   0200 0003                	B T67
0x5ADD                          T63:
                                	;[387] 			GOSUB start_wave
                                	SRCFILE "samples/pumpkin_master.bas",387
5ADD   0004 015C 02E4           	CALL label_START_WAVE
                                	;[388] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",388
0x5AE0                          T67:
                                	;[389] 	ELSE
                                	SRCFILE "samples/pumpkin_master.bas",389
5AE0   0200 0015                	B T61
0x5AE2                          T62:
                                	;[390] 		ON wave GOSUB move_0, move_1, move_2, move_3, move_4, move_5, move_6, move_7, move_8, move_9
                                	SRCFILE "samples/pumpkin_master.bas",390
5AE2   0281 013C                	MVI var_WAVE,R1
5AE4   0379 000A                	CMPI #10,R1
5AE6   0201 000F                	BC T69
5AE8   02BD 5AF7                	MVII #T69,R5
5AEA   02F9 5AED                	ADDI #T68,R1
5AEC   028F                     	MVI@ R1,PC
0x5AED                          T68:
5AED   5F3F                     	DECLE label_MOVE_0
5AEE   5FC4                     	DECLE label_MOVE_1
5AEF   6047                     	DECLE label_MOVE_2
5AF0   60AB                     	DECLE label_MOVE_3
5AF1   6111                     	DECLE label_MOVE_4
5AF2   61A5                     	DECLE label_MOVE_5
5AF3   6219                     	DECLE label_MOVE_6
5AF4   62DD                     	DECLE label_MOVE_7
5AF5   6334                     	DECLE label_MOVE_8
5AF6   6418                     	DECLE label_MOVE_9
0x5AF7                          T69:
                                	;[391] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",391
0x5AF7                          T61:
                                	;[392] 
                                	SRCFILE "samples/pumpkin_master.bas",392
                                	;[393] 	GOSUB move_player
                                	SRCFILE "samples/pumpkin_master.bas",393
5AF7   0004 015C 0163           	CALL label_MOVE_PLAYER
                                	;[394] 	GOTO game_loop
                                	SRCFILE "samples/pumpkin_master.bas",394
5AFA   0220 0283                	B label_GAME_LOOP
                                	;[395] 
                                	SRCFILE "samples/pumpkin_master.bas",395
                                	;[396] 	'
                                	SRCFILE "samples/pumpkin_master.bas",396
                                	;[397] 	' Boss loop
                                	SRCFILE "samples/pumpkin_master.bas",397
                                	;[398] 	'
                                	SRCFILE "samples/pumpkin_master.bas",398
                                	;[399] boss_loop:
                                	SRCFILE "samples/pumpkin_master.bas",399
                                	; BOSS_LOOP
0x5AFC                          label_BOSS_LOOP:	;[400] 
                                	SRCFILE "samples/pumpkin_master.bas",400
                                	;[401] 	'
                                	SRCFILE "samples/pumpkin_master.bas",401
                                	;[402] 	' Show boss' bullets and make them to descend
                                	SRCFILE "samples/pumpkin_master.bas",402
                                	;[403] 	'
                                	SRCFILE "samples/pumpkin_master.bas",403
                                	;[404] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",404
5AFC   01C0                     	CLRR R0
5AFD   0240 012C                	MVO R0,var_C
0x5AFF                          T70:
                                	;[405] 		IF y(c) THEN
                                	SRCFILE "samples/pumpkin_master.bas",405
5AFF   02BB 014F                	MVII #array_Y,R3
5B01   02C3 012C                	ADD var_C,R3
5B03   0298                     	MVI@ R3,R0
5B04   0080                     	TSTR R0
5B05   0204 0022                	BEQ T71
                                	;[406] 			SPRITE c, $0300 + x(c), $0000 + y(c), $0802 + 4 * 8
                                	SRCFILE "samples/pumpkin_master.bas",406
5B07   02B8 0348                	MVII #Q1,R0
5B09   02C0 012C                	ADD var_C,R0
5B0B   0084                     	MOVR R0,R4
5B0C   02FB FFFA                	ADDI #(array_X-array_Y) AND $FFFF,R3
5B0E   0298                     	MVI@ R3,R0
5B0F   02F8 0300                	ADDI #768,R0
5B11   0260                     	MVO@ R0,R4
5B12   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
5B14   0298                     	MVI@ R3,R0
5B15   02FC 0007                	ADDI #7,R4
5B17   0260                     	MVO@ R0,R4
5B18   02B8 0822                	MVII #2082,R0
5B1A   02FC 0007                	ADDI #7,R4
5B1C   0260                     	MVO@ R0,R4
                                	;[407] 			y(c) = y(c) + 1
                                	SRCFILE "samples/pumpkin_master.bas",407
5B1D   0298                     	MVI@ R3,R0
5B1E   0008                     	INCR R0
5B1F   0258                     	MVO@ R0,R3
                                	;[408] 			IF y(c) >= 104 THEN y(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",408
5B20   0298                     	MVI@ R3,R0
5B21   0378 0068                	CMPI #104,R0
5B23   0205 0002                	BLT T72
5B25   01C0                     	CLRR R0
5B26   0258                     	MVO@ R0,R3
0x5B27                          T72:
                                	;[409] 		ELSE
                                	SRCFILE "samples/pumpkin_master.bas",409
5B27   0200 0025                	B T73
0x5B29                          T71:
                                	;[410] 			SPRITE c, 0
                                	SRCFILE "samples/pumpkin_master.bas",410
5B29   02B8 0348                	MVII #Q1,R0
5B2B   02C0 012C                	ADD var_C,R0
5B2D   0084                     	MOVR R0,R4
5B2E   01C0                     	CLRR R0
5B2F   0260                     	MVO@ R0,R4
                                	;[411] 			x(c) = RANDOM(152) + 8
                                	SRCFILE "samples/pumpkin_master.bas",411
5B30   02B9 0098                	MVII #152,R1
5B32   0004 01F4 02F5           	CALL _next_random
5B35   0004 01FC 028B           	CALL qs_mpy8
5B38   0040                     	SWAP R0
5B39   03B8 00FF                	ANDI #255,R0
5B3B   02F8 0008                	ADDI #8,R0
5B3D   02BB 0149                	MVII #array_X,R3
5B3F   02C3 012C                	ADD var_C,R3
5B41   0258                     	MVO@ R0,R3
                                	;[412] 			y(c) = 8 + RANDOM(16)
                                	SRCFILE "samples/pumpkin_master.bas",412
5B42   0004 01F4 02F5           	CALL _next_random
5B45   03B8 000F                	ANDI #15,R0
5B47   02F8 0008                	ADDI #8,R0
5B49   02BB 014F                	MVII #array_Y,R3
5B4B   02C3 012C                	ADD var_C,R3
5B4D   0258                     	MVO@ R0,R3
                                	;[413] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",413
0x5B4E                          T73:
                                	;[414] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",414
5B4E   0280 012C                	MVI var_C,R0
5B50   0008                     	INCR R0
5B51   0240 012C                	MVO R0,var_C
5B53   0378 0005                	CMPI #5,R0
5B55   0226 0057                	BLE T70
                                	;[415] 
                                	SRCFILE "samples/pumpkin_master.bas",415
                                	;[416] 	'
                                	SRCFILE "samples/pumpkin_master.bas",416
                                	;[417] 	' Update player house and bullet
                                	SRCFILE "samples/pumpkin_master.bas",417
                                	;[418] 	'
                                	SRCFILE "samples/pumpkin_master.bas",418
                                	;[419] 	GOSUB update_player
                                	SRCFILE "samples/pumpkin_master.bas",419
5B57   0004 015C 0209           	CALL label_UPDATE_PLAYER
                                	;[420] 
                                	SRCFILE "samples/pumpkin_master.bas",420
                                	;[421] 	'
                                	SRCFILE "samples/pumpkin_master.bas",421
                                	;[422] 	' If boss hit then flash screen
                                	SRCFILE "samples/pumpkin_master.bas",422
                                	;[423] 	'
                                	SRCFILE "samples/pumpkin_master.bas",423
                                	;[424] 	IF gronk THEN MODE 0,7,7,7,7:BORDER 7:gronk = 0 ELSE MODE 0,0,0,0,0:BORDER 0
                                	SRCFILE "samples/pumpkin_master.bas",424
5B5A   0280 0131                	MVI var_GRONK,R0
5B5C   0080                     	TSTR R0
5B5D   0204 0011                	BEQ T74
5B5F   02B8 7777                	MVII #30583,R0
5B61   0240 0347                	MVO R0,_color
5B63   02B8 0002                	MVII #2,R0
5B65   0240 0109                	MVO R0,_mode_select
5B67   02B8 0007                	MVII #7,R0
5B69   0240 010A                	MVO R0,_border_color
5B6B   01C0                     	CLRR R0
5B6C   0240 0131                	MVO R0,var_GRONK
5B6E   0200 000A                	B T75
0x5B70                          T74:
5B70   01C0                     	CLRR R0
5B71   0240 0347                	MVO R0,_color
5B73   02B8 0002                	MVII #2,R0
5B75   0240 0109                	MVO R0,_mode_select
5B77   01C0                     	CLRR R0
5B78   0240 010A                	MVO R0,_border_color
0x5B7A                          T75:
                                	;[425] 	WAIT
                                	SRCFILE "samples/pumpkin_master.bas",425
5B7A   0004 01F4 01E2           	CALL _wait
                                	;[426] 
                                	SRCFILE "samples/pumpkin_master.bas",426
                                	;[427] 	' Player touched by bullet
                                	SRCFILE "samples/pumpkin_master.bas",427
                                	;[428] 	IF COL7 AND $003f THEN	GOTO player_touched
                                	SRCFILE "samples/pumpkin_master.bas",428
5B7D   0280 033E                	MVI _col7,R0
5B7F   03B8 003F                	ANDI #63,R0
5B81   020C 0096                	BNE label_PLAYER_TOUCHED
                                	;[429] 
                                	SRCFILE "samples/pumpkin_master.bas",429
                                	;[430] 	' If bullet is moving check if touches boss
                                	SRCFILE "samples/pumpkin_master.bas",430
                                	;[431] 	IF by THEN
                                	SRCFILE "samples/pumpkin_master.bas",431
5B83   0280 012B                	MVI var_BY,R0
5B85   0080                     	TSTR R0
5B86   0204 008C                	BEQ T77
                                	;[432] 		c = (bx + 1) / 8 + (by / 8) * 20 - 21
                                	SRCFILE "samples/pumpkin_master.bas",432
5B88   0280 012A                	MVI var_BX,R0
5B8A   0008                     	INCR R0
5B8B   0064                     	SLR R0,2
5B8C   0060                     	SLR R0,1
5B8D   0281 012B                	MVI var_BY,R1
5B8F   0065                     	SLR R1,2
5B90   0061                     	SLR R1,1
                                ;	MULT R1,R4,20
                                	;
5B91   004D                                     SLL     R1,  2
5B92   008C                                     MOVR    R1,  R4
5B93   004D                                     SLL     R1,  2
5B94   00E1                                     ADDR    R4,  R1
5B95   00C8                     	ADDR R1,R0
5B96   0338 0015                	SUBI #21,R0
5B98   0240 012C                	MVO R0,var_C
                                	;[433] 		IF c >= 20 AND #backtab(c) <> 0 THEN	' Crashes against it?
                                	SRCFILE "samples/pumpkin_master.bas",433
5B9A   0280 012C                	MVI var_C,R0
5B9C   0378 0014                	CMPI #20,R0
5B9E   02B8 FFFF                	MVII #65535,R0
5BA0   020D 0001                	BGE T79
5BA2   0008                     	INCR R0
0x5BA3                          T79:
5BA3   02BB 0200                	MVII #Q2,R3
5BA5   02C3 012C                	ADD var_C,R3
5BA7   0299                     	MVI@ R3,R1
5BA8   0089                     	TSTR R1
5BA9   02B9 FFFF                	MVII #65535,R1
5BAB   020C 0001                	BNE T80
5BAD   0009                     	INCR R1
0x5BAE                          T80:
5BAE   0188                     	ANDR R1,R0
5BAF   0204 0063                	BEQ T78
                                	;[434] 			#backtab(c) = 0		' Remove block
                                	SRCFILE "samples/pumpkin_master.bas",434
5BB1   01C0                     	CLRR R0
5BB2   02BB 0200                	MVII #Q2,R3
5BB4   02C3 012C                	ADD var_C,R3
5BB6   0258                     	MVO@ R0,R3
                                	;[435] 			gronk = 1		' Signal flash requested
                                	SRCFILE "samples/pumpkin_master.bas",435
5BB7   02B8 0001                	MVII #1,R0
5BB9   0240 0131                	MVO R0,var_GRONK
                                	;[436] 			by = 0			' Remove bullet
                                	SRCFILE "samples/pumpkin_master.bas",436
5BBB   01C0                     	CLRR R0
5BBC   0240 012B                	MVO R0,var_BY
                                	;[437] 			#score = #score + 2
                                	SRCFILE "samples/pumpkin_master.bas",437
5BBE   0280 8041                	MVI var_&SCORE,R0
5BC0   02F8 0002                	ADDI #2,R0
5BC2   0240 8041                	MVO R0,var_&SCORE
                                	;[438] 			sound_effect = 3: sound_state = 0
                                	SRCFILE "samples/pumpkin_master.bas",438
5BC4   02B8 0003                	MVII #3,R0
5BC6   0240 0138                	MVO R0,var_SOUND_EFFECT
5BC8   01C0                     	CLRR R0
5BC9   0240 0139                	MVO R0,var_SOUND_STATE
                                	;[439] 			blocks = blocks - 1	' One block less
                                	SRCFILE "samples/pumpkin_master.bas",439
5BCB   0280 0129                	MVI var_BLOCKS,R0
5BCD   0010                     	DECR R0
5BCE   0240 0129                	MVO R0,var_BLOCKS
                                	;[440] 			IF blocks = 0 THEN	' All blocks completed?
                                	SRCFILE "samples/pumpkin_master.bas",440
5BD0   0280 0129                	MVI var_BLOCKS,R0
5BD2   0080                     	TSTR R0
5BD3   020C 0006                	BNE T81
                                	;[441] 				#score = #score + 50	' Bonus
                                	SRCFILE "samples/pumpkin_master.bas",441
5BD5   0280 8041                	MVI var_&SCORE,R0
5BD7   02F8 0032                	ADDI #50,R0
5BD9   0240 8041                	MVO R0,var_&SCORE
                                	;[442] 			END IF
                                	SRCFILE "samples/pumpkin_master.bas",442
0x5BDB                          T81:
                                	;[443] 			GOSUB update_score
                                	SRCFILE "samples/pumpkin_master.bas",443
5BDB   0004 015C 0233           	CALL label_UPDATE_SCORE
                                	;[444] 			IF blocks = 0 THEN	' All blocks completed?
                                	SRCFILE "samples/pumpkin_master.bas",444
5BDE   0280 0129                	MVI var_BLOCKS,R0
5BE0   0080                     	TSTR R0
5BE1   020C 0031                	BNE T82
                                	;[445] 				'
                                	SRCFILE "samples/pumpkin_master.bas",445
                                	;[446] 				' Return to pumpkins waves
                                	SRCFILE "samples/pumpkin_master.bas",446
                                	;[447] 				'
                                	SRCFILE "samples/pumpkin_master.bas",447
                                	;[448] 				sound_effect = 4:sound_state = 0
                                	SRCFILE "samples/pumpkin_master.bas",448
5BE3   02B8 0004                	MVII #4,R0
5BE5   0240 0138                	MVO R0,var_SOUND_EFFECT
5BE7   01C0                     	CLRR R0
5BE8   0240 0139                	MVO R0,var_SOUND_STATE
                                	;[449] 				PLAY VOLUME VOLUME_GAME
                                	SRCFILE "samples/pumpkin_master.bas",449
5BEA   02B8 000A                	MVII #10,R0
5BEC   0240 0128                	MVO R0,_music_vol
                                	;[450] 				PLAY music_game
                                	SRCFILE "samples/pumpkin_master.bas",450
5BEE   02B8 F000                	MVII #label_MUSIC_GAME,R0
5BF0   0004 01F4 03AE           	CALL _play_music
                                	;[451] 				FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",451
5BF3   01C0                     	CLRR R0
5BF4   0240 012C                	MVO R0,var_C
0x5BF6                          T83:
                                	;[452] 					y(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",452
5BF6   01C0                     	CLRR R0
5BF7   02BB 014F                	MVII #array_Y,R3
5BF9   02C3 012C                	ADD var_C,R3
5BFB   0258                     	MVO@ R0,R3
                                	;[453] 					s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",453
5BFC   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
5BFE   0258                     	MVO@ R0,R3
                                	;[454] 					SPRITE c, 0
                                	SRCFILE "samples/pumpkin_master.bas",454
5BFF   02B8 0348                	MVII #Q1,R0
5C01   02C0 012C                	ADD var_C,R0
5C03   0084                     	MOVR R0,R4
5C04   01C0                     	CLRR R0
5C05   0260                     	MVO@ R0,R4
                                	;[455] 				NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",455
5C06   0280 012C                	MVI var_C,R0
5C08   0008                     	INCR R0
5C09   0240 012C                	MVO R0,var_C
5C0B   0378 0005                	CMPI #5,R0
5C0D   0226 0018                	BLE T83
                                	;[456] 				GOSUB start_wave
                                	SRCFILE "samples/pumpkin_master.bas",456
5C0F   0004 015C 02E4           	CALL label_START_WAVE
                                	;[457] 				GOTO game_loop
                                	SRCFILE "samples/pumpkin_master.bas",457
5C12   0220 039B                	B label_GAME_LOOP
                                	;[458] 			END IF
                                	SRCFILE "samples/pumpkin_master.bas",458
0x5C14                          T82:
                                	;[459] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",459
0x5C14                          T78:
                                	;[460] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",460
0x5C14                          T77:
                                	;[461] 
                                	SRCFILE "samples/pumpkin_master.bas",461
                                	;[462] 	GOSUB move_player
                                	SRCFILE "samples/pumpkin_master.bas",462
5C14   0004 015C 0163           	CALL label_MOVE_PLAYER
                                	;[463] 	GOTO boss_loop
                                	SRCFILE "samples/pumpkin_master.bas",463
5C17   0220 011C                	B label_BOSS_LOOP
                                	;[464] 
                                	SRCFILE "samples/pumpkin_master.bas",464
                                	;[465] 	'
                                	SRCFILE "samples/pumpkin_master.bas",465
                                	;[466] 	' Player explosion
                                	SRCFILE "samples/pumpkin_master.bas",466
                                	;[467] 	'
                                	SRCFILE "samples/pumpkin_master.bas",467
                                	;[468] player_touched:
                                	SRCFILE "samples/pumpkin_master.bas",468
                                	; PLAYER_TOUCHED
0x5C19                          label_PLAYER_TOUCHED:	;[469] 	PLAY VOLUME 0	
                                	SRCFILE "samples/pumpkin_master.bas",469
5C19   01C0                     	CLRR R0
5C1A   0240 0128                	MVO R0,_music_vol
                                	;[470] 	sound_effect = 4: sound_state = 0
                                	SRCFILE "samples/pumpkin_master.bas",470
5C1C   02B8 0004                	MVII #4,R0
5C1E   0240 0138                	MVO R0,var_SOUND_EFFECT
5C20   01C0                     	CLRR R0
5C21   0240 0139                	MVO R0,var_SOUND_STATE
                                	;[471] 
                                	SRCFILE "samples/pumpkin_master.bas",471
                                	;[472] 	'
                                	SRCFILE "samples/pumpkin_master.bas",472
                                	;[473] 	' Screen cleaning changes if it's pumpkins or boss wave.
                                	SRCFILE "samples/pumpkin_master.bas",473
                                	;[474] 	'
                                	SRCFILE "samples/pumpkin_master.bas",474
                                	;[475] 	IF sublevel = 10 THEN
                                	SRCFILE "samples/pumpkin_master.bas",475
5C23   0280 013A                	MVI var_SUBLEVEL,R0
5C25   0378 000A                	CMPI #10,R0
5C27   020C 001D                	BNE T84
                                	;[476] 		FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",476
5C29   01C0                     	CLRR R0
5C2A   0240 012C                	MVO R0,var_C
0x5C2C                          T85:
                                	;[477] 			SPRITE c, 0
                                	SRCFILE "samples/pumpkin_master.bas",477
5C2C   02B8 0348                	MVII #Q1,R0
5C2E   02C0 012C                	ADD var_C,R0
5C30   0084                     	MOVR R0,R4
5C31   01C0                     	CLRR R0
5C32   0260                     	MVO@ R0,R4
                                	;[478] 			y(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",478
5C33   02BB 014F                	MVII #array_Y,R3
5C35   02C3 012C                	ADD var_C,R3
5C37   0258                     	MVO@ R0,R3
                                	;[479] 			s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",479
5C38   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
5C3A   0258                     	MVO@ R0,R3
                                	;[480] 		NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",480
5C3B   0280 012C                	MVI var_C,R0
5C3D   0008                     	INCR R0
5C3E   0240 012C                	MVO R0,var_C
5C40   0378 0005                	CMPI #5,R0
5C42   0226 0017                	BLE T85
                                	;[481] 	ELSE
                                	SRCFILE "samples/pumpkin_master.bas",481
5C44   0200 0025                	B T86
0x5C46                          T84:
                                	;[482] 		FOR c = 20 TO 239
                                	SRCFILE "samples/pumpkin_master.bas",482
5C46   02B8 0014                	MVII #20,R0
5C48   0240 012C                	MVO R0,var_C
0x5C4A                          T87:
                                	;[483] 			#backtab(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",483
5C4A   01C0                     	CLRR R0
5C4B   02BB 0200                	MVII #Q2,R3
5C4D   02C3 012C                	ADD var_C,R3
5C4F   0258                     	MVO@ R0,R3
                                	;[484] 		NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",484
5C50   0280 012C                	MVI var_C,R0
5C52   0008                     	INCR R0
5C53   0240 012C                	MVO R0,var_C
5C55   0378 00EF                	CMPI #239,R0
5C57   0226 000E                	BLE T87
                                	;[485] 		FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",485
5C59   01C0                     	CLRR R0
5C5A   0240 012C                	MVO R0,var_C
0x5C5C                          T88:
                                	;[486] 			b(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",486
5C5C   01C0                     	CLRR R0
5C5D   02BB 013D                	MVII #array_B,R3
5C5F   02C3 012C                	ADD var_C,R3
5C61   0258                     	MVO@ R0,R3
                                	;[487] 		NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",487
5C62   0280 012C                	MVI var_C,R0
5C64   0008                     	INCR R0
5C65   0240 012C                	MVO R0,var_C
5C67   0378 0005                	CMPI #5,R0
5C69   0226 000E                	BLE T88
                                	;[488] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",488
0x5C6B                          T86:
                                	;[489] 
                                	SRCFILE "samples/pumpkin_master.bas",489
                                	;[490] 	'
                                	SRCFILE "samples/pumpkin_master.bas",490
                                	;[491] 	' Player nuclear explosion
                                	SRCFILE "samples/pumpkin_master.bas",491
                                	;[492] 	' (not really, the pumpkin bullet hit the freezer and
                                	SRCFILE "samples/pumpkin_master.bas",492
                                	;[493] 	' it was filled with beer :P)
                                	SRCFILE "samples/pumpkin_master.bas",493
                                	;[494] 	'
                                	SRCFILE "samples/pumpkin_master.bas",494
                                	;[495] 	SPRITE 6,0
                                	SRCFILE "samples/pumpkin_master.bas",495
5C6B   01C0                     	CLRR R0
5C6C   0240 034E                	MVO R0,_mobs+6
                                	;[496] 	FOR c = 0 TO 127
                                	SRCFILE "samples/pumpkin_master.bas",496
5C6E   0240 012C                	MVO R0,var_C
0x5C70                          T89:
                                	;[497] 		IF c = 0 THEN
                                	SRCFILE "samples/pumpkin_master.bas",497
5C70   0280 012C                	MVI var_C,R0
5C72   0080                     	TSTR R0
5C73   020C 000C                	BNE T90
                                	;[498] 			SPRITE 7, $0300 + px, $0080 + py
                                	SRCFILE "samples/pumpkin_master.bas",498
5C75   0280 0136                	MVI var_PX,R0
5C77   02F8 0300                	ADDI #768,R0
5C79   0240 034F                	MVO R0,_mobs+7
5C7B   0280 0137                	MVI var_PY,R0
5C7D   02F8 0080                	ADDI #128,R0
5C7F   0240 0357                	MVO R0,_mobs+15
                                	;[499] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",499
0x5C81                          T90:
                                	;[500] 		IF c = 32 THEN
                                	SRCFILE "samples/pumpkin_master.bas",500
5C81   0280 012C                	MVI var_C,R0
5C83   0378 0020                	CMPI #32,R0
5C85   020C 000C                	BNE T91
                                	;[501] 			SPRITE 7, $0300 + px, $0180 + py - 8
                                	SRCFILE "samples/pumpkin_master.bas",501
5C87   0280 0136                	MVI var_PX,R0
5C89   02F8 0300                	ADDI #768,R0
5C8B   0240 034F                	MVO R0,_mobs+7
5C8D   0280 0137                	MVI var_PY,R0
5C8F   02F8 0178                	ADDI #376,R0
5C91   0240 0357                	MVO R0,_mobs+15
                                	;[502] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",502
0x5C93                          T91:
                                	;[503] 		IF c = 64 THEN
                                	SRCFILE "samples/pumpkin_master.bas",503
5C93   0280 012C                	MVI var_C,R0
5C95   0378 0040                	CMPI #64,R0
5C97   020C 000C                	BNE T92
                                	;[504] 			SPRITE 7, $0700 + px - 4, $0180 + py - 8
                                	SRCFILE "samples/pumpkin_master.bas",504
5C99   0280 0136                	MVI var_PX,R0
5C9B   02F8 06FC                	ADDI #1788,R0
5C9D   0240 034F                	MVO R0,_mobs+7
5C9F   0280 0137                	MVI var_PY,R0
5CA1   02F8 0178                	ADDI #376,R0
5CA3   0240 0357                	MVO R0,_mobs+15
                                	;[505] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",505
0x5CA5                          T92:
                                	;[506] 		IF c = 96 THEN
                                	SRCFILE "samples/pumpkin_master.bas",506
5CA5   0280 012C                	MVI var_C,R0
5CA7   0378 0060                	CMPI #96,R0
5CA9   020C 000C                	BNE T93
                                	;[507] 			SPRITE 7, $0700 + px - 4, $0280 + py - 24
                                	SRCFILE "samples/pumpkin_master.bas",507
5CAB   0280 0136                	MVI var_PX,R0
5CAD   02F8 06FC                	ADDI #1788,R0
5CAF   0240 034F                	MVO R0,_mobs+7
5CB1   0280 0137                	MVI var_PY,R0
5CB3   02F8 0268                	ADDI #616,R0
5CB5   0240 0357                	MVO R0,_mobs+15
                                	;[508] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",508
0x5CB7                          T93:
                                	;[509] 		IF C AND 2 THEN
                                	SRCFILE "samples/pumpkin_master.bas",509
5CB7   0280 012C                	MVI var_C,R0
5CB9   03B8 0002                	ANDI #2,R0
5CBB   0204 0006                	BEQ T94
                                	;[510] 			SPRITE 7,,,$0807 + 10 * 8
                                	SRCFILE "samples/pumpkin_master.bas",510
5CBD   02B8 0857                	MVII #2135,R0
5CBF   0240 035F                	MVO R0,_mobs+23
                                	;[511] 		ELSE
                                	SRCFILE "samples/pumpkin_master.bas",511
5CC1   0200 0004                	B T95
0x5CC3                          T94:
                                	;[512] 			SPRITE 7,,,$0807 + 8 * 8
                                	SRCFILE "samples/pumpkin_master.bas",512
5CC3   02B8 0847                	MVII #2119,R0
5CC5   0240 035F                	MVO R0,_mobs+23
                                	;[513] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",513
0x5CC7                          T95:
                                	;[514] 		d = c AND 15
                                	SRCFILE "samples/pumpkin_master.bas",514
5CC7   0280 012C                	MVI var_C,R0
5CC9   03B8 000F                	ANDI #15,R0
5CCB   0240 012E                	MVO R0,var_D
                                	;[515] 		MODE 0,d,d,d,d
                                	SRCFILE "samples/pumpkin_master.bas",515
5CCD   0280 012E                	MVI var_D,R0
5CCF   0040                     	SWAP R0
5CD0   03B8 FF00                	ANDI #65280,R0
5CD2   02C0 012E                	ADD var_D,R0
5CD4   0281 012E                	MVI var_D,R1
5CD6   004D                     	SLL R1,2
5CD7   004D                     	SLL R1,2
5CD8   0041                     	SWAP R1
5CD9   03B9 F000                	ANDI #61440,R1
5CDB   00C8                     	ADDR R1,R0
5CDC   0281 012E                	MVI var_D,R1
5CDE   004D                     	SLL R1,2
5CDF   004D                     	SLL R1,2
5CE0   00C8                     	ADDR R1,R0
5CE1   0240 0347                	MVO R0,_color
5CE3   02B8 0002                	MVII #2,R0
5CE5   0240 0109                	MVO R0,_mode_select
                                	;[516] 		BORDER d
                                	SRCFILE "samples/pumpkin_master.bas",516
5CE7   0280 012E                	MVI var_D,R0
5CE9   0240 010A                	MVO R0,_border_color
                                	;[517] 		WAIT
                                	SRCFILE "samples/pumpkin_master.bas",517
5CEB   0004 01F4 01E2           	CALL _wait
                                	;[518] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",518
5CEE   0280 012C                	MVI var_C,R0
5CF0   0008                     	INCR R0
5CF1   0240 012C                	MVO R0,var_C
5CF3   0378 007F                	CMPI #127,R0
5CF5   0226 0086                	BLE T89
                                	;[519] 	SPRITE 7,0
                                	SRCFILE "samples/pumpkin_master.bas",519
5CF7   01C0                     	CLRR R0
5CF8   0240 034F                	MVO R0,_mobs+7
                                	;[520] 	MODE 0,0,0,0,0
                                	SRCFILE "samples/pumpkin_master.bas",520
5CFA   0240 0347                	MVO R0,_color
5CFC   02B8 0002                	MVII #2,R0
5CFE   0240 0109                	MVO R0,_mode_select
                                	;[521] 	BORDER 0
                                	SRCFILE "samples/pumpkin_master.bas",521
5D00   01C0                     	CLRR R0
5D01   0240 010A                	MVO R0,_border_color
                                	;[522] 	FOR c = 0 TO 10
                                	SRCFILE "samples/pumpkin_master.bas",522
5D03   0240 012C                	MVO R0,var_C
0x5D05                          T96:
                                	;[523] 		WAIT
                                	SRCFILE "samples/pumpkin_master.bas",523
5D05   0004 01F4 01E2           	CALL _wait
                                	;[524] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",524
5D08   0280 012C                	MVI var_C,R0
5D0A   0008                     	INCR R0
5D0B   0240 012C                	MVO R0,var_C
5D0D   0378 000A                	CMPI #10,R0
5D0F   0226 000B                	BLE T96
                                	;[525] 
                                	SRCFILE "samples/pumpkin_master.bas",525
                                	;[526] 	' No more lives = Game over
                                	SRCFILE "samples/pumpkin_master.bas",526
                                	;[527] 	IF lives = 0 THEN
                                	SRCFILE "samples/pumpkin_master.bas",527
5D11   0280 0133                	MVI var_LIVES,R0
5D13   0080                     	TSTR R0
5D14   020C 0046                	BNE T97
                                	;[528] 		FOR c = 0 TO 255
                                	SRCFILE "samples/pumpkin_master.bas",528
5D16   0240 012C                	MVO R0,var_C
0x5D18                          T98:
                                	;[529] 			PRINT AT 105 COLOR C AND 7,"GAME  OVER"
                                	SRCFILE "samples/pumpkin_master.bas",529
5D18   02B8 0269                	MVII #617,R0
5D1A   0240 0346                	MVO R0,_screen
5D1C   0280 012C                	MVI var_C,R0
5D1E   03B8 0007                	ANDI #7,R0
5D20   0240 0347                	MVO R0,_color
5D22   0284 0346                	MVI _screen,R4
5D24   02B8 0138                	MVII #312,R0
5D26   03C0 0347                	XOR _color,R0
5D28   0260                     	MVO@ R0,R4
5D29   03F8 0030                	XORI #48,R0
5D2B   0260                     	MVO@ R0,R4
5D2C   03F8 0060                	XORI #96,R0
5D2E   0260                     	MVO@ R0,R4
5D2F   03F8 0040                	XORI #64,R0
5D31   0260                     	MVO@ R0,R4
5D32   03F8 0128                	XORI #296,R0
5D34   0260                     	MVO@ R0,R4
5D35   0260                     	MVO@ R0,R4
5D36   03F8 0178                	XORI #376,R0
5D38   0260                     	MVO@ R0,R4
5D39   03F8 00C8                	XORI #200,R0
5D3B   0260                     	MVO@ R0,R4
5D3C   03F8 0098                	XORI #152,R0
5D3E   0260                     	MVO@ R0,R4
5D3F   03F8 00B8                	XORI #184,R0
5D41   0260                     	MVO@ R0,R4
5D42   0244 0346                	MVO R4,_screen
                                	;[530] 			WAIT
                                	SRCFILE "samples/pumpkin_master.bas",530
5D44   0004 01F4 01E2           	CALL _wait
                                	;[531] 		NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",531
5D47   0280 012C                	MVI var_C,R0
5D49   0008                     	INCR R0
5D4A   0240 012C                	MVO R0,var_C
5D4C   0378 00FF                	CMPI #255,R0
5D4E   0226 0037                	BLE T98
                                	;[532] 		IF #score > #record THEN #record = #score
                                	SRCFILE "samples/pumpkin_master.bas",532
5D50   0280 8041                	MVI var_&SCORE,R0
5D52   0340 8040                	CMP var_&RECORD,R0
5D54   0204 0004                	BEQ T99
5D56   0209 0002                	BNC T99
5D58   0240 8040                	MVO R0,var_&RECORD
0x5D5A                          T99:
                                	;[533] 		GOTO title_screen
                                	SRCFILE "samples/pumpkin_master.bas",533
5D5A   0220 0B63                	B label_TITLE_SCREEN
                                	;[534] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",534
0x5D5C                          T97:
                                	;[535] 
                                	SRCFILE "samples/pumpkin_master.bas",535
                                	;[536] 	' One life less, restart game
                                	SRCFILE "samples/pumpkin_master.bas",536
                                	;[537] 	lives = lives - 1
                                	SRCFILE "samples/pumpkin_master.bas",537
5D5C   0280 0133                	MVI var_LIVES,R0
5D5E   0010                     	DECR R0
5D5F   0240 0133                	MVO R0,var_LIVES
                                	;[538] 	GOTO restart_game
                                	SRCFILE "samples/pumpkin_master.bas",538
5D61   0220 0998                	B label_RESTART_GAME
                                	;[539] 
                                	SRCFILE "samples/pumpkin_master.bas",539
                                	;[540] 	'
                                	SRCFILE "samples/pumpkin_master.bas",540
                                	;[541] 	' Move player and bullet
                                	SRCFILE "samples/pumpkin_master.bas",541
                                	;[542] 	'
                                	SRCFILE "samples/pumpkin_master.bas",542
                                	;[543] move_player:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",543
                                	; MOVE_PLAYER
0x5D63                          label_MOVE_PLAYER:	PROC
5D63   0275                     	BEGIN
                                	;[544] 	IF by THEN	' Active bullet?
                                	SRCFILE "samples/pumpkin_master.bas",544
5D64   0280 012B                	MVI var_BY,R0
5D66   0080                     	TSTR R0
5D67   0204 000D                	BEQ T100
                                	;[545] 		by = by - 4	' Move towards top
                                	SRCFILE "samples/pumpkin_master.bas",545
5D69   0338 0004                	SUBI #4,R0
5D6B   0240 012B                	MVO R0,var_BY
                                	;[546] 		IF by < 16 THEN by = 0	' Disappears if touches score bar
                                	SRCFILE "samples/pumpkin_master.bas",546
5D6D   0280 012B                	MVI var_BY,R0
5D6F   0378 0010                	CMPI #16,R0
5D71   020D 0003                	BGE T101
5D73   01C0                     	CLRR R0
5D74   0240 012B                	MVO R0,var_BY
0x5D76                          T101:
                                	;[547] 	END IF	
                                	SRCFILE "samples/pumpkin_master.bas",547
0x5D76                          T100:
                                	;[548] 
                                	SRCFILE "samples/pumpkin_master.bas",548
                                	;[549] 	c = CONT
                                	SRCFILE "samples/pumpkin_master.bas",549
5D76   0280 01FE                	MVI 510,R0
5D78   03C0 01FF                	XOR 511,R0
5D7A   0240 012C                	MVO R0,var_C
                                	;[550] 	d = c AND $E0
                                	SRCFILE "samples/pumpkin_master.bas",550
5D7C   0280 012C                	MVI var_C,R0
5D7E   03B8 00E0                	ANDI #224,R0
5D80   0240 012E                	MVO R0,var_D
                                	;[551] 	IF (d = $80) + (d = $40) + (d = $20) THEN	' Ignore keypad
                                	SRCFILE "samples/pumpkin_master.bas",551
5D82   0280 012E                	MVI var_D,R0
5D84   0378 0080                	CMPI #128,R0
5D86   02B8 FFFF                	MVII #65535,R0
5D88   0204 0001                	BEQ T103
5D8A   0008                     	INCR R0
0x5D8B                          T103:
5D8B   0281 012E                	MVI var_D,R1
5D8D   0379 0040                	CMPI #64,R1
5D8F   02B9 FFFF                	MVII #65535,R1
5D91   0204 0001                	BEQ T104
5D93   0009                     	INCR R1
0x5D94                          T104:
5D94   00C8                     	ADDR R1,R0
5D95   0281 012E                	MVI var_D,R1
5D97   0379 0020                	CMPI #32,R1
5D99   02B9 FFFF                	MVII #65535,R1
5D9B   0204 0001                	BEQ T105
5D9D   0009                     	INCR R1
0x5D9E                          T105:
5D9E   00C8                     	ADDR R1,R0
5D9F   0204 0002                	BEQ T102
                                	;[552] 	ELSE
                                	SRCFILE "samples/pumpkin_master.bas",552
5DA1   0200 0065                	B T106
0x5DA3                          T102:
                                	;[553] 		IF (d = $a0) + (d = $c0) + (d = $60) THEN	' Side-button
                                	SRCFILE "samples/pumpkin_master.bas",553
5DA3   0280 012E                	MVI var_D,R0
5DA5   0378 00A0                	CMPI #160,R0
5DA7   02B8 FFFF                	MVII #65535,R0
5DA9   0204 0001                	BEQ T108
5DAB   0008                     	INCR R0
0x5DAC                          T108:
5DAC   0281 012E                	MVI var_D,R1
5DAE   0379 00C0                	CMPI #192,R1
5DB0   02B9 FFFF                	MVII #65535,R1
5DB2   0204 0001                	BEQ T109
5DB4   0009                     	INCR R1
0x5DB5                          T109:
5DB5   00C8                     	ADDR R1,R0
5DB6   0281 012E                	MVI var_D,R1
5DB8   0379 0060                	CMPI #96,R1
5DBA   02B9 FFFF                	MVII #65535,R1
5DBC   0204 0001                	BEQ T110
5DBE   0009                     	INCR R1
0x5DBF                          T110:
5DBF   00C8                     	ADDR R1,R0
5DC0   0204 001C                	BEQ T107
                                	;[554] 			IF by = 0 THEN	' Only if no active bullet?
                                	SRCFILE "samples/pumpkin_master.bas",554
5DC2   0280 012B                	MVI var_BY,R0
5DC4   0080                     	TSTR R0
5DC5   020C 0017                	BNE T111
                                	;[555] 				bx = px + 2	' Start a bullet
                                	SRCFILE "samples/pumpkin_master.bas",555
5DC7   0280 0136                	MVI var_PX,R0
5DC9   02F8 0002                	ADDI #2,R0
5DCB   0240 012A                	MVO R0,var_BX
                                	;[556] 				by = 96
                                	SRCFILE "samples/pumpkin_master.bas",556
5DCD   02B8 0060                	MVII #96,R0
5DCF   0240 012B                	MVO R0,var_BY
                                	;[557] 				IF sound_effect < 3 THEN sound_effect = 1: sound_state = 0
                                	SRCFILE "samples/pumpkin_master.bas",557
5DD1   0280 0138                	MVI var_SOUND_EFFECT,R0
5DD3   0378 0003                	CMPI #3,R0
5DD5   020D 0007                	BGE T112
5DD7   02B8 0001                	MVII #1,R0
5DD9   0240 0138                	MVO R0,var_SOUND_EFFECT
5DDB   01C0                     	CLRR R0
5DDC   0240 0139                	MVO R0,var_SOUND_STATE
0x5DDE                          T112:
                                	;[558] 			END IF
                                	SRCFILE "samples/pumpkin_master.bas",558
0x5DDE                          T111:
                                	;[559] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",559
0x5DDE                          T107:
                                	;[560] 		c = controller_direction(c AND $1F)
                                	SRCFILE "samples/pumpkin_master.bas",560
5DDE   02B9 64B5                	MVII #label_CONTROLLER_DIRECTION,R1
5DE0   0282 012C                	MVI var_C,R2
5DE2   03BA 001F                	ANDI #31,R2
5DE4   00D1                     	ADDR R2,R1
5DE5   0288                     	MVI@ R1,R0
5DE6   0240 012C                	MVO R0,var_C
                                	;[561] 		' Move to right
                                	SRCFILE "samples/pumpkin_master.bas",561
                                	;[562] 		IF c = 2 THEN IF px < 160 THEN px = px + 2
                                	SRCFILE "samples/pumpkin_master.bas",562
5DE8   0280 012C                	MVI var_C,R0
5DEA   0378 0002                	CMPI #2,R0
5DEC   020C 000A                	BNE T113
5DEE   0280 0136                	MVI var_PX,R0
5DF0   0378 00A0                	CMPI #160,R0
5DF2   020D 0004                	BGE T114
5DF4   02F8 0002                	ADDI #2,R0
5DF6   0240 0136                	MVO R0,var_PX
0x5DF8                          T114:
0x5DF8                          T113:
                                	;[563] 		' Move to left
                                	SRCFILE "samples/pumpkin_master.bas",563
                                	;[564] 		IF c = 4 THEN IF px > 8 THEN px = px - 2 
                                	SRCFILE "samples/pumpkin_master.bas",564
5DF8   0280 012C                	MVI var_C,R0
5DFA   0378 0004                	CMPI #4,R0
5DFC   020C 000A                	BNE T115
5DFE   0280 0136                	MVI var_PX,R0
5E00   0378 0008                	CMPI #8,R0
5E02   0206 0004                	BLE T116
5E04   0338 0002                	SUBI #2,R0
5E06   0240 0136                	MVO R0,var_PX
0x5E08                          T116:
0x5E08                          T115:
                                	;[565] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",565
0x5E08                          T106:
                                	;[566] 	END
                                	SRCFILE "samples/pumpkin_master.bas",566
5E08   02B7                     	RETURN
                                	ENDP
                                	;[567] 
                                	SRCFILE "samples/pumpkin_master.bas",567
                                	;[568] 	'
                                	SRCFILE "samples/pumpkin_master.bas",568
                                	;[569] 	' Update player house and bullet
                                	SRCFILE "samples/pumpkin_master.bas",569
                                	;[570] 	'
                                	SRCFILE "samples/pumpkin_master.bas",570
                                	;[571] update_player:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",571
                                	; UPDATE_PLAYER
0x5E09                          label_UPDATE_PLAYER:	PROC
5E09   0275                     	BEGIN
                                	;[572] 	IF by THEN
                                	SRCFILE "samples/pumpkin_master.bas",572
5E0A   0280 012B                	MVI var_BY,R0
5E0C   0080                     	TSTR R0
5E0D   0204 0010                	BEQ T117
                                	;[573] 		SPRITE 6, $0300 + bx, $0000 + by, $0805 + 12 * 8
                                	SRCFILE "samples/pumpkin_master.bas",573
5E0F   0280 012A                	MVI var_BX,R0
5E11   02F8 0300                	ADDI #768,R0
5E13   0240 034E                	MVO R0,_mobs+6
5E15   0280 012B                	MVI var_BY,R0
5E17   0240 0356                	MVO R0,_mobs+14
5E19   02B8 0865                	MVII #2149,R0
5E1B   0240 035E                	MVO R0,_mobs+22
                                	;[574] 	ELSE
                                	SRCFILE "samples/pumpkin_master.bas",574
5E1D   0200 0003                	B T118
0x5E1F                          T117:
                                	;[575] 		SPRITE 6, 0
                                	SRCFILE "samples/pumpkin_master.bas",575
5E1F   01C0                     	CLRR R0
5E20   0240 034E                	MVO R0,_mobs+6
                                	;[576] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",576
0x5E22                          T118:
                                	;[577] 	SPRITE 7, $0300 + px, $0080 + py, $1801 + 2 * 8
                                	SRCFILE "samples/pumpkin_master.bas",577
5E22   0280 0136                	MVI var_PX,R0
5E24   02F8 0300                	ADDI #768,R0
5E26   0240 034F                	MVO R0,_mobs+7
5E28   0280 0137                	MVI var_PY,R0
5E2A   02F8 0080                	ADDI #128,R0
5E2C   0240 0357                	MVO R0,_mobs+15
5E2E   02B8 1811                	MVII #6161,R0
5E30   0240 035F                	MVO R0,_mobs+23
                                	;[578] 	END
                                	SRCFILE "samples/pumpkin_master.bas",578
5E32   02B7                     	RETURN
                                	ENDP
                                	;[579] 
                                	SRCFILE "samples/pumpkin_master.bas",579
                                	;[580] 	'
                                	SRCFILE "samples/pumpkin_master.bas",580
                                	;[581] 	' Update current score
                                	SRCFILE "samples/pumpkin_master.bas",581
                                	;[582] 	'
                                	SRCFILE "samples/pumpkin_master.bas",582
                                	;[583] update_score:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",583
                                	; UPDATE_SCORE
0x5E33                          label_UPDATE_SCORE:	PROC
5E33   0275                     	BEGIN
                                	;[584] 	PRINT AT 0 COLOR 4,"1UP "
                                	SRCFILE "samples/pumpkin_master.bas",584
5E34   02B8 0200                	MVII #512,R0
5E36   0240 0346                	MVO R0,_screen
5E38   02B8 0004                	MVII #4,R0
5E3A   0240 0347                	MVO R0,_color
5E3C   0284 0346                	MVI _screen,R4
5E3E   02B8 0088                	MVII #136,R0
5E40   03C0 0347                	XOR _color,R0
5E42   0260                     	MVO@ R0,R4
5E43   03F8 0120                	XORI #288,R0
5E45   0260                     	MVO@ R0,R4
5E46   03F8 0028                	XORI #40,R0
5E48   0260                     	MVO@ R0,R4
5E49   03F8 0180                	XORI #384,R0
5E4B   0260                     	MVO@ R0,R4
5E4C   0244 0346                	MVO R4,_screen
                                	;[585] 	PRINT COLOR 5,<5>#score,"0"
                                	SRCFILE "samples/pumpkin_master.bas",585
5E4E   02B8 0005                	MVII #5,R0
5E50   0240 0347                	MVO R0,_color
5E52   0280 8041                	MVI var_&SCORE,R0
5E54   02BA 0005                	MVII #5,R2
5E56   0283 0347                	MVI _color,R3
5E58   0284 0346                	MVI _screen,R4
5E5A   0004 01F8 0355           	CALL PRNUM16.z
5E5D   0244 0346                	MVO R4,_screen
5E5F   0284 0346                	MVI _screen,R4
5E61   02B8 0080                	MVII #128,R0
5E63   03C0 0347                	XOR _color,R0
5E65   0260                     	MVO@ R0,R4
5E66   0244 0346                	MVO R4,_screen
                                	;[586] 	END
                                	SRCFILE "samples/pumpkin_master.bas",586
5E68   02B7                     	RETURN
                                	ENDP
                                	;[587] 
                                	SRCFILE "samples/pumpkin_master.bas",587
                                	;[588] 	'
                                	SRCFILE "samples/pumpkin_master.bas",588
                                	;[589] 	' Update level
                                	SRCFILE "samples/pumpkin_master.bas",589
                                	;[590] 	'
                                	SRCFILE "samples/pumpkin_master.bas",590
                                	;[591] update_level:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",591
                                	; UPDATE_LEVEL
0x5E69                          label_UPDATE_LEVEL:	PROC
5E69   0275                     	BEGIN
                                	;[592] 	PRINT AT 12 COLOR 4,"L"
                                	SRCFILE "samples/pumpkin_master.bas",592
5E6A   02B8 020C                	MVII #524,R0
5E6C   0240 0346                	MVO R0,_screen
5E6E   02B8 0004                	MVII #4,R0
5E70   0240 0347                	MVO R0,_color
5E72   0284 0346                	MVI _screen,R4
5E74   02B8 0160                	MVII #352,R0
5E76   03C0 0347                	XOR _color,R0
5E78   0260                     	MVO@ R0,R4
5E79   0244 0346                	MVO R4,_screen
                                	;[593] 	PRINT COLOR 5,<2>level
                                	SRCFILE "samples/pumpkin_master.bas",593
5E7B   02B8 0005                	MVII #5,R0
5E7D   0240 0347                	MVO R0,_color
5E7F   0280 0132                	MVI var_LEVEL,R0
5E81   02BA 0002                	MVII #2,R2
5E83   0283 0347                	MVI _color,R3
5E85   0284 0346                	MVI _screen,R4
5E87   0004 01F8 0355           	CALL PRNUM16.z
5E8A   0244 0346                	MVO R4,_screen
                                	;[594] 	END
                                	SRCFILE "samples/pumpkin_master.bas",594
5E8C   02B7                     	RETURN
                                	ENDP
                                	;[595] 
                                	SRCFILE "samples/pumpkin_master.bas",595
                                	;[596] 	'
                                	SRCFILE "samples/pumpkin_master.bas",596
                                	;[597] 	' Update number of lives
                                	SRCFILE "samples/pumpkin_master.bas",597
                                	;[598] 	'
                                	SRCFILE "samples/pumpkin_master.bas",598
                                	;[599] update_lives:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",599
                                	; UPDATE_LIVES
0x5E8D                          label_UPDATE_LIVES:	PROC
5E8D   0275                     	BEGIN
                                	;[600] 	PRINT AT 18 COLOR 4,"H"
                                	SRCFILE "samples/pumpkin_master.bas",600
5E8E   02B8 0212                	MVII #530,R0
5E90   0240 0346                	MVO R0,_screen
5E92   02B8 0004                	MVII #4,R0
5E94   0240 0347                	MVO R0,_color
5E96   0284 0346                	MVI _screen,R4
5E98   02B8 0140                	MVII #320,R0
5E9A   03C0 0347                	XOR _color,R0
5E9C   0260                     	MVO@ R0,R4
5E9D   0244 0346                	MVO R4,_screen
                                	;[601] 	PRINT COLOR 5,<>lives
                                	SRCFILE "samples/pumpkin_master.bas",601
5E9F   02B8 0005                	MVII #5,R0
5EA1   0240 0347                	MVO R0,_color
5EA3   0280 0133                	MVI var_LIVES,R0
5EA5   0283 0347                	MVI _color,R3
5EA7   0284 0346                	MVI _screen,R4
5EA9   0004 01F8 034A           	CALL PRNUM16.l
5EAC   0244 0346                	MVO R4,_screen
                                	;[602] 	END
                                	SRCFILE "samples/pumpkin_master.bas",602
5EAE   02B7                     	RETURN
                                	ENDP
                                	;[603] 
                                	SRCFILE "samples/pumpkin_master.bas",603
                                	;[604] 	'
                                	SRCFILE "samples/pumpkin_master.bas",604
                                	;[605] 	' Wait and clean story
                                	SRCFILE "samples/pumpkin_master.bas",605
                                	;[606] 	'
                                	SRCFILE "samples/pumpkin_master.bas",606
                                	;[607] wait_and_clean:		PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",607
                                	; WAIT_AND_CLEAN
0x5EAF                          label_WAIT_AND_CLEAN:	PROC
5EAF   0275                     	BEGIN
                                	;[608] 	FOR c = 0 TO 180
                                	SRCFILE "samples/pumpkin_master.bas",608
5EB0   01C0                     	CLRR R0
5EB1   0240 012C                	MVO R0,var_C
0x5EB3                          T119:
                                	;[609] 		IF c >= 60 THEN d = CONT: IF d THEN EXIT FOR
                                	SRCFILE "samples/pumpkin_master.bas",609
5EB3   0280 012C                	MVI var_C,R0
5EB5   0378 003C                	CMPI #60,R0
5EB7   0205 000B                	BLT T120
5EB9   0280 01FE                	MVI 510,R0
5EBB   03C0 01FF                	XOR 511,R0
5EBD   0240 012E                	MVO R0,var_D
5EBF   0280 012E                	MVI var_D,R0
5EC1   0080                     	TSTR R0
5EC2   020C 000C                	BNE T122
0x5EC4                          T120:
                                	;[610] 		WAIT
                                	SRCFILE "samples/pumpkin_master.bas",610
5EC4   0004 01F4 01E2           	CALL _wait
                                	;[611] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",611
5EC7   0280 012C                	MVI var_C,R0
5EC9   0008                     	INCR R0
5ECA   0240 012C                	MVO R0,var_C
5ECC   0378 00B4                	CMPI #180,R0
5ECE   0226 001C                	BLE T119
0x5ED0                          T122:
                                	;[612] 	FOR c = 60 TO 119
                                	SRCFILE "samples/pumpkin_master.bas",612
5ED0   02B8 003C                	MVII #60,R0
5ED2   0240 012C                	MVO R0,var_C
0x5ED4                          T123:
                                	;[613] 		#backtab(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",613
5ED4   01C0                     	CLRR R0
5ED5   02BB 0200                	MVII #Q2,R3
5ED7   02C3 012C                	ADD var_C,R3
5ED9   0258                     	MVO@ R0,R3
                                	;[614] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",614
5EDA   0280 012C                	MVI var_C,R0
5EDC   0008                     	INCR R0
5EDD   0240 012C                	MVO R0,var_C
5EDF   0378 0077                	CMPI #119,R0
5EE1   0226 000E                	BLE T123
                                	;[615] 	END
                                	SRCFILE "samples/pumpkin_master.bas",615
5EE3   02B7                     	RETURN
                                	ENDP
                                	;[616] 
                                	SRCFILE "samples/pumpkin_master.bas",616
                                	;[617] 	'
                                	SRCFILE "samples/pumpkin_master.bas",617
                                	;[618] 	' Start a new attack wave
                                	SRCFILE "samples/pumpkin_master.bas",618
                                	;[619] 	'
                                	SRCFILE "samples/pumpkin_master.bas",619
                                	;[620] start_wave:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",620
                                	; START_WAVE
0x5EE4                          label_START_WAVE:	PROC
5EE4   0275                     	BEGIN
                                	;[621] 	wave = cucu_wave
                                	SRCFILE "samples/pumpkin_master.bas",621
5EE5   0280 012D                	MVI var_CUCU_WAVE,R0
5EE7   0240 013C                	MVO R0,var_WAVE
                                	;[622] 	cucu_wave = cucu_wave + 1
                                	SRCFILE "samples/pumpkin_master.bas",622
5EE9   0008                     	INCR R0
5EEA   0240 012D                	MVO R0,var_CUCU_WAVE
                                	;[623] 	IF cucu_wave = 10 THEN cucu_wave = 0
                                	SRCFILE "samples/pumpkin_master.bas",623
5EEC   0280 012D                	MVI var_CUCU_WAVE,R0
5EEE   0378 000A                	CMPI #10,R0
5EF0   020C 0003                	BNE T124
5EF2   01C0                     	CLRR R0
5EF3   0240 012D                	MVO R0,var_CUCU_WAVE
0x5EF5                          T124:
                                	;[624] '	DO
                                	SRCFILE "samples/pumpkin_master.bas",624
                                	;[625] '		c = RAND(10)
                                	SRCFILE "samples/pumpkin_master.bas",625
                                	;[626] '	LOOP WHILE wave = c
                                	SRCFILE "samples/pumpkin_master.bas",626
                                	;[627] '	wave = c
                                	SRCFILE "samples/pumpkin_master.bas",627
                                	;[628] 	sublevel = sublevel + 1
                                	SRCFILE "samples/pumpkin_master.bas",628
5EF5   0280 013A                	MVI var_SUBLEVEL,R0
5EF7   0008                     	INCR R0
5EF8   0240 013A                	MVO R0,var_SUBLEVEL
                                	;[629] 	next_wave = 30 + RAND(30)
                                	SRCFILE "samples/pumpkin_master.bas",629
5EFA   02B8 001E                	MVII #30,R0
5EFC   0281 0104                	MVI _rand,R1
5EFE   0004 01FC 028B           	CALL qs_mpy8
5F01   0040                     	SWAP R0
5F02   03B8 00FF                	ANDI #255,R0
5F04   02F8 001E                	ADDI #30,R0
5F06   0240 0135                	MVO R0,var_NEXT_WAVE
                                	;[630] 	IF sublevel = 11 THEN
                                	SRCFILE "samples/pumpkin_master.bas",630
5F08   0280 013A                	MVI var_SUBLEVEL,R0
5F0A   0378 000B                	CMPI #11,R0
5F0C   020C 000B                	BNE T125
                                	;[631] 		sublevel = 0
                                	SRCFILE "samples/pumpkin_master.bas",631
5F0E   01C0                     	CLRR R0
5F0F   0240 013A                	MVO R0,var_SUBLEVEL
                                	;[632] 		level = level + 1
                                	SRCFILE "samples/pumpkin_master.bas",632
5F11   0280 0132                	MVI var_LEVEL,R0
5F13   0008                     	INCR R0
5F14   0240 0132                	MVO R0,var_LEVEL
                                	;[633] 		GOSUB update_level
                                	SRCFILE "samples/pumpkin_master.bas",633
5F16   0004 015C 0269           	CALL label_UPDATE_LEVEL
                                	;[634] 	END IF
                                	SRCFILE "samples/pumpkin_master.bas",634
0x5F19                          T125:
                                	;[635] 	END
                                	SRCFILE "samples/pumpkin_master.bas",635
5F19   02B7                     	RETURN
                                	ENDP
                                	;[636] 
                                	SRCFILE "samples/pumpkin_master.bas",636
                                	;[637] 	'
                                	SRCFILE "samples/pumpkin_master.bas",637
                                	;[638] 	' Start wave 0
                                	SRCFILE "samples/pumpkin_master.bas",638
                                	;[639] 	'
                                	SRCFILE "samples/pumpkin_master.bas",639
                                	;[640] start_0:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",640
                                	; START_0
0x5F1A                          label_START_0:	PROC
5F1A   0275                     	BEGIN
                                	;[641] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",641
5F1B   01C0                     	CLRR R0
5F1C   0240 012C                	MVO R0,var_C
0x5F1E                          T126:
                                	;[642] 		x(c) = 168 + c * 12
                                	SRCFILE "samples/pumpkin_master.bas",642
5F1E   0280 012C                	MVI var_C,R0
                                ;	MULT R0,R4,12
                                	;
5F20   004C                                     SLL     R0,  2
5F21   0084                                     MOVR    R0,  R4
5F22   0048                                     SLL     R0,  1
5F23   00E0                                     ADDR    R4,  R0
5F24   02F8 00A8                	ADDI #168,R0
5F26   02BB 0149                	MVII #array_X,R3
5F28   02C3 012C                	ADD var_C,R3
5F2A   0258                     	MVO@ R0,R3
                                	;[643] 		y(c) = 48
                                	SRCFILE "samples/pumpkin_master.bas",643
5F2B   02B8 0030                	MVII #48,R0
5F2D   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
5F2F   0258                     	MVO@ R0,R3
                                	;[644] 		s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",644
5F30   02B8 0001                	MVII #1,R0
5F32   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
5F34   0258                     	MVO@ R0,R3
                                	;[645] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",645
5F35   0280 012C                	MVI var_C,R0
5F37   0008                     	INCR R0
5F38   0240 012C                	MVO R0,var_C
5F3A   0378 0005                	CMPI #5,R0
5F3C   0226 001F                	BLE T126
                                	;[646] 	END
                                	SRCFILE "samples/pumpkin_master.bas",646
5F3E   02B7                     	RETURN
                                	ENDP
                                	;[647] 
                                	SRCFILE "samples/pumpkin_master.bas",647
                                	;[648] 	'
                                	SRCFILE "samples/pumpkin_master.bas",648
                                	;[649] 	' Move wave 0
                                	SRCFILE "samples/pumpkin_master.bas",649
                                	;[650] 	'
                                	SRCFILE "samples/pumpkin_master.bas",650
                                	;[651] move_0:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",651
                                	; MOVE_0
0x5F3F                          label_MOVE_0:	PROC
5F3F   0275                     	BEGIN
                                	;[652] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",652
5F40   01C0                     	CLRR R0
5F41   0240 012C                	MVO R0,var_C
0x5F43                          T127:
                                	;[653] 		ON s(c) GOTO move_00, move_01, move_02, move_03
                                	SRCFILE "samples/pumpkin_master.bas",653
5F43   02BB 0143                	MVII #array_S,R3
5F45   02C3 012C                	ADD var_C,R3
5F47   0299                     	MVI@ R3,R1
5F48   0379 0004                	CMPI #4,R1
5F4A   0201 0007                	BC T129
5F4C   02F9 5F4F                	ADDI #T128,R1
5F4E   028F                     	MVI@ R1,PC
0x5F4F                          T128:
5F4F   5F95                     	DECLE label_MOVE_00
5F50   5F53                     	DECLE label_MOVE_01
5F51   5F67                     	DECLE label_MOVE_02
5F52   5F7F                     	DECLE label_MOVE_03
0x5F53                          T129:
                                	;[654] 
                                	SRCFILE "samples/pumpkin_master.bas",654
                                	;[655] move_01:
                                	SRCFILE "samples/pumpkin_master.bas",655
                                	; MOVE_01
0x5F53                          label_MOVE_01:	;[656] 		x(c) = x(c) - 2
                                	SRCFILE "samples/pumpkin_master.bas",656
5F53   02BB 0149                	MVII #array_X,R3
5F55   02C3 012C                	ADD var_C,R3
5F57   0298                     	MVI@ R3,R0
5F58   0338 0002                	SUBI #2,R0
5F5A   0258                     	MVO@ R0,R3
                                	;[657] 		IF x(c) = 8 THEN s(c) = 2
                                	SRCFILE "samples/pumpkin_master.bas",657
5F5B   0298                     	MVI@ R3,R0
5F5C   0378 0008                	CMPI #8,R0
5F5E   020C 0005                	BNE T130
5F60   02B8 0002                	MVII #2,R0
5F62   02FB FFFA                	ADDI #(array_S-array_X) AND $FFFF,R3
5F64   0258                     	MVO@ R0,R3
0x5F65                          T130:
                                	;[658] 		GOTO move_00
                                	SRCFILE "samples/pumpkin_master.bas",658
5F65   0200 002E                	B label_MOVE_00
                                	;[659] 
                                	SRCFILE "samples/pumpkin_master.bas",659
                                	;[660] move_02:
                                	SRCFILE "samples/pumpkin_master.bas",660
                                	; MOVE_02
0x5F67                          label_MOVE_02:	;[661] 		x(c) = x(c) + 1
                                	SRCFILE "samples/pumpkin_master.bas",661
5F67   02BB 0149                	MVII #array_X,R3
5F69   02C3 012C                	ADD var_C,R3
5F6B   0298                     	MVI@ R3,R0
5F6C   0008                     	INCR R0
5F6D   0258                     	MVO@ R0,R3
                                	;[662] 		y(c) = y(c) - 1
                                	SRCFILE "samples/pumpkin_master.bas",662
5F6E   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
5F70   0298                     	MVI@ R3,R0
5F71   0010                     	DECR R0
5F72   0258                     	MVO@ R0,R3
                                	;[663] 		IF y(c) = 24 THEN s(c) = 3
                                	SRCFILE "samples/pumpkin_master.bas",663
5F73   0298                     	MVI@ R3,R0
5F74   0378 0018                	CMPI #24,R0
5F76   020C 0005                	BNE T131
5F78   02B8 0003                	MVII #3,R0
5F7A   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
5F7C   0258                     	MVO@ R0,R3
0x5F7D                          T131:
                                	;[664] 		GOTO move_00
                                	SRCFILE "samples/pumpkin_master.bas",664
5F7D   0200 0016                	B label_MOVE_00
                                	;[665] 
                                	SRCFILE "samples/pumpkin_master.bas",665
                                	;[666] move_03:	x(c) = x(c) + 2
                                	SRCFILE "samples/pumpkin_master.bas",666
                                	; MOVE_03
5F7F   02BB 0149                label_MOVE_03:		MVII #array_X,R3
5F81   02C3 012C                	ADD var_C,R3
5F83   0298                     	MVI@ R3,R0
5F84   02F8 0002                	ADDI #2,R0
5F86   0258                     	MVO@ R0,R3
                                	;[667] 		IF x(c) = 168 THEN y(c) = 0: s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",667
5F87   0298                     	MVI@ R3,R0
5F88   0378 00A8                	CMPI #168,R0
5F8A   020C 0007                	BNE T132
5F8C   01C0                     	CLRR R0
5F8D   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
5F8F   0258                     	MVO@ R0,R3
5F90   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
5F92   0258                     	MVO@ R0,R3
0x5F93                          T132:
                                	;[668] 		GOTO move_00
                                	SRCFILE "samples/pumpkin_master.bas",668
5F93   0200 0000                	B label_MOVE_00
                                	;[669] 
                                	SRCFILE "samples/pumpkin_master.bas",669
                                	;[670] move_00:
                                	SRCFILE "samples/pumpkin_master.bas",670
                                	; MOVE_00
0x5F95                          label_MOVE_00:	;[671] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",671
5F95   0280 012C                	MVI var_C,R0
5F97   0008                     	INCR R0
5F98   0240 012C                	MVO R0,var_C
5F9A   0378 0005                	CMPI #5,R0
5F9C   0226 005A                	BLE T127
                                	;[672] 	END
                                	SRCFILE "samples/pumpkin_master.bas",672
5F9E   02B7                     	RETURN
                                	ENDP
                                	;[673] 
                                	SRCFILE "samples/pumpkin_master.bas",673
                                	;[674] 	'
                                	SRCFILE "samples/pumpkin_master.bas",674
                                	;[675] 	' Start wave 1
                                	SRCFILE "samples/pumpkin_master.bas",675
                                	;[676] 	'
                                	SRCFILE "samples/pumpkin_master.bas",676
                                	;[677] start_1:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",677
                                	; START_1
0x5F9F                          label_START_1:	PROC
5F9F   0275                     	BEGIN
                                	;[678] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",678
5FA0   01C0                     	CLRR R0
5FA1   0240 012C                	MVO R0,var_C
0x5FA3                          T133:
                                	;[679] 		x(c) = 0 - c * 12
                                	SRCFILE "samples/pumpkin_master.bas",679
5FA3   01C0                     	CLRR R0
5FA4   0281 012C                	MVI var_C,R1
                                ;	MULT R1,R4,12
                                	;
5FA6   004D                                     SLL     R1,  2
5FA7   008C                                     MOVR    R1,  R4
5FA8   0049                                     SLL     R1,  1
5FA9   00E1                                     ADDR    R4,  R1
5FAA   0108                     	SUBR R1,R0
5FAB   02BB 0149                	MVII #array_X,R3
5FAD   02C3 012C                	ADD var_C,R3
5FAF   0258                     	MVO@ R0,R3
                                	;[680] 		y(c) = 48
                                	SRCFILE "samples/pumpkin_master.bas",680
5FB0   02B8 0030                	MVII #48,R0
5FB2   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
5FB4   0258                     	MVO@ R0,R3
                                	;[681] 		s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",681
5FB5   02B8 0001                	MVII #1,R0
5FB7   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
5FB9   0258                     	MVO@ R0,R3
                                	;[682] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",682
5FBA   0280 012C                	MVI var_C,R0
5FBC   0008                     	INCR R0
5FBD   0240 012C                	MVO R0,var_C
5FBF   0378 0005                	CMPI #5,R0
5FC1   0226 001F                	BLE T133
                                	;[683] 	END
                                	SRCFILE "samples/pumpkin_master.bas",683
5FC3   02B7                     	RETURN
                                	ENDP
                                	;[684] 
                                	SRCFILE "samples/pumpkin_master.bas",684
                                	;[685] 	'
                                	SRCFILE "samples/pumpkin_master.bas",685
                                	;[686] 	' Move wave 1
                                	SRCFILE "samples/pumpkin_master.bas",686
                                	;[687] 	'
                                	SRCFILE "samples/pumpkin_master.bas",687
                                	;[688] move_1:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",688
                                	; MOVE_1
0x5FC4                          label_MOVE_1:	PROC
5FC4   0275                     	BEGIN
                                	;[689] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",689
5FC5   01C0                     	CLRR R0
5FC6   0240 012C                	MVO R0,var_C
0x5FC8                          T134:
                                	;[690] 		ON s(c) GOTO move_010, move_011, move_012, move_013
                                	SRCFILE "samples/pumpkin_master.bas",690
5FC8   02BB 0143                	MVII #array_S,R3
5FCA   02C3 012C                	ADD var_C,R3
5FCC   0299                     	MVI@ R3,R1
5FCD   0379 0004                	CMPI #4,R1
5FCF   0201 0007                	BC T136
5FD1   02F9 5FD4                	ADDI #T135,R1
5FD3   028F                     	MVI@ R1,PC
0x5FD4                          T135:
5FD4   6018                     	DECLE label_MOVE_010
5FD5   5FD8                     	DECLE label_MOVE_011
5FD6   5FEC                     	DECLE label_MOVE_012
5FD7   6004                     	DECLE label_MOVE_013
0x5FD8                          T136:
                                	;[691] 
                                	SRCFILE "samples/pumpkin_master.bas",691
                                	;[692] move_011:
                                	SRCFILE "samples/pumpkin_master.bas",692
                                	; MOVE_011
0x5FD8                          label_MOVE_011:	;[693] 		x(c) = x(c) + 2
                                	SRCFILE "samples/pumpkin_master.bas",693
5FD8   02BB 0149                	MVII #array_X,R3
5FDA   02C3 012C                	ADD var_C,R3
5FDC   0298                     	MVI@ R3,R0
5FDD   02F8 0002                	ADDI #2,R0
5FDF   0258                     	MVO@ R0,R3
                                	;[694] 		IF x(c) = 160 THEN s(c) = 2
                                	SRCFILE "samples/pumpkin_master.bas",694
5FE0   0298                     	MVI@ R3,R0
5FE1   0378 00A0                	CMPI #160,R0
5FE3   020C 0005                	BNE T137
5FE5   02B8 0002                	MVII #2,R0
5FE7   02FB FFFA                	ADDI #(array_S-array_X) AND $FFFF,R3
5FE9   0258                     	MVO@ R0,R3
0x5FEA                          T137:
                                	;[695] 		GOTO move_010
                                	SRCFILE "samples/pumpkin_master.bas",695
5FEA   0200 002C                	B label_MOVE_010
                                	;[696] 
                                	SRCFILE "samples/pumpkin_master.bas",696
                                	;[697] move_012:
                                	SRCFILE "samples/pumpkin_master.bas",697
                                	; MOVE_012
0x5FEC                          label_MOVE_012:	;[698] 		x(c) = x(c) - 1
                                	SRCFILE "samples/pumpkin_master.bas",698
5FEC   02BB 0149                	MVII #array_X,R3
5FEE   02C3 012C                	ADD var_C,R3
5FF0   0298                     	MVI@ R3,R0
5FF1   0010                     	DECR R0
5FF2   0258                     	MVO@ R0,R3
                                	;[699] 		y(c) = y(c) - 1
                                	SRCFILE "samples/pumpkin_master.bas",699
5FF3   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
5FF5   0298                     	MVI@ R3,R0
5FF6   0010                     	DECR R0
5FF7   0258                     	MVO@ R0,R3
                                	;[700] 		IF y(c) = 24 THEN s(c) = 3
                                	SRCFILE "samples/pumpkin_master.bas",700
5FF8   0298                     	MVI@ R3,R0
5FF9   0378 0018                	CMPI #24,R0
5FFB   020C 0005                	BNE T138
5FFD   02B8 0003                	MVII #3,R0
5FFF   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
6001   0258                     	MVO@ R0,R3
0x6002                          T138:
                                	;[701] 		GOTO move_010
                                	SRCFILE "samples/pumpkin_master.bas",701
6002   0200 0014                	B label_MOVE_010
                                	;[702] 
                                	SRCFILE "samples/pumpkin_master.bas",702
                                	;[703] move_013:	x(c) = x(c) - 2
                                	SRCFILE "samples/pumpkin_master.bas",703
                                	; MOVE_013
6004   02BB 0149                label_MOVE_013:		MVII #array_X,R3
6006   02C3 012C                	ADD var_C,R3
6008   0298                     	MVI@ R3,R0
6009   0338 0002                	SUBI #2,R0
600B   0258                     	MVO@ R0,R3
                                	;[704] 		IF x(c) = 0 THEN y(c) = 0: s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",704
600C   0298                     	MVI@ R3,R0
600D   0080                     	TSTR R0
600E   020C 0006                	BNE T139
6010   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6012   0258                     	MVO@ R0,R3
6013   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
6015   0258                     	MVO@ R0,R3
0x6016                          T139:
                                	;[705] 		GOTO move_010
                                	SRCFILE "samples/pumpkin_master.bas",705
6016   0200 0000                	B label_MOVE_010
                                	;[706] 
                                	SRCFILE "samples/pumpkin_master.bas",706
                                	;[707] move_010:
                                	SRCFILE "samples/pumpkin_master.bas",707
                                	; MOVE_010
0x6018                          label_MOVE_010:	;[708] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",708
6018   0280 012C                	MVI var_C,R0
601A   0008                     	INCR R0
601B   0240 012C                	MVO R0,var_C
601D   0378 0005                	CMPI #5,R0
601F   0226 0058                	BLE T134
                                	;[709] 	END
                                	SRCFILE "samples/pumpkin_master.bas",709
6021   02B7                     	RETURN
                                	ENDP
                                	;[710] 
                                	SRCFILE "samples/pumpkin_master.bas",710
                                	;[711] 	'
                                	SRCFILE "samples/pumpkin_master.bas",711
                                	;[712] 	' Start wave 2
                                	SRCFILE "samples/pumpkin_master.bas",712
                                	;[713] 	'
                                	SRCFILE "samples/pumpkin_master.bas",713
                                	;[714] start_2:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",714
                                	; START_2
0x6022                          label_START_2:	PROC
6022   0275                     	BEGIN
                                	;[715] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",715
6023   01C0                     	CLRR R0
6024   0240 012C                	MVO R0,var_C
0x6026                          T140:
                                	;[716] 		x(c) = 168 + c * 12
                                	SRCFILE "samples/pumpkin_master.bas",716
6026   0280 012C                	MVI var_C,R0
                                ;	MULT R0,R4,12
                                	;
6028   004C                                     SLL     R0,  2
6029   0084                                     MOVR    R0,  R4
602A   0048                                     SLL     R0,  1
602B   00E0                                     ADDR    R4,  R0
602C   02F8 00A8                	ADDI #168,R0
602E   02BB 0149                	MVII #array_X,R3
6030   02C3 012C                	ADD var_C,R3
6032   0258                     	MVO@ R0,R3
                                	;[717] 		y(c) = 48
                                	SRCFILE "samples/pumpkin_master.bas",717
6033   02B8 0030                	MVII #48,R0
6035   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6037   0258                     	MVO@ R0,R3
                                	;[718] 		s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",718
6038   02B8 0001                	MVII #1,R0
603A   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
603C   0258                     	MVO@ R0,R3
                                	;[719] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",719
603D   0280 012C                	MVI var_C,R0
603F   0008                     	INCR R0
6040   0240 012C                	MVO R0,var_C
6042   0378 0005                	CMPI #5,R0
6044   0226 001F                	BLE T140
                                	;[720] 	END
                                	SRCFILE "samples/pumpkin_master.bas",720
6046   02B7                     	RETURN
                                	ENDP
                                	;[721] 
                                	SRCFILE "samples/pumpkin_master.bas",721
                                	;[722] 	'
                                	SRCFILE "samples/pumpkin_master.bas",722
                                	;[723] 	' Move wave 2
                                	SRCFILE "samples/pumpkin_master.bas",723
                                	;[724] 	'
                                	SRCFILE "samples/pumpkin_master.bas",724
                                	;[725] move_2:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",725
                                	; MOVE_2
0x6047                          label_MOVE_2:	PROC
6047   0275                     	BEGIN
                                	;[726] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",726
6048   01C0                     	CLRR R0
6049   0240 012C                	MVO R0,var_C
0x604B                          T141:
                                	;[727] 		ON s(c) GOTO move_020, move_021
                                	SRCFILE "samples/pumpkin_master.bas",727
604B   02BB 0143                	MVII #array_S,R3
604D   02C3 012C                	ADD var_C,R3
604F   0299                     	MVI@ R3,R1
6050   0379 0002                	CMPI #2,R1
6052   0201 0005                	BC T143
6054   02F9 6057                	ADDI #T142,R1
6056   028F                     	MVI@ R1,PC
0x6057                          T142:
6057   607C                     	DECLE label_MOVE_020
6058   6059                     	DECLE label_MOVE_021
0x6059                          T143:
                                	;[728] 
                                	SRCFILE "samples/pumpkin_master.bas",728
                                	;[729] move_021:
                                	SRCFILE "samples/pumpkin_master.bas",729
                                	; MOVE_021
0x6059                          label_MOVE_021:	;[730] 		x(c) = x(c) - 2
                                	SRCFILE "samples/pumpkin_master.bas",730
6059   02BB 0149                	MVII #array_X,R3
605B   02C3 012C                	ADD var_C,R3
605D   0298                     	MVI@ R3,R0
605E   0338 0002                	SUBI #2,R0
6060   0258                     	MVO@ R0,R3
                                	;[731] 		y(c) = 24 + sin24((x(c) AND $3e) / 2)
                                	SRCFILE "samples/pumpkin_master.bas",731
6061   02B9 6495                	MVII #label_SIN24,R1
6063   029A                     	MVI@ R3,R2
6064   03BA 003E                	ANDI #62,R2
6066   0062                     	SLR R2,1
6067   00D1                     	ADDR R2,R1
6068   0288                     	MVI@ R1,R0
6069   02F8 0018                	ADDI #24,R0
606B   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
606D   0258                     	MVO@ R0,R3
                                	;[732] 		IF x(c) = 0 THEN y(c) = 0: s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",732
606E   02FB FFFA                	ADDI #(array_X-array_Y) AND $FFFF,R3
6070   0298                     	MVI@ R3,R0
6071   0080                     	TSTR R0
6072   020C 0006                	BNE T144
6074   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6076   0258                     	MVO@ R0,R3
6077   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
6079   0258                     	MVO@ R0,R3
0x607A                          T144:
                                	;[733] 		GOTO move_020
                                	SRCFILE "samples/pumpkin_master.bas",733
607A   0200 0000                	B label_MOVE_020
                                	;[734] 
                                	SRCFILE "samples/pumpkin_master.bas",734
                                	;[735] move_020:
                                	SRCFILE "samples/pumpkin_master.bas",735
                                	; MOVE_020
0x607C                          label_MOVE_020:	;[736] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",736
607C   0280 012C                	MVI var_C,R0
607E   0008                     	INCR R0
607F   0240 012C                	MVO R0,var_C
6081   0378 0005                	CMPI #5,R0
6083   0226 0039                	BLE T141
                                	;[737] 	END
                                	SRCFILE "samples/pumpkin_master.bas",737
6085   02B7                     	RETURN
                                	ENDP
                                	;[738] 
                                	SRCFILE "samples/pumpkin_master.bas",738
                                	;[739] 	'
                                	SRCFILE "samples/pumpkin_master.bas",739
                                	;[740] 	' Start wave 3
                                	SRCFILE "samples/pumpkin_master.bas",740
                                	;[741] 	'
                                	SRCFILE "samples/pumpkin_master.bas",741
                                	;[742] start_3:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",742
                                	; START_3
0x6086                          label_START_3:	PROC
6086   0275                     	BEGIN
                                	;[743] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",743
6087   01C0                     	CLRR R0
6088   0240 012C                	MVO R0,var_C
0x608A                          T145:
                                	;[744] 		x(c) = 0 - c * 12
                                	SRCFILE "samples/pumpkin_master.bas",744
608A   01C0                     	CLRR R0
608B   0281 012C                	MVI var_C,R1
                                ;	MULT R1,R4,12
                                	;
608D   004D                                     SLL     R1,  2
608E   008C                                     MOVR    R1,  R4
608F   0049                                     SLL     R1,  1
6090   00E1                                     ADDR    R4,  R1
6091   0108                     	SUBR R1,R0
6092   02BB 0149                	MVII #array_X,R3
6094   02C3 012C                	ADD var_C,R3
6096   0258                     	MVO@ R0,R3
                                	;[745] 		y(c) = 48
                                	SRCFILE "samples/pumpkin_master.bas",745
6097   02B8 0030                	MVII #48,R0
6099   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
609B   0258                     	MVO@ R0,R3
                                	;[746] 		s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",746
609C   02B8 0001                	MVII #1,R0
609E   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
60A0   0258                     	MVO@ R0,R3
                                	;[747] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",747
60A1   0280 012C                	MVI var_C,R0
60A3   0008                     	INCR R0
60A4   0240 012C                	MVO R0,var_C
60A6   0378 0005                	CMPI #5,R0
60A8   0226 001F                	BLE T145
                                	;[748] 	END
                                	SRCFILE "samples/pumpkin_master.bas",748
60AA   02B7                     	RETURN
                                	ENDP
                                	;[749] 
                                	SRCFILE "samples/pumpkin_master.bas",749
                                	;[750] 	'
                                	SRCFILE "samples/pumpkin_master.bas",750
                                	;[751] 	' Move wave 3
                                	SRCFILE "samples/pumpkin_master.bas",751
                                	;[752] 	'
                                	SRCFILE "samples/pumpkin_master.bas",752
                                	;[753] move_3:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",753
                                	; MOVE_3
0x60AB                          label_MOVE_3:	PROC
60AB   0275                     	BEGIN
                                	;[754] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",754
60AC   01C0                     	CLRR R0
60AD   0240 012C                	MVO R0,var_C
0x60AF                          T146:
                                	;[755] 		ON s(c) GOTO move_030, move_031
                                	SRCFILE "samples/pumpkin_master.bas",755
60AF   02BB 0143                	MVII #array_S,R3
60B1   02C3 012C                	ADD var_C,R3
60B3   0299                     	MVI@ R3,R1
60B4   0379 0002                	CMPI #2,R1
60B6   0201 0005                	BC T148
60B8   02F9 60BB                	ADDI #T147,R1
60BA   028F                     	MVI@ R1,PC
0x60BB                          T147:
60BB   60E2                     	DECLE label_MOVE_030
60BC   60BD                     	DECLE label_MOVE_031
0x60BD                          T148:
                                	;[756] 
                                	SRCFILE "samples/pumpkin_master.bas",756
                                	;[757] move_031:
                                	SRCFILE "samples/pumpkin_master.bas",757
                                	; MOVE_031
0x60BD                          label_MOVE_031:	;[758] 		x(c) = x(c) + 2
                                	SRCFILE "samples/pumpkin_master.bas",758
60BD   02BB 0149                	MVII #array_X,R3
60BF   02C3 012C                	ADD var_C,R3
60C1   0298                     	MVI@ R3,R0
60C2   02F8 0002                	ADDI #2,R0
60C4   0258                     	MVO@ R0,R3
                                	;[759] 		y(c) = 24 + sin24((x(c) AND $3e) / 2)
                                	SRCFILE "samples/pumpkin_master.bas",759
60C5   02B9 6495                	MVII #label_SIN24,R1
60C7   029A                     	MVI@ R3,R2
60C8   03BA 003E                	ANDI #62,R2
60CA   0062                     	SLR R2,1
60CB   00D1                     	ADDR R2,R1
60CC   0288                     	MVI@ R1,R0
60CD   02F8 0018                	ADDI #24,R0
60CF   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
60D1   0258                     	MVO@ R0,R3
                                	;[760] 		IF x(c) = 168 THEN y(c) = 0: s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",760
60D2   02FB FFFA                	ADDI #(array_X-array_Y) AND $FFFF,R3
60D4   0298                     	MVI@ R3,R0
60D5   0378 00A8                	CMPI #168,R0
60D7   020C 0007                	BNE T149
60D9   01C0                     	CLRR R0
60DA   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
60DC   0258                     	MVO@ R0,R3
60DD   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
60DF   0258                     	MVO@ R0,R3
0x60E0                          T149:
                                	;[761] 		GOTO move_030
                                	SRCFILE "samples/pumpkin_master.bas",761
60E0   0200 0000                	B label_MOVE_030
                                	;[762] 
                                	SRCFILE "samples/pumpkin_master.bas",762
                                	;[763] move_030:
                                	SRCFILE "samples/pumpkin_master.bas",763
                                	; MOVE_030
0x60E2                          label_MOVE_030:	;[764] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",764
60E2   0280 012C                	MVI var_C,R0
60E4   0008                     	INCR R0
60E5   0240 012C                	MVO R0,var_C
60E7   0378 0005                	CMPI #5,R0
60E9   0226 003B                	BLE T146
                                	;[765] 	END
                                	SRCFILE "samples/pumpkin_master.bas",765
60EB   02B7                     	RETURN
                                	ENDP
                                	;[766] 
                                	SRCFILE "samples/pumpkin_master.bas",766
                                	;[767] 	'
                                	SRCFILE "samples/pumpkin_master.bas",767
                                	;[768] 	' Start wave 4
                                	SRCFILE "samples/pumpkin_master.bas",768
                                	;[769] 	'
                                	SRCFILE "samples/pumpkin_master.bas",769
                                	;[770] start_4:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",770
                                	; START_4
0x60EC                          label_START_4:	PROC
60EC   0275                     	BEGIN
                                	;[771] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",771
60ED   01C0                     	CLRR R0
60EE   0240 012C                	MVO R0,var_C
0x60F0                          T150:
                                	;[772] 		x(c) = 0 - c * 12
                                	SRCFILE "samples/pumpkin_master.bas",772
60F0   01C0                     	CLRR R0
60F1   0281 012C                	MVI var_C,R1
                                ;	MULT R1,R4,12
                                	;
60F3   004D                                     SLL     R1,  2
60F4   008C                                     MOVR    R1,  R4
60F5   0049                                     SLL     R1,  1
60F6   00E1                                     ADDR    R4,  R1
60F7   0108                     	SUBR R1,R0
60F8   02BB 0149                	MVII #array_X,R3
60FA   02C3 012C                	ADD var_C,R3
60FC   0258                     	MVO@ R0,R3
                                	;[773] 		y(c) = 24
                                	SRCFILE "samples/pumpkin_master.bas",773
60FD   02B8 0018                	MVII #24,R0
60FF   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6101   0258                     	MVO@ R0,R3
                                	;[774] 		s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",774
6102   02B8 0001                	MVII #1,R0
6104   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
6106   0258                     	MVO@ R0,R3
                                	;[775] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",775
6107   0280 012C                	MVI var_C,R0
6109   0008                     	INCR R0
610A   0240 012C                	MVO R0,var_C
610C   0378 0005                	CMPI #5,R0
610E   0226 001F                	BLE T150
                                	;[776] 	END
                                	SRCFILE "samples/pumpkin_master.bas",776
6110   02B7                     	RETURN
                                	ENDP
                                	;[777] 
                                	SRCFILE "samples/pumpkin_master.bas",777
                                	;[778] 	'
                                	SRCFILE "samples/pumpkin_master.bas",778
                                	;[779] 	' Move wave 4
                                	SRCFILE "samples/pumpkin_master.bas",779
                                	;[780] 	'
                                	SRCFILE "samples/pumpkin_master.bas",780
                                	;[781] move_4:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",781
                                	; MOVE_4
0x6111                          label_MOVE_4:	PROC
6111   0275                     	BEGIN
                                	;[782] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",782
6112   01C0                     	CLRR R0
6113   0240 012C                	MVO R0,var_C
0x6115                          T151:
                                	;[783] 		ON s(c) GOTO move_040, move_041, move_042, move_043
                                	SRCFILE "samples/pumpkin_master.bas",783
6115   02BB 0143                	MVII #array_S,R3
6117   02C3 012C                	ADD var_C,R3
6119   0299                     	MVI@ R3,R1
611A   0379 0004                	CMPI #4,R1
611C   0201 0007                	BC T153
611E   02F9 6121                	ADDI #T152,R1
6120   028F                     	MVI@ R1,PC
0x6121                          T152:
6121   6172                     	DECLE label_MOVE_040
6122   6125                     	DECLE label_MOVE_041
6123   6139                     	DECLE label_MOVE_042
6124   615A                     	DECLE label_MOVE_043
0x6125                          T153:
                                	;[784] 
                                	SRCFILE "samples/pumpkin_master.bas",784
                                	;[785] move_041:
                                	SRCFILE "samples/pumpkin_master.bas",785
                                	; MOVE_041
0x6125                          label_MOVE_041:	;[786] 		x(c) = x(c) + 2
                                	SRCFILE "samples/pumpkin_master.bas",786
6125   02BB 0149                	MVII #array_X,R3
6127   02C3 012C                	ADD var_C,R3
6129   0298                     	MVI@ R3,R0
612A   02F8 0002                	ADDI #2,R0
612C   0258                     	MVO@ R0,R3
                                	;[787] 		IF x(c) = 90 THEN s(c) = 2
                                	SRCFILE "samples/pumpkin_master.bas",787
612D   0298                     	MVI@ R3,R0
612E   0378 005A                	CMPI #90,R0
6130   020C 0005                	BNE T154
6132   02B8 0002                	MVII #2,R0
6134   02FB FFFA                	ADDI #(array_S-array_X) AND $FFFF,R3
6136   0258                     	MVO@ R0,R3
0x6137                          T154:
                                	;[788] 		GOTO move_040
                                	SRCFILE "samples/pumpkin_master.bas",788
6137   0200 0039                	B label_MOVE_040
                                	;[789] 
                                	SRCFILE "samples/pumpkin_master.bas",789
                                	;[790] move_042:
                                	SRCFILE "samples/pumpkin_master.bas",790
                                	; MOVE_042
0x6139                          label_MOVE_042:	;[791] 		y(c) = y(c) + 1
                                	SRCFILE "samples/pumpkin_master.bas",791
6139   02BB 014F                	MVII #array_Y,R3
613B   02C3 012C                	ADD var_C,R3
613D   0298                     	MVI@ R3,R0
613E   0008                     	INCR R0
613F   0258                     	MVO@ R0,R3
                                	;[792] 		x(c) = 72 + sin24(y(c) AND $1f)
                                	SRCFILE "samples/pumpkin_master.bas",792
6140   02B9 6495                	MVII #label_SIN24,R1
6142   029A                     	MVI@ R3,R2
6143   03BA 001F                	ANDI #31,R2
6145   00D1                     	ADDR R2,R1
6146   0288                     	MVI@ R1,R0
6147   02F8 0048                	ADDI #72,R0
6149   02FB FFFA                	ADDI #(array_X-array_Y) AND $FFFF,R3
614B   0258                     	MVO@ R0,R3
                                	;[793] 		IF y(c) = 80 THEN s(c) = 3
                                	SRCFILE "samples/pumpkin_master.bas",793
614C   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
614E   0298                     	MVI@ R3,R0
614F   0378 0050                	CMPI #80,R0
6151   020C 0005                	BNE T155
6153   02B8 0003                	MVII #3,R0
6155   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
6157   0258                     	MVO@ R0,R3
0x6158                          T155:
                                	;[794] 		GOTO move_040
                                	SRCFILE "samples/pumpkin_master.bas",794
6158   0200 0018                	B label_MOVE_040
                                	;[795] 
                                	SRCFILE "samples/pumpkin_master.bas",795
                                	;[796] move_043:
                                	SRCFILE "samples/pumpkin_master.bas",796
                                	; MOVE_043
0x615A                          label_MOVE_043:	;[797] 		x(c) = (x(c) AND $fe) + 2
                                	SRCFILE "samples/pumpkin_master.bas",797
615A   02BB 0149                	MVII #array_X,R3
615C   02C3 012C                	ADD var_C,R3
615E   0298                     	MVI@ R3,R0
615F   03B8 00FE                	ANDI #254,R0
6161   02F8 0002                	ADDI #2,R0
6163   0258                     	MVO@ R0,R3
                                	;[798] 		IF x(c) = 168 THEN y(c) = 0: s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",798
6164   0298                     	MVI@ R3,R0
6165   0378 00A8                	CMPI #168,R0
6167   020C 0007                	BNE T156
6169   01C0                     	CLRR R0
616A   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
616C   0258                     	MVO@ R0,R3
616D   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
616F   0258                     	MVO@ R0,R3
0x6170                          T156:
                                	;[799] 		GOTO move_040
                                	SRCFILE "samples/pumpkin_master.bas",799
6170   0200 0000                	B label_MOVE_040
                                	;[800] 
                                	SRCFILE "samples/pumpkin_master.bas",800
                                	;[801] move_040:
                                	SRCFILE "samples/pumpkin_master.bas",801
                                	; MOVE_040
0x6172                          label_MOVE_040:	;[802] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",802
6172   0280 012C                	MVI var_C,R0
6174   0008                     	INCR R0
6175   0240 012C                	MVO R0,var_C
6177   0378 0005                	CMPI #5,R0
6179   0226 0065                	BLE T151
                                	;[803] 	END
                                	SRCFILE "samples/pumpkin_master.bas",803
617B   02B7                     	RETURN
                                	ENDP
                                	;[804] 
                                	SRCFILE "samples/pumpkin_master.bas",804
                                	;[805] 	'
                                	SRCFILE "samples/pumpkin_master.bas",805
                                	;[806] 	' Start wave 5
                                	SRCFILE "samples/pumpkin_master.bas",806
                                	;[807] 	'
                                	SRCFILE "samples/pumpkin_master.bas",807
                                	;[808] start_5:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",808
                                	; START_5
0x617C                          label_START_5:	PROC
617C   0275                     	BEGIN
                                	;[809] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",809
617D   01C0                     	CLRR R0
617E   0240 012C                	MVO R0,var_C
0x6180                          T157:
                                	;[810] 		x(c) = 168 + RANDOM(32) * 2
                                	SRCFILE "samples/pumpkin_master.bas",810
6180   0004 01F4 02F5           	CALL _next_random
6183   03B8 001F                	ANDI #31,R0
6185   0048                     	SLL R0,1
6186   02F8 00A8                	ADDI #168,R0
6188   02BB 0149                	MVII #array_X,R3
618A   02C3 012C                	ADD var_C,R3
618C   0258                     	MVO@ R0,R3
                                	;[811] 		y(c) = 24 + c * 8
                                	SRCFILE "samples/pumpkin_master.bas",811
618D   0280 012C                	MVI var_C,R0
618F   004C                     	SLL R0,2
6190   00C0                     	ADDR R0,R0
6191   02F8 0018                	ADDI #24,R0
6193   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6195   0258                     	MVO@ R0,R3
                                	;[812] 		s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",812
6196   02B8 0001                	MVII #1,R0
6198   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
619A   0258                     	MVO@ R0,R3
                                	;[813] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",813
619B   0280 012C                	MVI var_C,R0
619D   0008                     	INCR R0
619E   0240 012C                	MVO R0,var_C
61A0   0378 0005                	CMPI #5,R0
61A2   0226 0023                	BLE T157
                                	;[814] 	END
                                	SRCFILE "samples/pumpkin_master.bas",814
61A4   02B7                     	RETURN
                                	ENDP
                                	;[815] 
                                	SRCFILE "samples/pumpkin_master.bas",815
                                	;[816] 	'
                                	SRCFILE "samples/pumpkin_master.bas",816
                                	;[817] 	' Move wave 5
                                	SRCFILE "samples/pumpkin_master.bas",817
                                	;[818] 	'
                                	SRCFILE "samples/pumpkin_master.bas",818
                                	;[819] move_5:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",819
                                	; MOVE_5
0x61A5                          label_MOVE_5:	PROC
61A5   0275                     	BEGIN
                                	;[820] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",820
61A6   01C0                     	CLRR R0
61A7   0240 012C                	MVO R0,var_C
0x61A9                          T158:
                                	;[821] 		ON s(c) GOTO move_050, move_051
                                	SRCFILE "samples/pumpkin_master.bas",821
61A9   02BB 0143                	MVII #array_S,R3
61AB   02C3 012C                	ADD var_C,R3
61AD   0299                     	MVI@ R3,R1
61AE   0379 0002                	CMPI #2,R1
61B0   0201 0005                	BC T160
61B2   02F9 61B5                	ADDI #T159,R1
61B4   028F                     	MVI@ R1,PC
0x61B5                          T159:
61B5   61CB                     	DECLE label_MOVE_050
61B6   61B7                     	DECLE label_MOVE_051
0x61B7                          T160:
                                	;[822] 
                                	SRCFILE "samples/pumpkin_master.bas",822
                                	;[823] move_051:
                                	SRCFILE "samples/pumpkin_master.bas",823
                                	; MOVE_051
0x61B7                          label_MOVE_051:	;[824] 		x(c) = x(c) - 2
                                	SRCFILE "samples/pumpkin_master.bas",824
61B7   02BB 0149                	MVII #array_X,R3
61B9   02C3 012C                	ADD var_C,R3
61BB   0298                     	MVI@ R3,R0
61BC   0338 0002                	SUBI #2,R0
61BE   0258                     	MVO@ R0,R3
                                	;[825] 		IF x(c) = 0 THEN y(c) = 0: s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",825
61BF   0298                     	MVI@ R3,R0
61C0   0080                     	TSTR R0
61C1   020C 0006                	BNE T161
61C3   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
61C5   0258                     	MVO@ R0,R3
61C6   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
61C8   0258                     	MVO@ R0,R3
0x61C9                          T161:
                                	;[826] 		GOTO move_050
                                	SRCFILE "samples/pumpkin_master.bas",826
61C9   0200 0000                	B label_MOVE_050
                                	;[827] 
                                	SRCFILE "samples/pumpkin_master.bas",827
                                	;[828] move_050:
                                	SRCFILE "samples/pumpkin_master.bas",828
                                	; MOVE_050
0x61CB                          label_MOVE_050:	;[829] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",829
61CB   0280 012C                	MVI var_C,R0
61CD   0008                     	INCR R0
61CE   0240 012C                	MVO R0,var_C
61D0   0378 0005                	CMPI #5,R0
61D2   0226 002A                	BLE T158
                                	;[830] 	END
                                	SRCFILE "samples/pumpkin_master.bas",830
61D4   02B7                     	RETURN
                                	ENDP
                                	;[831] 
                                	SRCFILE "samples/pumpkin_master.bas",831
                                	;[832] 	'
                                	SRCFILE "samples/pumpkin_master.bas",832
                                	;[833] 	' Start wave 6
                                	SRCFILE "samples/pumpkin_master.bas",833
                                	;[834] 	'
                                	SRCFILE "samples/pumpkin_master.bas",834
                                	;[835] start_6:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",835
                                	; START_6
0x61D5                          label_START_6:	PROC
61D5   0275                     	BEGIN
                                	;[836] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",836
61D6   01C0                     	CLRR R0
61D7   0240 012C                	MVO R0,var_C
0x61D9                          T162:
                                	;[837] 		IF c AND 1 THEN
                                	SRCFILE "samples/pumpkin_master.bas",837
61D9   0280 012C                	MVI var_C,R0
61DB   03B8 0001                	ANDI #1,R0
61DD   0204 0014                	BEQ T163
                                	;[838] 			x(c) = 168 + RANDOM(32) * 2
                                	SRCFILE "samples/pumpkin_master.bas",838
61DF   0004 01F4 02F5           	CALL _next_random
61E2   03B8 001F                	ANDI #31,R0
61E4   0048                     	SLL R0,1
61E5   02F8 00A8                	ADDI #168,R0
61E7   02BB 0149                	MVII #array_X,R3
61E9   02C3 012C                	ADD var_C,R3
61EB   0258                     	MVO@ R0,R3
                                	;[839] 			s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",839
61EC   02B8 0001                	MVII #1,R0
61EE   02FB FFFA                	ADDI #(array_S-array_X) AND $FFFF,R3
61F0   0258                     	MVO@ R0,R3
                                	;[840] 		ELSE
                                	SRCFILE "samples/pumpkin_master.bas",840
61F1   0200 0011                	B T164
0x61F3                          T163:
                                	;[841] 			x(c) = 0 - RANDOM(32) * 2
                                	SRCFILE "samples/pumpkin_master.bas",841
61F3   0004 01F4 02F5           	CALL _next_random
61F6   03B8 001F                	ANDI #31,R0
61F8   0048                     	SLL R0,1
61F9   0020                     	NEGR R0
61FA   02BB 0149                	MVII #array_X,R3
61FC   02C3 012C                	ADD var_C,R3
61FE   0258                     	MVO@ R0,R3
                                	;[842] 			s(c) = 2
                                	SRCFILE "samples/pumpkin_master.bas",842
61FF   02B8 0002                	MVII #2,R0
6201   02FB FFFA                	ADDI #(array_S-array_X) AND $FFFF,R3
6203   0258                     	MVO@ R0,R3
                                	;[843] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",843
0x6204                          T164:
                                	;[844] 		y(c) = 24 + c * 8
                                	SRCFILE "samples/pumpkin_master.bas",844
6204   0280 012C                	MVI var_C,R0
6206   004C                     	SLL R0,2
6207   00C0                     	ADDR R0,R0
6208   02F8 0018                	ADDI #24,R0
620A   02BB 014F                	MVII #array_Y,R3
620C   02C3 012C                	ADD var_C,R3
620E   0258                     	MVO@ R0,R3
                                	;[845] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",845
620F   0280 012C                	MVI var_C,R0
6211   0008                     	INCR R0
6212   0240 012C                	MVO R0,var_C
6214   0378 0005                	CMPI #5,R0
6216   0226 003E                	BLE T162
                                	;[846] 	END
                                	SRCFILE "samples/pumpkin_master.bas",846
6218   02B7                     	RETURN
                                	ENDP
                                	;[847] 
                                	SRCFILE "samples/pumpkin_master.bas",847
                                	;[848] 	'
                                	SRCFILE "samples/pumpkin_master.bas",848
                                	;[849] 	' Move wave 6
                                	SRCFILE "samples/pumpkin_master.bas",849
                                	;[850] 	'
                                	SRCFILE "samples/pumpkin_master.bas",850
                                	;[851] move_6:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",851
                                	; MOVE_6
0x6219                          label_MOVE_6:	PROC
6219   0275                     	BEGIN
                                	;[852] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",852
621A   01C0                     	CLRR R0
621B   0240 012C                	MVO R0,var_C
0x621D                          T165:
                                	;[853] 		ON s(c) GOTO move_060, move_061, move_062
                                	SRCFILE "samples/pumpkin_master.bas",853
621D   02BB 0143                	MVII #array_S,R3
621F   02C3 012C                	ADD var_C,R3
6221   0299                     	MVI@ R3,R1
6222   0379 0003                	CMPI #3,R1
6224   0201 0006                	BC T167
6226   02F9 6229                	ADDI #T166,R1
6228   028F                     	MVI@ R1,PC
0x6229                          T166:
6229   6256                     	DECLE label_MOVE_060
622A   622C                     	DECLE label_MOVE_061
622B   6240                     	DECLE label_MOVE_062
0x622C                          T167:
                                	;[854] 
                                	SRCFILE "samples/pumpkin_master.bas",854
                                	;[855] move_061:
                                	SRCFILE "samples/pumpkin_master.bas",855
                                	; MOVE_061
0x622C                          label_MOVE_061:	;[856] 		x(c) = x(c) - 2
                                	SRCFILE "samples/pumpkin_master.bas",856
622C   02BB 0149                	MVII #array_X,R3
622E   02C3 012C                	ADD var_C,R3
6230   0298                     	MVI@ R3,R0
6231   0338 0002                	SUBI #2,R0
6233   0258                     	MVO@ R0,R3
                                	;[857] 		IF x(c) = 0 THEN y(c) = 0: s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",857
6234   0298                     	MVI@ R3,R0
6235   0080                     	TSTR R0
6236   020C 0006                	BNE T168
6238   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
623A   0258                     	MVO@ R0,R3
623B   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
623D   0258                     	MVO@ R0,R3
0x623E                          T168:
                                	;[858] 		GOTO move_060
                                	SRCFILE "samples/pumpkin_master.bas",858
623E   0200 0016                	B label_MOVE_060
                                	;[859] 
                                	SRCFILE "samples/pumpkin_master.bas",859
                                	;[860] move_062:
                                	SRCFILE "samples/pumpkin_master.bas",860
                                	; MOVE_062
0x6240                          label_MOVE_062:	;[861] 		x(c) = x(c) + 2
                                	SRCFILE "samples/pumpkin_master.bas",861
6240   02BB 0149                	MVII #array_X,R3
6242   02C3 012C                	ADD var_C,R3
6244   0298                     	MVI@ R3,R0
6245   02F8 0002                	ADDI #2,R0
6247   0258                     	MVO@ R0,R3
                                	;[862] 		IF x(c) = 168 THEN y(c) = 0: s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",862
6248   0298                     	MVI@ R3,R0
6249   0378 00A8                	CMPI #168,R0
624B   020C 0007                	BNE T169
624D   01C0                     	CLRR R0
624E   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6250   0258                     	MVO@ R0,R3
6251   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
6253   0258                     	MVO@ R0,R3
0x6254                          T169:
                                	;[863] 		GOTO move_060
                                	SRCFILE "samples/pumpkin_master.bas",863
6254   0200 0000                	B label_MOVE_060
                                	;[864] 
                                	SRCFILE "samples/pumpkin_master.bas",864
                                	;[865] move_060:
                                	SRCFILE "samples/pumpkin_master.bas",865
                                	; MOVE_060
0x6256                          label_MOVE_060:	;[866] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",866
6256   0280 012C                	MVI var_C,R0
6258   0008                     	INCR R0
6259   0240 012C                	MVO R0,var_C
625B   0378 0005                	CMPI #5,R0
625D   0226 0041                	BLE T165
                                	;[867] 	END
                                	SRCFILE "samples/pumpkin_master.bas",867
625F   02B7                     	RETURN
                                	ENDP
                                	;[868] 
                                	SRCFILE "samples/pumpkin_master.bas",868
                                	;[869] 	'
                                	SRCFILE "samples/pumpkin_master.bas",869
                                	;[870] 	' Start wave 7
                                	SRCFILE "samples/pumpkin_master.bas",870
                                	;[871] 	'
                                	SRCFILE "samples/pumpkin_master.bas",871
                                	;[872] start_7:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",872
                                	; START_7
0x6260                          label_START_7:	PROC
6260   0275                     	BEGIN
                                	;[873] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",873
6261   01C0                     	CLRR R0
6262   0240 012C                	MVO R0,var_C
0x6264                          T170:
                                	;[874] 		d = c % 3
                                	SRCFILE "samples/pumpkin_master.bas",874
6264   0280 012C                	MVI var_C,R0
6266   02BC 0003                	MVII #3,R4
6268   0240 9F8A                	MVO R0,40842
626A   0244 9F8B                	MVO R4,40843
626C   0280 9F8F                	MVI 40847,R0
626E   0240 012E                	MVO R0,var_D
                                	;[875] 		IF d = 0 THEN x(c) = 0 - c / 3 * 32:y(c) = 24
                                	SRCFILE "samples/pumpkin_master.bas",875
6270   0280 012E                	MVI var_D,R0
6272   0080                     	TSTR R0
6273   020C 0018                	BNE T171
6275   0281 012C                	MVI var_C,R1
6277   02BC 0003                	MVII #3,R4
6279   0241 9F8A                	MVO R1,40842
627B   0244 9F8B                	MVO R4,40843
627D   0281 9F8E                	MVI 40846,R1
627F   004D                     	SLL R1,2
6280   004D                     	SLL R1,2
6281   00C9                     	ADDR R1,R1
6282   0108                     	SUBR R1,R0
6283   02BB 0149                	MVII #array_X,R3
6285   02C3 012C                	ADD var_C,R3
6287   0258                     	MVO@ R0,R3
6288   02B8 0018                	MVII #24,R0
628A   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
628C   0258                     	MVO@ R0,R3
0x628D                          T171:
                                	;[876] 		IF d = 1 THEN x(c) = 0 - c / 3 * 32:y(c) = 40
                                	SRCFILE "samples/pumpkin_master.bas",876
628D   0280 012E                	MVI var_D,R0
628F   0378 0001                	CMPI #1,R0
6291   020C 0019                	BNE T172
6293   01C0                     	CLRR R0
6294   0281 012C                	MVI var_C,R1
6296   02BC 0003                	MVII #3,R4
6298   0241 9F8A                	MVO R1,40842
629A   0244 9F8B                	MVO R4,40843
629C   0281 9F8E                	MVI 40846,R1
629E   004D                     	SLL R1,2
629F   004D                     	SLL R1,2
62A0   00C9                     	ADDR R1,R1
62A1   0108                     	SUBR R1,R0
62A2   02BB 0149                	MVII #array_X,R3
62A4   02C3 012C                	ADD var_C,R3
62A6   0258                     	MVO@ R0,R3
62A7   02B8 0028                	MVII #40,R0
62A9   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
62AB   0258                     	MVO@ R0,R3
0x62AC                          T172:
                                	;[877] 		IF d = 2 THEN x(c) = -16 - c / 3 * 32: y(c) = 32
                                	SRCFILE "samples/pumpkin_master.bas",877
62AC   0280 012E                	MVI var_D,R0
62AE   0378 0002                	CMPI #2,R0
62B0   020C 001A                	BNE T173
62B2   02B8 FFF0                	MVII #65520,R0
62B4   0281 012C                	MVI var_C,R1
62B6   02BC 0003                	MVII #3,R4
62B8   0241 9F8A                	MVO R1,40842
62BA   0244 9F8B                	MVO R4,40843
62BC   0281 9F8E                	MVI 40846,R1
62BE   004D                     	SLL R1,2
62BF   004D                     	SLL R1,2
62C0   00C9                     	ADDR R1,R1
62C1   0108                     	SUBR R1,R0
62C2   02BB 0149                	MVII #array_X,R3
62C4   02C3 012C                	ADD var_C,R3
62C6   0258                     	MVO@ R0,R3
62C7   02B8 0020                	MVII #32,R0
62C9   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
62CB   0258                     	MVO@ R0,R3
0x62CC                          T173:
                                	;[878] 		s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",878
62CC   02B8 0001                	MVII #1,R0
62CE   02BB 0143                	MVII #array_S,R3
62D0   02C3 012C                	ADD var_C,R3
62D2   0258                     	MVO@ R0,R3
                                	;[879] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",879
62D3   0280 012C                	MVI var_C,R0
62D5   0008                     	INCR R0
62D6   0240 012C                	MVO R0,var_C
62D8   0378 0005                	CMPI #5,R0
62DA   0226 0077                	BLE T170
                                	;[880] 	END
                                	SRCFILE "samples/pumpkin_master.bas",880
62DC   02B7                     	RETURN
                                	ENDP
                                	;[881] 
                                	SRCFILE "samples/pumpkin_master.bas",881
                                	;[882] 	'
                                	SRCFILE "samples/pumpkin_master.bas",882
                                	;[883] 	' Move wave 7
                                	SRCFILE "samples/pumpkin_master.bas",883
                                	;[884] 	'
                                	SRCFILE "samples/pumpkin_master.bas",884
                                	;[885] move_7:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",885
                                	; MOVE_7
0x62DD                          label_MOVE_7:	PROC
62DD   0275                     	BEGIN
                                	;[886] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",886
62DE   01C0                     	CLRR R0
62DF   0240 012C                	MVO R0,var_C
0x62E1                          T174:
                                	;[887] 		ON s(c) GOTO move_70, move_71
                                	SRCFILE "samples/pumpkin_master.bas",887
62E1   02BB 0143                	MVII #array_S,R3
62E3   02C3 012C                	ADD var_C,R3
62E5   0299                     	MVI@ R3,R1
62E6   0379 0002                	CMPI #2,R1
62E8   0201 0005                	BC T176
62EA   02F9 62ED                	ADDI #T175,R1
62EC   028F                     	MVI@ R1,PC
0x62ED                          T175:
62ED   6305                     	DECLE label_MOVE_70
62EE   62EF                     	DECLE label_MOVE_71
0x62EF                          T176:
                                	;[888] 
                                	SRCFILE "samples/pumpkin_master.bas",888
                                	;[889] move_71:
                                	SRCFILE "samples/pumpkin_master.bas",889
                                	; MOVE_71
0x62EF                          label_MOVE_71:	;[890] 		x(c) = x(c) + 2
                                	SRCFILE "samples/pumpkin_master.bas",890
62EF   02BB 0149                	MVII #array_X,R3
62F1   02C3 012C                	ADD var_C,R3
62F3   0298                     	MVI@ R3,R0
62F4   02F8 0002                	ADDI #2,R0
62F6   0258                     	MVO@ R0,R3
                                	;[891] 		IF x(c) = 168 THEN y(c) = 0: s(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",891
62F7   0298                     	MVI@ R3,R0
62F8   0378 00A8                	CMPI #168,R0
62FA   020C 0007                	BNE T177
62FC   01C0                     	CLRR R0
62FD   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
62FF   0258                     	MVO@ R0,R3
6300   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
6302   0258                     	MVO@ R0,R3
0x6303                          T177:
                                	;[892] 		GOTO move_70
                                	SRCFILE "samples/pumpkin_master.bas",892
6303   0200 0000                	B label_MOVE_70
                                	;[893] 
                                	SRCFILE "samples/pumpkin_master.bas",893
                                	;[894] move_70:
                                	SRCFILE "samples/pumpkin_master.bas",894
                                	; MOVE_70
0x6305                          label_MOVE_70:	;[895] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",895
6305   0280 012C                	MVI var_C,R0
6307   0008                     	INCR R0
6308   0240 012C                	MVO R0,var_C
630A   0378 0005                	CMPI #5,R0
630C   0226 002C                	BLE T174
                                	;[896] 	END
                                	SRCFILE "samples/pumpkin_master.bas",896
630E   02B7                     	RETURN
                                	ENDP
                                	;[897] 
                                	SRCFILE "samples/pumpkin_master.bas",897
                                	;[898] 	'
                                	SRCFILE "samples/pumpkin_master.bas",898
                                	;[899] 	' Start wave 8
                                	SRCFILE "samples/pumpkin_master.bas",899
                                	;[900] 	'
                                	SRCFILE "samples/pumpkin_master.bas",900
                                	;[901] start_8:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",901
                                	; START_8
0x630F                          label_START_8:	PROC
630F   0275                     	BEGIN
                                	;[902] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",902
6310   01C0                     	CLRR R0
6311   0240 012C                	MVO R0,var_C
0x6313                          T178:
                                	;[903] 		x(c) = 0 - c * 12
                                	SRCFILE "samples/pumpkin_master.bas",903
6313   01C0                     	CLRR R0
6314   0281 012C                	MVI var_C,R1
                                ;	MULT R1,R4,12
                                	;
6316   004D                                     SLL     R1,  2
6317   008C                                     MOVR    R1,  R4
6318   0049                                     SLL     R1,  1
6319   00E1                                     ADDR    R4,  R1
631A   0108                     	SUBR R1,R0
631B   02BB 0149                	MVII #array_X,R3
631D   02C3 012C                	ADD var_C,R3
631F   0258                     	MVO@ R0,R3
                                	;[904] 		y(c) = 24
                                	SRCFILE "samples/pumpkin_master.bas",904
6320   02B8 0018                	MVII #24,R0
6322   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6324   0258                     	MVO@ R0,R3
                                	;[905] 		s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",905
6325   02B8 0001                	MVII #1,R0
6327   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
6329   0258                     	MVO@ R0,R3
                                	;[906] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",906
632A   0280 012C                	MVI var_C,R0
632C   0008                     	INCR R0
632D   0240 012C                	MVO R0,var_C
632F   0378 0005                	CMPI #5,R0
6331   0226 001F                	BLE T178
                                	;[907] 	END
                                	SRCFILE "samples/pumpkin_master.bas",907
6333   02B7                     	RETURN
                                	ENDP
                                	;[908] 
                                	SRCFILE "samples/pumpkin_master.bas",908
                                	;[909] 	'
                                	SRCFILE "samples/pumpkin_master.bas",909
                                	;[910] 	' Move wave 8
                                	SRCFILE "samples/pumpkin_master.bas",910
                                	;[911] 	'
                                	SRCFILE "samples/pumpkin_master.bas",911
                                	;[912] move_8:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",912
                                	; MOVE_8
0x6334                          label_MOVE_8:	PROC
6334   0275                     	BEGIN
                                	;[913] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",913
6335   01C0                     	CLRR R0
6336   0240 012C                	MVO R0,var_C
0x6338                          T179:
                                	;[914] 		ON s(c) GOTO move_080, move_081, move_082, move_083, move_084, move_085
                                	SRCFILE "samples/pumpkin_master.bas",914
6338   02BB 0143                	MVII #array_S,R3
633A   02C3 012C                	ADD var_C,R3
633C   0299                     	MVI@ R3,R1
633D   0379 0006                	CMPI #6,R1
633F   0201 0009                	BC T181
6341   02F9 6344                	ADDI #T180,R1
6343   028F                     	MVI@ R1,PC
0x6344                          T180:
6344   63C4                     	DECLE label_MOVE_080
6345   634A                     	DECLE label_MOVE_081
6346   635E                     	DECLE label_MOVE_082
6347   6384                     	DECLE label_MOVE_083
6348   6398                     	DECLE label_MOVE_084
6349   63B0                     	DECLE label_MOVE_085
0x634A                          T181:
                                	;[915] 
                                	SRCFILE "samples/pumpkin_master.bas",915
                                	;[916] move_081:
                                	SRCFILE "samples/pumpkin_master.bas",916
                                	; MOVE_081
0x634A                          label_MOVE_081:	;[917] 		x(c) = x(c) + 2
                                	SRCFILE "samples/pumpkin_master.bas",917
634A   02BB 0149                	MVII #array_X,R3
634C   02C3 012C                	ADD var_C,R3
634E   0298                     	MVI@ R3,R0
634F   02F8 0002                	ADDI #2,R0
6351   0258                     	MVO@ R0,R3
                                	;[918] 		IF x(c) = 160 THEN s(c) = 2
                                	SRCFILE "samples/pumpkin_master.bas",918
6352   0298                     	MVI@ R3,R0
6353   0378 00A0                	CMPI #160,R0
6355   020C 0005                	BNE T182
6357   02B8 0002                	MVII #2,R0
6359   02FB FFFA                	ADDI #(array_S-array_X) AND $FFFF,R3
635B   0258                     	MVO@ R0,R3
0x635C                          T182:
                                	;[919] 		GOTO move_080
                                	SRCFILE "samples/pumpkin_master.bas",919
635C   0200 0066                	B label_MOVE_080
                                	;[920] 
                                	SRCFILE "samples/pumpkin_master.bas",920
                                	;[921] move_082:
                                	SRCFILE "samples/pumpkin_master.bas",921
                                	; MOVE_082
0x635E                          label_MOVE_082:	;[922] 		x(c) = x(c) - 1
                                	SRCFILE "samples/pumpkin_master.bas",922
635E   02BB 0149                	MVII #array_X,R3
6360   02C3 012C                	ADD var_C,R3
6362   0298                     	MVI@ R3,R0
6363   0010                     	DECR R0
6364   0258                     	MVO@ R0,R3
                                	;[923] 		y(c) = y(c) + 1
                                	SRCFILE "samples/pumpkin_master.bas",923
6365   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6367   0298                     	MVI@ R3,R0
6368   0008                     	INCR R0
6369   0258                     	MVO@ R0,R3
                                	;[924] 		IF (y(c) AND 7) = 0 THEN IF y(c) = 80 THEN s(c) = 5 ELSE s(c) = 3
                                	SRCFILE "samples/pumpkin_master.bas",924
636A   0298                     	MVI@ R3,R0
636B   03B8 0007                	ANDI #7,R0
636D   020C 0013                	BNE T183
636F   0298                     	MVI@ R3,R0
6370   0378 0050                	CMPI #80,R0
6372   020C 0007                	BNE T184
6374   02B8 0005                	MVII #5,R0
6376   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
6378   0258                     	MVO@ R0,R3
6379   0200 0007                	B T185
0x637B                          T184:
637B   02B8 0003                	MVII #3,R0
637D   02BB 0143                	MVII #array_S,R3
637F   02C3 012C                	ADD var_C,R3
6381   0258                     	MVO@ R0,R3
0x6382                          T185:
0x6382                          T183:
                                	;[925] 		GOTO move_080
                                	SRCFILE "samples/pumpkin_master.bas",925
6382   0200 0040                	B label_MOVE_080
                                	;[926] 
                                	SRCFILE "samples/pumpkin_master.bas",926
                                	;[927] move_083:	x(c) = x(c) - 2
                                	SRCFILE "samples/pumpkin_master.bas",927
                                	; MOVE_083
6384   02BB 0149                label_MOVE_083:		MVII #array_X,R3
6386   02C3 012C                	ADD var_C,R3
6388   0298                     	MVI@ R3,R0
6389   0338 0002                	SUBI #2,R0
638B   0258                     	MVO@ R0,R3
                                	;[928] 		IF x(c) = 8 THEN s(c) = 4
                                	SRCFILE "samples/pumpkin_master.bas",928
638C   0298                     	MVI@ R3,R0
638D   0378 0008                	CMPI #8,R0
638F   020C 0005                	BNE T186
6391   02B8 0004                	MVII #4,R0
6393   02FB FFFA                	ADDI #(array_S-array_X) AND $FFFF,R3
6395   0258                     	MVO@ R0,R3
0x6396                          T186:
                                	;[929] 		GOTO move_080
                                	SRCFILE "samples/pumpkin_master.bas",929
6396   0200 002C                	B label_MOVE_080
                                	;[930] 
                                	SRCFILE "samples/pumpkin_master.bas",930
                                	;[931] move_084:
                                	SRCFILE "samples/pumpkin_master.bas",931
                                	; MOVE_084
0x6398                          label_MOVE_084:	;[932] 		x(c) = x(c) + 1
                                	SRCFILE "samples/pumpkin_master.bas",932
6398   02BB 0149                	MVII #array_X,R3
639A   02C3 012C                	ADD var_C,R3
639C   0298                     	MVI@ R3,R0
639D   0008                     	INCR R0
639E   0258                     	MVO@ R0,R3
                                	;[933] 		y(c) = y(c) + 1
                                	SRCFILE "samples/pumpkin_master.bas",933
639F   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
63A1   0298                     	MVI@ R3,R0
63A2   0008                     	INCR R0
63A3   0258                     	MVO@ R0,R3
                                	;[934] 		IF (y(c) AND 7) = 0 THEN s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",934
63A4   0298                     	MVI@ R3,R0
63A5   03B8 0007                	ANDI #7,R0
63A7   020C 0005                	BNE T187
63A9   02B8 0001                	MVII #1,R0
63AB   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
63AD   0258                     	MVO@ R0,R3
0x63AE                          T187:
                                	;[935] 		GOTO move_080
                                	SRCFILE "samples/pumpkin_master.bas",935
63AE   0200 0014                	B label_MOVE_080
                                	;[936] 
                                	SRCFILE "samples/pumpkin_master.bas",936
                                	;[937] move_085:
                                	SRCFILE "samples/pumpkin_master.bas",937
                                	; MOVE_085
0x63B0                          label_MOVE_085:	;[938] 		x(c) = x(c) - 2
                                	SRCFILE "samples/pumpkin_master.bas",938
63B0   02BB 0149                	MVII #array_X,R3
63B2   02C3 012C                	ADD var_C,R3
63B4   0298                     	MVI@ R3,R0
63B5   0338 0002                	SUBI #2,R0
63B7   0258                     	MVO@ R0,R3
                                	;[939] 		IF x(c) = 0 THEN s(c) = 0: y(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",939
63B8   0298                     	MVI@ R3,R0
63B9   0080                     	TSTR R0
63BA   020C 0006                	BNE T188
63BC   02FB FFFA                	ADDI #(array_S-array_X) AND $FFFF,R3
63BE   0258                     	MVO@ R0,R3
63BF   02FB 000C                	ADDI #(array_Y-array_S) AND $FFFF,R3
63C1   0258                     	MVO@ R0,R3
0x63C2                          T188:
                                	;[940] 		GOTO move_080
                                	SRCFILE "samples/pumpkin_master.bas",940
63C2   0200 0000                	B label_MOVE_080
                                	;[941] 
                                	SRCFILE "samples/pumpkin_master.bas",941
                                	;[942] move_080:
                                	SRCFILE "samples/pumpkin_master.bas",942
                                	; MOVE_080
0x63C4                          label_MOVE_080:	;[943] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",943
63C4   0280 012C                	MVI var_C,R0
63C6   0008                     	INCR R0
63C7   0240 012C                	MVO R0,var_C
63C9   0378 0005                	CMPI #5,R0
63CB   0226 0094                	BLE T179
                                	;[944] 	END
                                	SRCFILE "samples/pumpkin_master.bas",944
63CD   02B7                     	RETURN
                                	ENDP
                                	;[945] 
                                	SRCFILE "samples/pumpkin_master.bas",945
                                	;[946] 	'
                                	SRCFILE "samples/pumpkin_master.bas",946
                                	;[947] 	' Start wave 9
                                	SRCFILE "samples/pumpkin_master.bas",947
                                	;[948] 	'
                                	SRCFILE "samples/pumpkin_master.bas",948
                                	;[949] start_9:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",949
                                	; START_9
0x63CE                          label_START_9:	PROC
63CE   0275                     	BEGIN
                                	;[950] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",950
63CF   01C0                     	CLRR R0
63D0   0240 012C                	MVO R0,var_C
0x63D2                          T189:
                                	;[951] 		IF c AND 1 THEN
                                	SRCFILE "samples/pumpkin_master.bas",951
63D2   0280 012C                	MVI var_C,R0
63D4   03B8 0001                	ANDI #1,R0
63D6   0204 0016                	BEQ T190
                                	;[952] 			x(c) = 0 - c / 2 * 24
                                	SRCFILE "samples/pumpkin_master.bas",952
63D8   01C0                     	CLRR R0
63D9   0281 012C                	MVI var_C,R1
63DB   0061                     	SLR R1,1
                                ;	MULT R1,R4,24
                                	;
63DC   004D                                     SLL     R1,  2
63DD   0049                                     SLL     R1,  1
63DE   008C                                     MOVR    R1,  R4
63DF   0049                                     SLL     R1,  1
63E0   00E1                                     ADDR    R4,  R1
63E1   0108                     	SUBR R1,R0
63E2   02BB 0149                	MVII #array_X,R3
63E4   02C3 012C                	ADD var_C,R3
63E6   0258                     	MVO@ R0,R3
                                	;[953] 			y(c) = 24
                                	SRCFILE "samples/pumpkin_master.bas",953
63E7   02B8 0018                	MVII #24,R0
63E9   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
63EB   0258                     	MVO@ R0,R3
                                	;[954] 		ELSE
                                	SRCFILE "samples/pumpkin_master.bas",954
63EC   0200 0014                	B T191
0x63EE                          T190:
                                	;[955] 			x(c) = 0 - c / 2 * 24
                                	SRCFILE "samples/pumpkin_master.bas",955
63EE   01C0                     	CLRR R0
63EF   0281 012C                	MVI var_C,R1
63F1   0061                     	SLR R1,1
                                ;	MULT R1,R4,24
                                	;
63F2   004D                                     SLL     R1,  2
63F3   0049                                     SLL     R1,  1
63F4   008C                                     MOVR    R1,  R4
63F5   0049                                     SLL     R1,  1
63F6   00E1                                     ADDR    R4,  R1
63F7   0108                     	SUBR R1,R0
63F8   02BB 0149                	MVII #array_X,R3
63FA   02C3 012C                	ADD var_C,R3
63FC   0258                     	MVO@ R0,R3
                                	;[956] 			y(c) = 40
                                	SRCFILE "samples/pumpkin_master.bas",956
63FD   02B8 0028                	MVII #40,R0
63FF   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6401   0258                     	MVO@ R0,R3
                                	;[957] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",957
0x6402                          T191:
                                	;[958] 		s(c) = 1
                                	SRCFILE "samples/pumpkin_master.bas",958
6402   02B8 0001                	MVII #1,R0
6404   02BB 0143                	MVII #array_S,R3
6406   02C3 012C                	ADD var_C,R3
6408   0258                     	MVO@ R0,R3
                                	;[959] 		z(c) = 54
                                	SRCFILE "samples/pumpkin_master.bas",959
6409   02B8 0036                	MVII #54,R0
640B   02FB 0012                	ADDI #(array_Z-array_S) AND $FFFF,R3
640D   0258                     	MVO@ R0,R3
                                	;[960] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",960
640E   0280 012C                	MVI var_C,R0
6410   0008                     	INCR R0
6411   0240 012C                	MVO R0,var_C
6413   0378 0005                	CMPI #5,R0
6415   0226 0044                	BLE T189
                                	;[961] 	END
                                	SRCFILE "samples/pumpkin_master.bas",961
6417   02B7                     	RETURN
                                	ENDP
                                	;[962] 
                                	SRCFILE "samples/pumpkin_master.bas",962
                                	;[963] 	'
                                	SRCFILE "samples/pumpkin_master.bas",963
                                	;[964] 	' Move wave 9
                                	SRCFILE "samples/pumpkin_master.bas",964
                                	;[965] 	'
                                	SRCFILE "samples/pumpkin_master.bas",965
                                	;[966] move_9:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",966
                                	; MOVE_9
0x6418                          label_MOVE_9:	PROC
6418   0275                     	BEGIN
                                	;[967] 	FOR c = 0 TO PUMPKINS - 1
                                	SRCFILE "samples/pumpkin_master.bas",967
6419   01C0                     	CLRR R0
641A   0240 012C                	MVO R0,var_C
0x641C                          T192:
                                	;[968] 		ON s(c) GOTO move_090, move_091, move_092, move_093
                                	SRCFILE "samples/pumpkin_master.bas",968
641C   02BB 0143                	MVII #array_S,R3
641E   02C3 012C                	ADD var_C,R3
6420   0299                     	MVI@ R3,R1
6421   0379 0004                	CMPI #4,R1
6423   0201 0007                	BC T194
6425   02F9 6428                	ADDI #T193,R1
6427   028F                     	MVI@ R1,PC
0x6428                          T193:
6428   648B                     	DECLE label_MOVE_090
6429   642C                     	DECLE label_MOVE_091
642A   6444                     	DECLE label_MOVE_092
642B   6475                     	DECLE label_MOVE_093
0x642C                          T194:
                                	;[969] 
                                	SRCFILE "samples/pumpkin_master.bas",969
                                	;[970] move_091:
                                	SRCFILE "samples/pumpkin_master.bas",970
                                	; MOVE_091
0x642C                          label_MOVE_091:	;[971] 		x(c) = x(c) + 2
                                	SRCFILE "samples/pumpkin_master.bas",971
642C   02BB 0149                	MVII #array_X,R3
642E   02C3 012C                	ADD var_C,R3
6430   0298                     	MVI@ R3,R0
6431   02F8 0002                	ADDI #2,R0
6433   0258                     	MVO@ R0,R3
                                	;[972] 		z(c) = z(c) - 1
                                	SRCFILE "samples/pumpkin_master.bas",972
6434   02FB 000C                	ADDI #(array_Z-array_X) AND $FFFF,R3
6436   0298                     	MVI@ R3,R0
6437   0010                     	DECR R0
6438   0258                     	MVO@ R0,R3
                                	;[973] 		IF z(c) = 0 THEN s(c) = 2
                                	SRCFILE "samples/pumpkin_master.bas",973
6439   0298                     	MVI@ R3,R0
643A   0080                     	TSTR R0
643B   020C 0005                	BNE T195
643D   02B8 0002                	MVII #2,R0
643F   02FB FFEE                	ADDI #(array_S-array_Z) AND $FFFF,R3
6441   0258                     	MVO@ R0,R3
0x6442                          T195:
                                	;[974] 		GOTO move_090
                                	SRCFILE "samples/pumpkin_master.bas",974
6442   0200 0047                	B label_MOVE_090
                                	;[975] 
                                	SRCFILE "samples/pumpkin_master.bas",975
                                	;[976] move_092:
                                	SRCFILE "samples/pumpkin_master.bas",976
                                	; MOVE_092
0x6444                          label_MOVE_092:	;[977] 		IF y(c) AND 8 THEN
                                	SRCFILE "samples/pumpkin_master.bas",977
6444   02BB 014F                	MVII #array_Y,R3
6446   02C3 012C                	ADD var_C,R3
6448   0298                     	MVI@ R3,R0
6449   03B8 0008                	ANDI #8,R0
644B   0204 000C                	BEQ T196
                                	;[978] 			x(c) = x(c) - 1
                                	SRCFILE "samples/pumpkin_master.bas",978
644D   02FB FFFA                	ADDI #(array_X-array_Y) AND $FFFF,R3
644F   0298                     	MVI@ R3,R0
6450   0010                     	DECR R0
6451   0258                     	MVO@ R0,R3
                                	;[979] 			y(c) = y(c) + 1
                                	SRCFILE "samples/pumpkin_master.bas",979
6452   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6454   0298                     	MVI@ R3,R0
6455   0008                     	INCR R0
6456   0258                     	MVO@ R0,R3
                                	;[980] 		ELSE
                                	SRCFILE "samples/pumpkin_master.bas",980
6457   0200 000C                	B T197
0x6459                          T196:
                                	;[981] 			x(c) = x(c) + 1
                                	SRCFILE "samples/pumpkin_master.bas",981
6459   02BB 0149                	MVII #array_X,R3
645B   02C3 012C                	ADD var_C,R3
645D   0298                     	MVI@ R3,R0
645E   0008                     	INCR R0
645F   0258                     	MVO@ R0,R3
                                	;[982] 			y(c) = y(c) + 1
                                	SRCFILE "samples/pumpkin_master.bas",982
6460   02FB 0006                	ADDI #(array_Y-array_X) AND $FFFF,R3
6462   0298                     	MVI@ R3,R0
6463   0008                     	INCR R0
6464   0258                     	MVO@ R0,R3
                                	;[983] 		END IF
                                	SRCFILE "samples/pumpkin_master.bas",983
0x6465                          T197:
                                	;[984] 		IF y(c) = 80 THEN s(c) = 3
                                	SRCFILE "samples/pumpkin_master.bas",984
6465   02BB 014F                	MVII #array_Y,R3
6467   02C3 012C                	ADD var_C,R3
6469   0298                     	MVI@ R3,R0
646A   0378 0050                	CMPI #80,R0
646C   020C 0005                	BNE T198
646E   02B8 0003                	MVII #3,R0
6470   02FB FFF4                	ADDI #(array_S-array_Y) AND $FFFF,R3
6472   0258                     	MVO@ R0,R3
0x6473                          T198:
                                	;[985] 		GOTO move_090
                                	SRCFILE "samples/pumpkin_master.bas",985
6473   0200 0016                	B label_MOVE_090
                                	;[986] 
                                	SRCFILE "samples/pumpkin_master.bas",986
                                	;[987] move_093:
                                	SRCFILE "samples/pumpkin_master.bas",987
                                	; MOVE_093
0x6475                          label_MOVE_093:	;[988] 		x(c) = x(c) + 2
                                	SRCFILE "samples/pumpkin_master.bas",988
6475   02BB 0149                	MVII #array_X,R3
6477   02C3 012C                	ADD var_C,R3
6479   0298                     	MVI@ R3,R0
647A   02F8 0002                	ADDI #2,R0
647C   0258                     	MVO@ R0,R3
                                	;[989] 		IF x(c) >= 168 THEN s(c) = 0: y(c) = 0
                                	SRCFILE "samples/pumpkin_master.bas",989
647D   0298                     	MVI@ R3,R0
647E   0378 00A8                	CMPI #168,R0
6480   0205 0007                	BLT T199
6482   01C0                     	CLRR R0
6483   02FB FFFA                	ADDI #(array_S-array_X) AND $FFFF,R3
6485   0258                     	MVO@ R0,R3
6486   02FB 000C                	ADDI #(array_Y-array_S) AND $FFFF,R3
6488   0258                     	MVO@ R0,R3
0x6489                          T199:
                                	;[990] 		GOTO move_090
                                	SRCFILE "samples/pumpkin_master.bas",990
6489   0200 0000                	B label_MOVE_090
                                	;[991] 
                                	SRCFILE "samples/pumpkin_master.bas",991
                                	;[992] move_090:
                                	SRCFILE "samples/pumpkin_master.bas",992
                                	; MOVE_090
0x648B                          label_MOVE_090:	;[993] 	NEXT c
                                	SRCFILE "samples/pumpkin_master.bas",993
648B   0280 012C                	MVI var_C,R0
648D   0008                     	INCR R0
648E   0240 012C                	MVO R0,var_C
6490   0378 0005                	CMPI #5,R0
6492   0226 0077                	BLE T192
                                	;[994] 	END
                                	SRCFILE "samples/pumpkin_master.bas",994
6494   02B7                     	RETURN
                                	ENDP
                                	;[995] 
                                	SRCFILE "samples/pumpkin_master.bas",995
                                	;[996] 	'
                                	SRCFILE "samples/pumpkin_master.bas",996
                                	;[997] 	' Sine table for curvy movement
                                	SRCFILE "samples/pumpkin_master.bas",997
                                	;[998] 	'
                                	SRCFILE "samples/pumpkin_master.bas",998
                                	;[999] sin24:
                                	SRCFILE "samples/pumpkin_master.bas",999
                                	; SIN24
0x6495                          label_SIN24:	;[1000] 	DATA 0,2,5,7,9,11,13,15
                                	SRCFILE "samples/pumpkin_master.bas",1000
6495   0000                     	DECLE 0
6496   0002                     	DECLE 2
6497   0005                     	DECLE 5
6498   0007                     	DECLE 7
6499   0009                     	DECLE 9
649A   000B                     	DECLE 11
649B   000D                     	DECLE 13
649C   000F                     	DECLE 15
                                	;[1001] 	DATA 17,19,20,21,22,23,24,24
                                	SRCFILE "samples/pumpkin_master.bas",1001
649D   0011                     	DECLE 17
649E   0013                     	DECLE 19
649F   0014                     	DECLE 20
64A0   0015                     	DECLE 21
64A1   0016                     	DECLE 22
64A2   0017                     	DECLE 23
64A3   0018                     	DECLE 24
64A4   0018                     	DECLE 24
                                	;[1002] 	DATA 24,24,24,23,22,21,20,19
                                	SRCFILE "samples/pumpkin_master.bas",1002
64A5   0018                     	DECLE 24
64A6   0018                     	DECLE 24
64A7   0018                     	DECLE 24
64A8   0017                     	DECLE 23
64A9   0016                     	DECLE 22
64AA   0015                     	DECLE 21
64AB   0014                     	DECLE 20
64AC   0013                     	DECLE 19
                                	;[1003] 	DATA 17,15,13,11,9,7,5,2
                                	SRCFILE "samples/pumpkin_master.bas",1003
64AD   0011                     	DECLE 17
64AE   000F                     	DECLE 15
64AF   000D                     	DECLE 13
64B0   000B                     	DECLE 11
64B1   0009                     	DECLE 9
64B2   0007                     	DECLE 7
64B3   0005                     	DECLE 5
64B4   0002                     	DECLE 2
                                	;[1004] 
                                	SRCFILE "samples/pumpkin_master.bas",1004
                                	;[1005] 	'
                                	SRCFILE "samples/pumpkin_master.bas",1005
                                	;[1006] 	' Table for converting disc direction to 4-way direction
                                	SRCFILE "samples/pumpkin_master.bas",1006
                                	;[1007] 	'
                                	SRCFILE "samples/pumpkin_master.bas",1007
                                	;[1008] controller_direction:
                                	SRCFILE "samples/pumpkin_master.bas",1008
                                	; CONTROLLER_DIRECTION
0x64B5                          label_CONTROLLER_DIRECTION:	;[1009] 	DATA 0,3,2,3,1,0,2,0
                                	SRCFILE "samples/pumpkin_master.bas",1009
64B5   0000                     	DECLE 0
64B6   0003                     	DECLE 3
64B7   0002                     	DECLE 2
64B8   0003                     	DECLE 3
64B9   0001                     	DECLE 1
64BA   0000                     	DECLE 0
64BB   0002                     	DECLE 2
64BC   0000                     	DECLE 0
                                	;[1010] 	DATA 4,4,0,0,1,0,0,0
                                	SRCFILE "samples/pumpkin_master.bas",1010
64BD   0004                     	DECLE 4
64BE   0004                     	DECLE 4
64BF   0000                     	DECLE 0
64C0   0000                     	DECLE 0
64C1   0001                     	DECLE 1
64C2   0000                     	DECLE 0
64C3   0000                     	DECLE 0
64C4   0000                     	DECLE 0
                                	;[1011] 	DATA 0,3,2,0,0,0,0,0
                                	SRCFILE "samples/pumpkin_master.bas",1011
64C5   0000                     	DECLE 0
64C6   0003                     	DECLE 3
64C7   0002                     	DECLE 2
64C8   0000                     	DECLE 0
64C9   0000                     	DECLE 0
64CA   0000                     	DECLE 0
64CB   0000                     	DECLE 0
64CC   0000                     	DECLE 0
                                	;[1012] 	DATA 4,0,0,0,1,0,0,0
                                	SRCFILE "samples/pumpkin_master.bas",1012
64CD   0004                     	DECLE 4
64CE   0000                     	DECLE 0
64CF   0000                     	DECLE 0
64D0   0000                     	DECLE 0
64D1   0001                     	DECLE 1
64D2   0000                     	DECLE 0
64D3   0000                     	DECLE 0
64D4   0000                     	DECLE 0
                                	;[1013] 
                                	SRCFILE "samples/pumpkin_master.bas",1013
                                	;[1014] 	'
                                	SRCFILE "samples/pumpkin_master.bas",1014
                                	;[1015] 	' Bitmaps used for the game
                                	SRCFILE "samples/pumpkin_master.bas",1015
                                	;[1016] 	'
                                	SRCFILE "samples/pumpkin_master.bas",1016
                                	;[1017] game_bitmaps_0:
                                	SRCFILE "samples/pumpkin_master.bas",1017
                                	; GAME_BITMAPS_0
0x64D5                          label_GAME_BITMAPS_0:	;[1018] 	BITMAP "........"	' 0 Pumpkin
                                	SRCFILE "samples/pumpkin_master.bas",1018
                                	;[1019] 	BITMAP "........"
                                	SRCFILE "samples/pumpkin_master.bas",1019
64D5   0000                     	DECLE 0
                                	;[1020] 	BITMAP "........"
                                	SRCFILE "samples/pumpkin_master.bas",1020
                                	;[1021] 	BITMAP ".XX....."
                                	SRCFILE "samples/pumpkin_master.bas",1021
64D6   6000                     	DECLE 24576
                                	;[1022] 	BITMAP "..X....."
                                	SRCFILE "samples/pumpkin_master.bas",1022
                                	;[1023] 	BITMAP "...X...."
                                	SRCFILE "samples/pumpkin_master.bas",1023
64D7   1020                     	DECLE 4128
                                	;[1024] 	BITMAP ".XX.XXX."
                                	SRCFILE "samples/pumpkin_master.bas",1024
                                	;[1025] 	BITMAP "XX.XX.XX"
                                	SRCFILE "samples/pumpkin_master.bas",1025
64D8   DB6E                     	DECLE 56174
                                	;[1026] 	BITMAP "X..XX..X"
                                	SRCFILE "samples/pumpkin_master.bas",1026
                                	;[1027] 	BITMAP "XXXX.XXX"
                                	SRCFILE "samples/pumpkin_master.bas",1027
64D9   F799                     	DECLE 63385
                                	;[1028] 	BITMAP "XXXXXXXX"
                                	SRCFILE "samples/pumpkin_master.bas",1028
                                	;[1029] 	BITMAP "X.XXXX.X"
                                	SRCFILE "samples/pumpkin_master.bas",1029
64DA   BDFF                     	DECLE 48639
                                	;[1030] 	BITMAP "X..X...X"
                                	SRCFILE "samples/pumpkin_master.bas",1030
                                	;[1031] 	BITMAP "XX...XXX"
                                	SRCFILE "samples/pumpkin_master.bas",1031
64DB   C791                     	DECLE 51089
                                	;[1032] 	BITMAP ".XXXXXX."
                                	SRCFILE "samples/pumpkin_master.bas",1032
                                	;[1033] 	BITMAP "..XXXX.."
                                	SRCFILE "samples/pumpkin_master.bas",1033
64DC   3C7E                     	DECLE 15486
                                	;[1034] 
                                	SRCFILE "samples/pumpkin_master.bas",1034
                                	;[1035] 	BITMAP "...XX..."	' 2 House
                                	SRCFILE "samples/pumpkin_master.bas",1035
                                	;[1036] 	BITMAP "...XX..."
                                	SRCFILE "samples/pumpkin_master.bas",1036
64DD   1818                     	DECLE 6168
                                	;[1037] 	BITMAP "...XX..."
                                	SRCFILE "samples/pumpkin_master.bas",1037
                                	;[1038] 	BITMAP "..XXX..."
                                	SRCFILE "samples/pumpkin_master.bas",1038
64DE   3818                     	DECLE 14360
                                	;[1039] 	BITMAP ".X..X..."
                                	SRCFILE "samples/pumpkin_master.bas",1039
                                	;[1040] 	BITMAP "X.XX.X.."
                                	SRCFILE "samples/pumpkin_master.bas",1040
64DF   B448                     	DECLE 46152
                                	;[1041] 	BITMAP ".X.XX.X."
                                	SRCFILE "samples/pumpkin_master.bas",1041
                                	;[1042] 	BITMAP "XX.XXX.X"
                                	SRCFILE "samples/pumpkin_master.bas",1042
64E0   DD5A                     	DECLE 56666
                                	;[1043] 	BITMAP "XXXXXXX."
                                	SRCFILE "samples/pumpkin_master.bas",1043
                                	;[1044] 	BITMAP "X.XXX.XX"
                                	SRCFILE "samples/pumpkin_master.bas",1044
64E1   BBFE                     	DECLE 48126
                                	;[1045] 	BITMAP "X.XXX.XX"
                                	SRCFILE "samples/pumpkin_master.bas",1045
                                	;[1046] 	BITMAP "XXXXXXXX"
                                	SRCFILE "samples/pumpkin_master.bas",1046
64E2   FFBB                     	DECLE 65467
                                	;[1047] 	BITMAP "X.XXX.XX"
                                	SRCFILE "samples/pumpkin_master.bas",1047
                                	;[1048] 	BITMAP "X.XXX.XX"
                                	SRCFILE "samples/pumpkin_master.bas",1048
64E3   BBBB                     	DECLE 48059
                                	;[1049] 	BITMAP "XXX.XXXX"
                                	SRCFILE "samples/pumpkin_master.bas",1049
                                	;[1050] 	BITMAP "XXX.XXXX"
                                	SRCFILE "samples/pumpkin_master.bas",1050
64E4   EFEF                     	DECLE 61423
                                	;[1051] 
                                	SRCFILE "samples/pumpkin_master.bas",1051
                                	;[1052] 	BITMAP "...X...."	' 4 Pumpkin bullet 1
                                	SRCFILE "samples/pumpkin_master.bas",1052
                                	;[1053] 	BITMAP "...XX..."
                                	SRCFILE "samples/pumpkin_master.bas",1053
64E5   1810                     	DECLE 6160
                                	;[1054] 	BITMAP "...XX..."
                                	SRCFILE "samples/pumpkin_master.bas",1054
                                	;[1055] 	BITMAP "...XX..."
                                	SRCFILE "samples/pumpkin_master.bas",1055
64E6   1818                     	DECLE 6168
                                	;[1056] 	BITMAP "....X..."
                                	SRCFILE "samples/pumpkin_master.bas",1056
                                	;[1057] 	BITMAP "........"
                                	SRCFILE "samples/pumpkin_master.bas",1057
64E7   0008                     	DECLE 8
                                	;[1058] 	BITMAP "........"
                                	SRCFILE "samples/pumpkin_master.bas",1058
                                	;[1059] 	BITMAP "........"
                                	SRCFILE "samples/pumpkin_master.bas",1059
64E8   0000                     	DECLE 0
                                	;[1060] 
                                	SRCFILE "samples/pumpkin_master.bas",1060
                                	;[1061] 	BITMAP "........"	' 5 Pumpkin bullet 2
                                	SRCFILE "samples/pumpkin_master.bas",1061
                                	;[1062] 	BITMAP "........"
                                	SRCFILE "samples/pumpkin_master.bas",1062
64E9   0000                     	DECLE 0
                                	;[1063] 	BITMAP "........"
                                	SRCFILE "samples/pumpkin_master.bas",1063
                                	;[1064] 	BITMAP "....X..."
                                	SRCFILE "samples/pumpkin_master.bas",1064
64EA   0800                     	DECLE 2048
                                	;[1065] 	BITMAP "...XX..."
                                	SRCFILE "samples/pumpkin_master.bas",1065
                                	;[1066] 	BITMAP "...XX..."
                                	SRCFILE "samples/pumpkin_master.bas",1066
64EB   1818                     	DECLE 6168
                                	;[1067] 	BITMAP "...XX..."
                                	SRCFILE "samples/pumpkin_master.bas",1067
                                	;[1068] 	BITMAP "...X...."
                                	SRCFILE "samples/pumpkin_master.bas",1068
64EC   1018                     	DECLE 4120
                                	;[1069] 
                                	SRCFILE "samples/pumpkin_master.bas",1069
                                	;[1070] 	BITMAP "X......."	' 6 Pumpkin explosion
                                	SRCFILE "samples/pumpkin_master.bas",1070
                                	;[1071] 	BITMAP "X......X"
                                	SRCFILE "samples/pumpkin_master.bas",1071
64ED   8180                     	DECLE 33152
                                	;[1072] 	BITMAP ".XX....."
                                	SRCFILE "samples/pumpkin_master.bas",1072
                                	;[1073] 	BITMAP "XX....XX"
                                	SRCFILE "samples/pumpkin_master.bas",1073
64EE   C360                     	DECLE 50016
                                	;[1074] 	BITMAP ".X....X."
                                	SRCFILE "samples/pumpkin_master.bas",1074
                                	;[1075] 	BITMAP ".X..X.X."
                                	SRCFILE "samples/pumpkin_master.bas",1075
64EF   4A42                     	DECLE 19010
                                	;[1076] 	BITMAP ".X.X...."
                                	SRCFILE "samples/pumpkin_master.bas",1076
                                	;[1077] 	BITMAP "........"
                                	SRCFILE "samples/pumpkin_master.bas",1077
64F0   0050                     	DECLE 80
                                	;[1078] 	BITMAP "XX....XX"
                                	SRCFILE "samples/pumpkin_master.bas",1078
                                	;[1079] 	BITMAP ".X...X.."
                                	SRCFILE "samples/pumpkin_master.bas",1079
64F1   44C3                     	DECLE 17603
                                	;[1080] 	BITMAP "........"
                                	SRCFILE "samples/pumpkin_master.bas",1080
                                	;[1081] 	BITMAP "..X..X.."
                                	SRCFILE "samples/pumpkin_master.bas",1081
64F2   2400                     	DECLE 9216
                                	;[1082] 	BITMAP ".XX..XX."
                                	SRCFILE "samples/pumpkin_master.bas",1082
                                	;[1083] 	BITMAP "X.....X."
                                	SRCFILE "samples/pumpkin_master.bas",1083
64F3   8266                     	DECLE 33382
                                	;[1084] 	BITMAP ".......X"
                                	SRCFILE "samples/pumpkin_master.bas",1084
                                	;[1085] 	BITMAP ".......X"
                                	SRCFILE "samples/pumpkin_master.bas",1085
64F4   0101                     	DECLE 257
                                	;[1086] 
                                	SRCFILE "samples/pumpkin_master.bas",1086
                                	;[1087] 	BITMAP "..XXXX.."	' 8 Nuclear mushroom 1
                                	SRCFILE "samples/pumpkin_master.bas",1087
                                	;[1088] 	BITMAP ".XXXXXX."
                                	SRCFILE "samples/pumpkin_master.bas",1088
64F5   7E3C                     	DECLE 32316
                                	;[1089] 	BITMAP "XXXXXXXX"
                                	SRCFILE "samples/pumpkin_master.bas",1089
                                	;[1090] 	BITMAP "XXXXXXXX"
                                	SRCFILE "samples/pumpkin_master.bas",1090
64F6   FFFF                     	DECLE 65535
                                	;[1091] 	BITMAP "X.X.XX.X"
                                	SRCFILE "samples/pumpkin_master.bas",1091
                                	;[1092] 	BITMAP "X.XXXX.X"
                                	SRCFILE "samples/pumpkin_master.bas",1092
64F7   BDAD                     	DECLE 48557
                                	;[1093] 	BITMAP "..XX.X.."
                                	SRCFILE "samples/pumpkin_master.bas",1093
                                	;[1094] 	BITMAP "..XXXX.."
                                	SRCFILE "samples/pumpkin_master.bas",1094
64F8   3C34                     	DECLE 15412
                                	;[1095] 	BITMAP "..X.XX.."
                                	SRCFILE "samples/pumpkin_master.bas",1095
                                	;[1096] 	BITMAP "..XXXX.."
                                	SRCFILE "samples/pumpkin_master.bas",1096
64F9   3C2C                     	DECLE 15404
                                	;[1097] 	BITMAP "..XX.X.."
                                	SRCFILE "samples/pumpkin_master.bas",1097
                                	;[1098] 	BITMAP "..XXXX.."
                                	SRCFILE "samples/pumpkin_master.bas",1098
64FA   3C34                     	DECLE 15412
                                	;[1099] 	BITMAP ".XXXXXX."
                                	SRCFILE "samples/pumpkin_master.bas",1099
                                	;[1100] 	BITMAP ".X.XXXX."
                                	SRCFILE "samples/pumpkin_master.bas",1100
64FB   5E7E                     	DECLE 24190
                                	;[1101] 	BITMAP "XXXXX.XX"
                                	SRCFILE "samples/pumpkin_master.bas",1101
                                	;[1102] 	BITMAP "XXXXXXXX"
                                	SRCFILE "samples/pumpkin_master.bas",1102
64FC   FFFB                     	DECLE 65531
                                	;[1103] 
                                	SRCFILE "samples/pumpkin_master.bas",1103
                                	;[1104] 	BITMAP "..XXXX.."	' 10 Nuclear mushroom 2
                                	SRCFILE "samples/pumpkin_master.bas",1104
                                	;[1105] 	BITMAP ".XXXXXX."
                                	SRCFILE "samples/pumpkin_master.bas",1105
64FD   7E3C                     	DECLE 32316
                                	;[1106] 	BITMAP "XXXXXXXX"
                                	SRCFILE "samples/pumpkin_master.bas",1106
                                	;[1107] 	BITMAP "XXXX.XXX"
                                	SRCFILE "samples/pumpkin_master.bas",1107
64FE   F7FF                     	DECLE 63487
                                	;[1108] 	BITMAP "X.XXXX.X"
                                	SRCFILE "samples/pumpkin_master.bas",1108
                                	;[1109] 	BITMAP "X.X.XX.X"
                                	SRCFILE "samples/pumpkin_master.bas",1109
64FF   ADBD                     	DECLE 44477
                                	;[1110] 	BITMAP "..XXXX.."
                                	SRCFILE "samples/pumpkin_master.bas",1110
                                	;[1111] 	BITMAP "..XX.X.."
                                	SRCFILE "samples/pumpkin_master.bas",1111
6500   343C                     	DECLE 13372
                                	;[1112] 	BITMAP "..XXXX.."
                                	SRCFILE "samples/pumpkin_master.bas",1112
                                	;[1113] 	BITMAP "..X.XX.."
                                	SRCFILE "samples/pumpkin_master.bas",1113
6501   2C3C                     	DECLE 11324
                                	;[1114] 	BITMAP "..XXXX.."
                                	SRCFILE "samples/pumpkin_master.bas",1114
                                	;[1115] 	BITMAP "..XXXX.."
                                	SRCFILE "samples/pumpkin_master.bas",1115
6502   3C3C                     	DECLE 15420
                                	;[1116] 	BITMAP ".XXXX.X."
                                	SRCFILE "samples/pumpkin_master.bas",1116
                                	;[1117] 	BITMAP ".X.XXXX."
                                	SRCFILE "samples/pumpkin_master.bas",1117
6503   5E7A                     	DECLE 24186
                                	;[1118] 	BITMAP "XXXX.XXX"
                                	SRCFILE "samples/pumpkin_master.bas",1118
                                	;[1119] 	BITMAP "XXXXXXXX"
                                	SRCFILE "samples/pumpkin_master.bas",1119
6504   FFF7                     	DECLE 65527
                                	;[1120] 
                                	SRCFILE "samples/pumpkin_master.bas",1120
                                	;[1121] 	BITMAP ".X......"	' 12 Player bullet
                                	SRCFILE "samples/pumpkin_master.bas",1121
                                	;[1122] 	BITMAP "XX......"
                                	SRCFILE "samples/pumpkin_master.bas",1122
6505   C040                     	DECLE 49216
                                	;[1123] 	BITMAP "XX......"
                                	SRCFILE "samples/pumpkin_master.bas",1123
                                	;[1124] 	BITMAP "XX......"
                                	SRCFILE "samples/pumpkin_master.bas",1124
6506   C0C0                     	DECLE 49344
                                	;[1125] 	BITMAP "XXX....."
                                	SRCFILE "samples/pumpkin_master.bas",1125
                                	;[1126] 	BITMAP "XXX....."
                                	SRCFILE "samples/pumpkin_master.bas",1126
6507   E0E0                     	DECLE 57568
                                	;[1127] 	BITMAP ".XX....."
                                	SRCFILE "samples/pumpkin_master.bas",1127
                                	;[1128] 	BITMAP ".X......"
                                	SRCFILE "samples/pumpkin_master.bas",1128
6508   4060                     	DECLE 16480
                                	;[1129] 
                                	SRCFILE "samples/pumpkin_master.bas",1129
                                	;[1130] 	' Based on https://pixabay.com/es/pumpkin-helloween-witch-bruja-3726795/
                                	SRCFILE "samples/pumpkin_master.bas",1130
                                	;[1131] 	REM IntyColor v1.1.5 Jul/25/2017
                                	SRCFILE "samples/pumpkin_master.bas",1131
                                	;[1132] 	REM Command: ./intycolor -b -n -s0000 pumpkin.bmp pumpkin_title.bas pumpkin 
                                	SRCFILE "samples/pumpkin_master.bas",1132
                                	;[1133] 	REM Created: Sun Oct 28 21:28:30 2018
                                	SRCFILE "samples/pumpkin_master.bas",1133
                                	;[1134] 
                                	SRCFILE "samples/pumpkin_master.bas",1134
                                	;[1135] 	' 59 bitmaps
                                	SRCFILE "samples/pumpkin_master.bas",1135
                                	;[1136] pumpkin_bitmaps_0:
                                	SRCFILE "samples/pumpkin_master.bas",1136
                                	; PUMPKIN_BITMAPS_0
0x6509                          label_PUMPKIN_BITMAPS_0:	;[1137] 	DATA $0000,$0000,$0000,$0600
                                	SRCFILE "samples/pumpkin_master.bas",1137
6509   0000                     	DECLE 0
650A   0000                     	DECLE 0
650B   0000                     	DECLE 0
650C   0600                     	DECLE 1536
                                	;[1138] 	DATA $667C,$6666,$607C,$6060
                                	SRCFILE "samples/pumpkin_master.bas",1138
650D   667C                     	DECLE 26236
650E   6666                     	DECLE 26214
650F   607C                     	DECLE 24700
6510   6060                     	DECLE 24672
                                	;[1139] 	DATA $0000,$6666,$6666,$3E66
                                	SRCFILE "samples/pumpkin_master.bas",1139
6511   0000                     	DECLE 0
6512   6666                     	DECLE 26214
6513   6666                     	DECLE 26214
6514   3E66                     	DECLE 15974
                                	;[1140] 	DATA $0000,$667D,$6666,$6666
                                	SRCFILE "samples/pumpkin_master.bas",1140
6515   0000                     	DECLE 0
6516   667D                     	DECLE 26237
6517   6666                     	DECLE 26214
6518   6666                     	DECLE 26214
                                	;[1141] 	DATA $0000,$66C7,$6666,$6766
                                	SRCFILE "samples/pumpkin_master.bas",1141
6519   0000                     	DECLE 0
651A   66C7                     	DECLE 26311
651B   6666                     	DECLE 26214
651C   6766                     	DECLE 26470
                                	;[1142] 	DATA $0606,$66C6,$6767,$C666
                                	SRCFILE "samples/pumpkin_master.bas",1142
651D   0606                     	DECLE 1542
651E   66C6                     	DECLE 26310
651F   6767                     	DECLE 26471
6520   C666                     	DECLE 50790
                                	;[1143] 	DATA $0006,$C666,$8686,$66C6
                                	SRCFILE "samples/pumpkin_master.bas",1143
6521   0006                     	DECLE 6
6522   C666                     	DECLE 50790
6523   8686                     	DECLE 34438
6524   66C6                     	DECLE 26310
                                	;[1144] 	DATA $0000,$667C,$6666,$6666
                                	SRCFILE "samples/pumpkin_master.bas",1144
6525   0000                     	DECLE 0
6526   667C                     	DECLE 26236
6527   6666                     	DECLE 26214
6528   6666                     	DECLE 26214
                                	;[1145] 	DATA $0706,$0507,$0404,$0404
                                	SRCFILE "samples/pumpkin_master.bas",1145
6529   0706                     	DECLE 1798
652A   0507                     	DECLE 1287
652B   0404                     	DECLE 1028
652C   0404                     	DECLE 1028
                                	;[1146] 	DATA $1808,$D8B8,$1998,$1819
                                	SRCFILE "samples/pumpkin_master.bas",1146
652D   1808                     	DECLE 6152
652E   D8B8                     	DECLE 55480
652F   1998                     	DECLE 6552
6530   1819                     	DECLE 6169
                                	;[1147] 	DATA $0000,$19F0,$98F9,$F998
                                	SRCFILE "samples/pumpkin_master.bas",1147
6531   0000                     	DECLE 0
6532   19F0                     	DECLE 6640
6533   98F9                     	DECLE 39161
6534   F998                     	DECLE 63896
                                	;[1148] 	DATA $0303,$83F7,$F3E3,$E133
                                	SRCFILE "samples/pumpkin_master.bas",1148
6535   0303                     	DECLE 771
6536   83F7                     	DECLE 33783
6537   F3E3                     	DECLE 62435
6538   E133                     	DECLE 57651
                                	;[1149] 	DATA $0000,$19CF,$181F,$CF18
                                	SRCFILE "samples/pumpkin_master.bas",1149
6539   0000                     	DECLE 0
653A   19CF                     	DECLE 6607
653B   181F                     	DECLE 6175
653C   CF18                     	DECLE 53016
                                	;[1150] 	DATA $0000,$9F1B,$1898,$1898
                                	SRCFILE "samples/pumpkin_master.bas",1150
653D   0000                     	DECLE 0
653E   9F1B                     	DECLE 40731
653F   1898                     	DECLE 6296
6540   1898                     	DECLE 6296
                                	;[1151] 	DATA $0606,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1151
6541   0606                     	DECLE 1542
6542   0000                     	DECLE 0
6543   0000                     	DECLE 0
6544   0000                     	DECLE 0
                                	;[1152] 	DATA $0100,$0003,$0300,$0101
                                	SRCFILE "samples/pumpkin_master.bas",1152
6545   0100                     	DECLE 256
6546   0003                     	DECLE 3
6547   0300                     	DECLE 768
6548   0101                     	DECLE 257
                                	;[1153] pumpkin_bitmaps_1:
                                	SRCFILE "samples/pumpkin_master.bas",1153
                                	; PUMPKIN_BITMAPS_1
0x6549                          label_PUMPKIN_BITMAPS_1:	;[1154] 	DATA $E000,$1810,$FC68,$B868
                                	SRCFILE "samples/pumpkin_master.bas",1154
6549   E000                     	DECLE 57344
654A   1810                     	DECLE 6160
654B   FC68                     	DECLE 64616
654C   B868                     	DECLE 47208
                                	;[1155] 	DATA $60C0,$1830,$070C,$0303
                                	SRCFILE "samples/pumpkin_master.bas",1155
654D   60C0                     	DECLE 24768
654E   1830                     	DECLE 6192
654F   070C                     	DECLE 1804
6550   0303                     	DECLE 771
                                	;[1156] 	DATA $0000,$1800,$F8F0,$CEFB
                                	SRCFILE "samples/pumpkin_master.bas",1156
6551   0000                     	DECLE 0
6552   1800                     	DECLE 6144
6553   F8F0                     	DECLE 63728
6554   CEFB                     	DECLE 52987
                                	;[1157] 	DATA $0000,$0000,$0000,$70F0
                                	SRCFILE "samples/pumpkin_master.bas",1157
6555   0000                     	DECLE 0
6556   0000                     	DECLE 0
6557   0000                     	DECLE 0
6558   70F0                     	DECLE 28912
                                	;[1158] 	DATA $0100,$0301,$0101,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1158
6559   0100                     	DECLE 256
655A   0301                     	DECLE 769
655B   0101                     	DECLE 257
655C   0000                     	DECLE 0
                                	;[1159] 	DATA $83FE,$B0E0,$F0D0,$3F6F
                                	SRCFILE "samples/pumpkin_master.bas",1159
655D   83FE                     	DECLE 33790
655E   B0E0                     	DECLE 45280
655F   F0D0                     	DECLE 61648
6560   3F6F                     	DECLE 16239
                                	;[1160] 	DATA $8000,$3CE0,$0007,$9FE7
                                	SRCFILE "samples/pumpkin_master.bas",1160
6561   8000                     	DECLE 32768
6562   3CE0                     	DECLE 15584
6563   0007                     	DECLE 7
6564   9FE7                     	DECLE 40935
                                	;[1161] 	DATA $0706,$0F0F,$6100,$BFDE
                                	SRCFILE "samples/pumpkin_master.bas",1161
6565   0706                     	DECLE 1798
6566   0F0F                     	DECLE 3855
6567   6100                     	DECLE 24832
6568   BFDE                     	DECLE 49118
                                	;[1162] 	DATA $D18C,$6071,$C020,$7EF9
                                	SRCFILE "samples/pumpkin_master.bas",1162
6569   D18C                     	DECLE 53644
656A   6071                     	DECLE 24689
656B   C020                     	DECLE 49184
656C   7EF9                     	DECLE 32505
                                	;[1163] 	DATA $F8F8,$00E0,$0000,$7CE0
                                	SRCFILE "samples/pumpkin_master.bas",1163
656D   F8F8                     	DECLE 63736
656E   00E0                     	DECLE 224
656F   0000                     	DECLE 0
6570   7CE0                     	DECLE 31968
                                	;[1164] 	DATA $0100,$0303,$0707,$1F0F
                                	SRCFILE "samples/pumpkin_master.bas",1164
6571   0100                     	DECLE 256
6572   0303                     	DECLE 771
6573   0707                     	DECLE 1799
6574   1F0F                     	DECLE 7951
                                	;[1165] 	DATA $FEFF,$FBFD,$EFF7,$DFDF
                                	SRCFILE "samples/pumpkin_master.bas",1165
6575   FEFF                     	DECLE 65279
6576   FBFD                     	DECLE 64509
6577   EFF7                     	DECLE 61431
6578   DFDF                     	DECLE 57311
                                	;[1166] 	DATA $FE7F,$FEFE,$FDFD,$FBFD
                                	SRCFILE "samples/pumpkin_master.bas",1166
6579   FE7F                     	DECLE 65151
657A   FEFE                     	DECLE 65278
657B   FDFD                     	DECLE 65021
657C   FBFD                     	DECLE 64509
                                	;[1167] 	DATA $FF7F,$FFFF,$FFFF,$FFFF
                                	SRCFILE "samples/pumpkin_master.bas",1167
657D   FF7F                     	DECLE 65407
657E   FFFF                     	DECLE 65535
657F   FFFF                     	DECLE 65535
6580   FFFF                     	DECLE 65535
                                	;[1168] 	DATA $BFBF,$DFDF,$EFEF,$F7EF
                                	SRCFILE "samples/pumpkin_master.bas",1168
6581   BFBF                     	DECLE 49087
6582   DFDF                     	DECLE 57311
6583   EFEF                     	DECLE 61423
6584   F7EF                     	DECLE 63471
                                	;[1169] 	DATA $DFBF,$F7EF,$FDFB,$FEFE
                                	SRCFILE "samples/pumpkin_master.bas",1169
6585   DFBF                     	DECLE 57279
6586   F7EF                     	DECLE 63471
6587   FDFB                     	DECLE 65019
6588   FEFE                     	DECLE 65278
                                	;[1170] pumpkin_bitmaps_2:
                                	SRCFILE "samples/pumpkin_master.bas",1170
                                	; PUMPKIN_BITMAPS_2
0x6589                          label_PUMPKIN_BITMAPS_2:	;[1171] 	DATA $C000,$F0E0,$F8F0,$FCFC
                                	SRCFILE "samples/pumpkin_master.bas",1171
6589   C000                     	DECLE 49152
658A   F0E0                     	DECLE 61664
658B   F8F0                     	DECLE 63728
658C   FCFC                     	DECLE 64764
                                	;[1172] 	DATA $1F1F,$3F3F,$3F3F,$3E3E
                                	SRCFILE "samples/pumpkin_master.bas",1172
658D   1F1F                     	DECLE 7967
658E   3F3F                     	DECLE 16191
658F   3F3F                     	DECLE 16191
6590   3E3E                     	DECLE 15934
                                	;[1173] 	DATA $BFBF,$7F7F,$7F7F,$FFFF
                                	SRCFILE "samples/pumpkin_master.bas",1173
6591   BFBF                     	DECLE 49087
6592   7F7F                     	DECLE 32639
6593   7F7F                     	DECLE 32639
6594   FFFF                     	DECLE 65535
                                	;[1174] 	DATA $9BBB,$838B,$8081,$E0C0
                                	SRCFILE "samples/pumpkin_master.bas",1174
6595   9BBB                     	DECLE 39867
6596   838B                     	DECLE 33675
6597   8081                     	DECLE 32897
6598   E0C0                     	DECLE 57536
                                	;[1175] 	DATA $FFFF,$FFFF,$7FFF,$FF3F
                                	SRCFILE "samples/pumpkin_master.bas",1175
6599   FFFF                     	DECLE 65535
659A   FFFF                     	DECLE 65535
659B   7FFF                     	DECLE 32767
659C   FF3F                     	DECLE 65343
                                	;[1176] 	DATA $F6F7,$F0F4,$00C0,$C080
                                	SRCFILE "samples/pumpkin_master.bas",1176
659D   F6F7                     	DECLE 63223
659E   F0F4                     	DECLE 61684
659F   00C0                     	DECLE 192
65A0   C080                     	DECLE 49280
                                	;[1177] 	DATA $3FFF,$3F3F,$7F7F,$FF7F
                                	SRCFILE "samples/pumpkin_master.bas",1177
65A1   3FFF                     	DECLE 16383
65A2   3F3F                     	DECLE 16191
65A3   7F7F                     	DECLE 32639
65A4   FF7F                     	DECLE 65407
                                	;[1178] 	DATA $7E7E,$BEBE,$DEBE,$DEDE
                                	SRCFILE "samples/pumpkin_master.bas",1178
65A5   7E7E                     	DECLE 32382
65A6   BEBE                     	DECLE 48830
65A7   DEBE                     	DECLE 57022
65A8   DEDE                     	DECLE 57054
                                	;[1179] 	DATA $3E3E,$1E3E,$1E1E,$0F1E
                                	SRCFILE "samples/pumpkin_master.bas",1179
65A9   3E3E                     	DECLE 15934
65AA   1E3E                     	DECLE 7742
65AB   1E1E                     	DECLE 7710
65AC   0F1E                     	DECLE 3870
                                	;[1180] 	DATA $FFFF,$FFFF,$FFFF,$78F9
                                	SRCFILE "samples/pumpkin_master.bas",1180
65AD   FFFF                     	DECLE 65535
65AE   FFFF                     	DECLE 65535
65AF   FFFF                     	DECLE 65535
65B0   78F9                     	DECLE 30969
                                	;[1181] 	DATA $F7F7,$F7F7,$F7F7,$F7F7
                                	SRCFILE "samples/pumpkin_master.bas",1181
65B1   F7F7                     	DECLE 63479
65B2   F7F7                     	DECLE 63479
65B3   F7F7                     	DECLE 63479
65B4   F7F7                     	DECLE 63479
                                	;[1182] 	DATA $FFFF,$F7F7,$E3E3,$FFFF
                                	SRCFILE "samples/pumpkin_master.bas",1182
65B5   FFFF                     	DECLE 65535
65B6   F7F7                     	DECLE 63479
65B7   E3E3                     	DECLE 58339
65B8   FFFF                     	DECLE 65535
                                	;[1183] 	DATA $FBFB,$FBFB,$FBFB,$FBFB
                                	SRCFILE "samples/pumpkin_master.bas",1183
65B9   FBFB                     	DECLE 64507
65BA   FBFB                     	DECLE 64507
65BB   FBFB                     	DECLE 64507
65BC   FBFB                     	DECLE 64507
                                	;[1184] 	DATA $FFFF,$FFFF,$FFFF,$CFEF
                                	SRCFILE "samples/pumpkin_master.bas",1184
65BD   FFFF                     	DECLE 65535
65BE   FFFF                     	DECLE 65535
65BF   FFFF                     	DECLE 65535
65C0   CFEF                     	DECLE 53231
                                	;[1185] 	DATA $DEDE,$DEDE,$DCDC,$BCDC
                                	SRCFILE "samples/pumpkin_master.bas",1185
65C1   DEDE                     	DECLE 57054
65C2   DEDE                     	DECLE 57054
65C3   DCDC                     	DECLE 56540
65C4   BCDC                     	DECLE 48348
                                	;[1186] 	DATA $070F,$0707,$0103,$0001
                                	SRCFILE "samples/pumpkin_master.bas",1186
65C5   070F                     	DECLE 1807
65C6   0707                     	DECLE 1799
65C7   0103                     	DECLE 259
65C8   0001                     	DECLE 1
                                	;[1187] pumpkin_bitmaps_3:
                                	SRCFILE "samples/pumpkin_master.bas",1187
                                	; PUMPKIN_BITMAPS_3
0x65C9                          label_PUMPKIN_BITMAPS_3:	;[1188] 	DATA $7C7C,$BEBC,$DFDE,$F7EF
                                	SRCFILE "samples/pumpkin_master.bas",1188
65C9   7C7C                     	DECLE 31868
65CA   BEBC                     	DECLE 48828
65CB   DFDE                     	DECLE 57310
65CC   F7EF                     	DECLE 63471
                                	;[1189] 	DATA $3737,$3839,$0018,$E080
                                	SRCFILE "samples/pumpkin_master.bas",1189
65CD   3737                     	DECLE 14135
65CE   3839                     	DECLE 14393
65CF   0018                     	DECLE 24
65D0   E080                     	DECLE 57472
                                	;[1190] 	DATA $FFFF,$00FF,$0000,$1E00
                                	SRCFILE "samples/pumpkin_master.bas",1190
65D1   FFFF                     	DECLE 65535
65D2   00FF                     	DECLE 255
65D3   0000                     	DECLE 0
65D4   1E00                     	DECLE 7680
                                	;[1191] 	DATA $F8FB,$00C0,$0000,$6F28
                                	SRCFILE "samples/pumpkin_master.bas",1191
65D5   F8FB                     	DECLE 63739
65D6   00C0                     	DECLE 192
65D7   0000                     	DECLE 0
65D8   6F28                     	DECLE 28456
                                	;[1192] 	DATA $0F0F,$1F1F,$7E3E,$FBFD
                                	SRCFILE "samples/pumpkin_master.bas",1192
65D9   0F0F                     	DECLE 3855
65DA   1F1F                     	DECLE 7967
65DB   7E3E                     	DECLE 32318
65DC   FBFD                     	DECLE 64509
                                	;[1193] 	DATA $B8B8,$7070,$E0E0,$80C0
                                	SRCFILE "samples/pumpkin_master.bas",1193
65DD   B8B8                     	DECLE 47288
65DE   7070                     	DECLE 28784
65DF   E0E0                     	DECLE 57568
65E0   80C0                     	DECLE 32960
                                	;[1194] 	DATA $3D7B,$0F1E,$0003,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1194
65E1   3D7B                     	DECLE 15739
65E2   0F1E                     	DECLE 3870
65E3   0003                     	DECLE 3
65E4   0000                     	DECLE 0
                                	;[1195] 	DATA $FDFC,$7EFE,$E79F,$0118
                                	SRCFILE "samples/pumpkin_master.bas",1195
65E5   FDFC                     	DECLE 65020
65E6   7EFE                     	DECLE 32510
65E7   E79F                     	DECLE 59295
65E8   0118                     	DECLE 280
                                	;[1196] 	DATA $9F1E,$FFFF,$BF7F,$00DE
                                	SRCFILE "samples/pumpkin_master.bas",1196
65E9   9F1E                     	DECLE 40734
65EA   FFFF                     	DECLE 65535
65EB   BF7F                     	DECLE 49023
65EC   00DE                     	DECLE 222
                                	;[1197] 	DATA $DF6F,$DFDF,$79BE,$20C6
                                	SRCFILE "samples/pumpkin_master.bas",1197
65ED   DF6F                     	DECLE 57199
65EE   DFDF                     	DECLE 57311
65EF   79BE                     	DECLE 31166
65F0   20C6                     	DECLE 8390
                                	;[1198] 	DATA $EEF7,$B8DC,$8060,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1198
65F1   EEF7                     	DECLE 61175
65F2   B8DC                     	DECLE 47324
65F3   8060                     	DECLE 32864
65F4   0000                     	DECLE 0
                                	;[1199] 
                                	SRCFILE "samples/pumpkin_master.bas",1199
                                	;[1200] 	REM 20x12 cards
                                	SRCFILE "samples/pumpkin_master.bas",1200
                                	;[1201] pumpkin_cards:
                                	SRCFILE "samples/pumpkin_master.bas",1201
                                	; PUMPKIN_CARDS
0x65F5                          label_PUMPKIN_CARDS:	;[1202] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$0000,$1806,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1202
65F5   0000                     	DECLE 0
65F6   0000                     	DECLE 0
65F7   0000                     	DECLE 0
65F8   0000                     	DECLE 0
65F9   0000                     	DECLE 0
65FA   0000                     	DECLE 0
65FB   0000                     	DECLE 0
65FC   1806                     	DECLE 6150
65FD   0000                     	DECLE 0
65FE   0000                     	DECLE 0
65FF   0000                     	DECLE 0
6600   0000                     	DECLE 0
6601   0000                     	DECLE 0
6602   0000                     	DECLE 0
6603   0000                     	DECLE 0
6604   0000                     	DECLE 0
6605   0000                     	DECLE 0
6606   0000                     	DECLE 0
6607   0000                     	DECLE 0
6608   0000                     	DECLE 0
                                	;[1203] 	DATA $0000,$0000,$0000,$180E,$1816,$181E,$1826,$182E,$1836,$183E,$1846,$184E,$1856,$185E,$1866,$186E,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1203
6609   0000                     	DECLE 0
660A   0000                     	DECLE 0
660B   0000                     	DECLE 0
660C   180E                     	DECLE 6158
660D   1816                     	DECLE 6166
660E   181E                     	DECLE 6174
660F   1826                     	DECLE 6182
6610   182E                     	DECLE 6190
6611   1836                     	DECLE 6198
6612   183E                     	DECLE 6206
6613   1846                     	DECLE 6214
6614   184E                     	DECLE 6222
6615   1856                     	DECLE 6230
6616   185E                     	DECLE 6238
6617   1866                     	DECLE 6246
6618   186E                     	DECLE 6254
6619   0000                     	DECLE 0
661A   0000                     	DECLE 0
661B   0000                     	DECLE 0
661C   0000                     	DECLE 0
                                	;[1204] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$1876,$0000,$087D,$0885,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1204
661D   0000                     	DECLE 0
661E   0000                     	DECLE 0
661F   0000                     	DECLE 0
6620   0000                     	DECLE 0
6621   0000                     	DECLE 0
6622   0000                     	DECLE 0
6623   1876                     	DECLE 6262
6624   0000                     	DECLE 0
6625   087D                     	DECLE 2173
6626   0885                     	DECLE 2181
6627   0000                     	DECLE 0
6628   0000                     	DECLE 0
6629   0000                     	DECLE 0
662A   0000                     	DECLE 0
662B   0000                     	DECLE 0
662C   0000                     	DECLE 0
662D   0000                     	DECLE 0
662E   0000                     	DECLE 0
662F   0000                     	DECLE 0
6630   0000                     	DECLE 0
                                	;[1205] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$088D,$0895,$089D,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1205
6631   0000                     	DECLE 0
6632   0000                     	DECLE 0
6633   0000                     	DECLE 0
6634   0000                     	DECLE 0
6635   0000                     	DECLE 0
6636   0000                     	DECLE 0
6637   0000                     	DECLE 0
6638   0000                     	DECLE 0
6639   0000                     	DECLE 0
663A   088D                     	DECLE 2189
663B   0895                     	DECLE 2197
663C   089D                     	DECLE 2205
663D   0000                     	DECLE 0
663E   0000                     	DECLE 0
663F   0000                     	DECLE 0
6640   0000                     	DECLE 0
6641   0000                     	DECLE 0
6642   0000                     	DECLE 0
6643   0000                     	DECLE 0
6644   0000                     	DECLE 0
                                	;[1206] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$08A5,$08AD,$08B5,$08BD,$08C5,$08CD,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1206
6645   0000                     	DECLE 0
6646   0000                     	DECLE 0
6647   0000                     	DECLE 0
6648   0000                     	DECLE 0
6649   0000                     	DECLE 0
664A   0000                     	DECLE 0
664B   08A5                     	DECLE 2213
664C   08AD                     	DECLE 2221
664D   08B5                     	DECLE 2229
664E   08BD                     	DECLE 2237
664F   08C5                     	DECLE 2245
6650   08CD                     	DECLE 2253
6651   0000                     	DECLE 0
6652   0000                     	DECLE 0
6653   0000                     	DECLE 0
6654   0000                     	DECLE 0
6655   0000                     	DECLE 0
6656   0000                     	DECLE 0
6657   0000                     	DECLE 0
6658   0000                     	DECLE 0
                                	;[1207] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$18D2,$18DA,$18E2,$18EA,$18F2,$18FA,$1902,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1207
6659   0000                     	DECLE 0
665A   0000                     	DECLE 0
665B   0000                     	DECLE 0
665C   0000                     	DECLE 0
665D   0000                     	DECLE 0
665E   0000                     	DECLE 0
665F   18D2                     	DECLE 6354
6660   18DA                     	DECLE 6362
6661   18E2                     	DECLE 6370
6662   18EA                     	DECLE 6378
6663   18F2                     	DECLE 6386
6664   18FA                     	DECLE 6394
6665   1902                     	DECLE 6402
6666   0000                     	DECLE 0
6667   0000                     	DECLE 0
6668   0000                     	DECLE 0
6669   0000                     	DECLE 0
666A   0000                     	DECLE 0
666B   0000                     	DECLE 0
666C   0000                     	DECLE 0
                                	;[1208] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$190A,$1912,$191A,$1922,$192A,$1932,$193A,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1208
666D   0000                     	DECLE 0
666E   0000                     	DECLE 0
666F   0000                     	DECLE 0
6670   0000                     	DECLE 0
6671   0000                     	DECLE 0
6672   0000                     	DECLE 0
6673   190A                     	DECLE 6410
6674   1912                     	DECLE 6418
6675   191A                     	DECLE 6426
6676   1922                     	DECLE 6434
6677   192A                     	DECLE 6442
6678   1932                     	DECLE 6450
6679   193A                     	DECLE 6458
667A   0000                     	DECLE 0
667B   0000                     	DECLE 0
667C   0000                     	DECLE 0
667D   0000                     	DECLE 0
667E   0000                     	DECLE 0
667F   0000                     	DECLE 0
6680   0000                     	DECLE 0
                                	;[1209] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$1942,$194A,$1952,$195A,$1962,$196A,$1972,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1209
6681   0000                     	DECLE 0
6682   0000                     	DECLE 0
6683   0000                     	DECLE 0
6684   0000                     	DECLE 0
6685   0000                     	DECLE 0
6686   0000                     	DECLE 0
6687   1942                     	DECLE 6466
6688   194A                     	DECLE 6474
6689   1952                     	DECLE 6482
668A   195A                     	DECLE 6490
668B   1962                     	DECLE 6498
668C   196A                     	DECLE 6506
668D   1972                     	DECLE 6514
668E   0000                     	DECLE 0
668F   0000                     	DECLE 0
6690   0000                     	DECLE 0
6691   0000                     	DECLE 0
6692   0000                     	DECLE 0
6693   0000                     	DECLE 0
6694   0000                     	DECLE 0
                                	;[1210] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$197A,$1982,$198A,$1992,$199A,$19A2,$19AA,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1210
6695   0000                     	DECLE 0
6696   0000                     	DECLE 0
6697   0000                     	DECLE 0
6698   0000                     	DECLE 0
6699   0000                     	DECLE 0
669A   0000                     	DECLE 0
669B   197A                     	DECLE 6522
669C   1982                     	DECLE 6530
669D   198A                     	DECLE 6538
669E   1992                     	DECLE 6546
669F   199A                     	DECLE 6554
66A0   19A2                     	DECLE 6562
66A1   19AA                     	DECLE 6570
66A2   0000                     	DECLE 0
66A3   0000                     	DECLE 0
66A4   0000                     	DECLE 0
66A5   0000                     	DECLE 0
66A6   0000                     	DECLE 0
66A7   0000                     	DECLE 0
66A8   0000                     	DECLE 0
                                	;[1211] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$0000,$19B2,$19BA,$19C2,$19CA,$19D2,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1211
66A9   0000                     	DECLE 0
66AA   0000                     	DECLE 0
66AB   0000                     	DECLE 0
66AC   0000                     	DECLE 0
66AD   0000                     	DECLE 0
66AE   0000                     	DECLE 0
66AF   0000                     	DECLE 0
66B0   19B2                     	DECLE 6578
66B1   19BA                     	DECLE 6586
66B2   19C2                     	DECLE 6594
66B3   19CA                     	DECLE 6602
66B4   19D2                     	DECLE 6610
66B5   0000                     	DECLE 0
66B6   0000                     	DECLE 0
66B7   0000                     	DECLE 0
66B8   0000                     	DECLE 0
66B9   0000                     	DECLE 0
66BA   0000                     	DECLE 0
66BB   0000                     	DECLE 0
66BC   0000                     	DECLE 0
                                	;[1212] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1212
66BD   0000                     	DECLE 0
66BE   0000                     	DECLE 0
66BF   0000                     	DECLE 0
66C0   0000                     	DECLE 0
66C1   0000                     	DECLE 0
66C2   0000                     	DECLE 0
66C3   0000                     	DECLE 0
66C4   0000                     	DECLE 0
66C5   0000                     	DECLE 0
66C6   0000                     	DECLE 0
66C7   0000                     	DECLE 0
66C8   0000                     	DECLE 0
66C9   0000                     	DECLE 0
66CA   0000                     	DECLE 0
66CB   0000                     	DECLE 0
66CC   0000                     	DECLE 0
66CD   0000                     	DECLE 0
66CE   0000                     	DECLE 0
66CF   0000                     	DECLE 0
66D0   0000                     	DECLE 0
                                	;[1213] 	DATA $0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
                                	SRCFILE "samples/pumpkin_master.bas",1213
66D1   0000                     	DECLE 0
66D2   0000                     	DECLE 0
66D3   0000                     	DECLE 0
66D4   0000                     	DECLE 0
66D5   0000                     	DECLE 0
66D6   0000                     	DECLE 0
66D7   0000                     	DECLE 0
66D8   0000                     	DECLE 0
66D9   0000                     	DECLE 0
66DA   0000                     	DECLE 0
66DB   0000                     	DECLE 0
66DC   0000                     	DECLE 0
66DD   0000                     	DECLE 0
66DE   0000                     	DECLE 0
66DF   0000                     	DECLE 0
66E0   0000                     	DECLE 0
66E1   0000                     	DECLE 0
66E2   0000                     	DECLE 0
66E3   0000                     	DECLE 0
66E4   0000                     	DECLE 0
                                	;[1214] 
                                	SRCFILE "samples/pumpkin_master.bas",1214
                                	;[1215] 	'
                                	SRCFILE "samples/pumpkin_master.bas",1215
                                	;[1216] 	' Play sound effects
                                	SRCFILE "samples/pumpkin_master.bas",1216
                                	;[1217] 	'
                                	SRCFILE "samples/pumpkin_master.bas",1217
                                	;[1218] play_sound:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",1218
                                	; PLAY_SOUND
0x66E5                          label_PLAY_SOUND:	PROC
66E5   0275                     	BEGIN
                                	;[1219] 	ON sound_effect GOSUB play_none, play_fire, play_drop, play_explosion_1, play_explosion_2
                                	SRCFILE "samples/pumpkin_master.bas",1219
66E6   0281 0138                	MVI var_SOUND_EFFECT,R1
66E8   0379 0005                	CMPI #5,R1
66EA   0201 000A                	BC T201
66EC   02BD 66F6                	MVII #T201,R5
66EE   02F9 66F1                	ADDI #T200,R1
66F0   028F                     	MVI@ R1,PC
0x66F1                          T200:
66F1   66F7                     	DECLE label_PLAY_NONE
66F2   6700                     	DECLE label_PLAY_FIRE
66F3   6729                     	DECLE label_PLAY_DROP
66F4   6756                     	DECLE label_PLAY_EXPLOSION_1
66F5   677D                     	DECLE label_PLAY_EXPLOSION_2
0x66F6                          T201:
                                	;[1220] 	END
                                	SRCFILE "samples/pumpkin_master.bas",1220
66F6   02B7                     	RETURN
                                	ENDP
                                	;[1221] 
                                	SRCFILE "samples/pumpkin_master.bas",1221
                                	;[1222] play_none:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",1222
                                	; PLAY_NONE
0x66F7                          label_PLAY_NONE:	PROC
66F7   0275                     	BEGIN
                                	;[1223] 	SOUND 2,,0
                                	SRCFILE "samples/pumpkin_master.bas",1223
66F8   01C0                     	CLRR R0
66F9   0240 01FD                	MVO R0,509
                                	;[1224] 	SOUND 4,,$38
                                	SRCFILE "samples/pumpkin_master.bas",1224
66FB   02B8 0038                	MVII #56,R0
66FD   0240 01F8                	MVO R0,504
                                	;[1225] 	END
                                	SRCFILE "samples/pumpkin_master.bas",1225
66FF   02B7                     	RETURN
                                	ENDP
                                	;[1226] 
                                	SRCFILE "samples/pumpkin_master.bas",1226
                                	;[1227] play_fire:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",1227
                                	; PLAY_FIRE
0x6700                          label_PLAY_FIRE:	PROC
6700   0275                     	BEGIN
                                	;[1228] 	SOUND 2,200 - sound_state * sound_state,12
                                	SRCFILE "samples/pumpkin_master.bas",1228
6701   02B8 00C8                	MVII #200,R0
6703   0281 0139                	MVI var_SOUND_STATE,R1
6705   008C                     	MOVR R1,R4
6706   0241 9F86                	MVO R1,40838
6708   0244 9F87                	MVO R4,40839
670A   0281 9F8E                	MVI 40846,R1
670C   0108                     	SUBR R1,R0
670D   0240 01F2                	MVO R0,498
670F   0040                     	SWAP R0
6710   0240 01F6                	MVO R0,502
6712   02B8 000C                	MVII #12,R0
6714   0240 01FD                	MVO R0,509
                                	;[1229] 	SOUND 4,,$38
                                	SRCFILE "samples/pumpkin_master.bas",1229
6716   02B8 0038                	MVII #56,R0
6718   0240 01F8                	MVO R0,504
                                	;[1230] 	sound_state = sound_state + 1
                                	SRCFILE "samples/pumpkin_master.bas",1230
671A   0280 0139                	MVI var_SOUND_STATE,R0
671C   0008                     	INCR R0
671D   0240 0139                	MVO R0,var_SOUND_STATE
                                	;[1231] 	IF sound_state = 10 THEN sound_effect = 0
                                	SRCFILE "samples/pumpkin_master.bas",1231
671F   0280 0139                	MVI var_SOUND_STATE,R0
6721   0378 000A                	CMPI #10,R0
6723   020C 0003                	BNE T202
6725   01C0                     	CLRR R0
6726   0240 0138                	MVO R0,var_SOUND_EFFECT
0x6728                          T202:
                                	;[1232] 	END
                                	SRCFILE "samples/pumpkin_master.bas",1232
6728   02B7                     	RETURN
                                	ENDP
                                	;[1233] 
                                	SRCFILE "samples/pumpkin_master.bas",1233
                                	;[1234] play_drop:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",1234
                                	; PLAY_DROP
0x6729                          label_PLAY_DROP:	PROC
6729   0275                     	BEGIN
                                	;[1235] 	SOUND 2,100 + (RAND AND 1) + sound_state * sound_state,12
                                	SRCFILE "samples/pumpkin_master.bas",1235
672A   0280 0104                	MVI _rand,R0
672C   03B8 0001                	ANDI #1,R0
672E   02F8 0064                	ADDI #100,R0
6730   0281 0139                	MVI var_SOUND_STATE,R1
6732   008C                     	MOVR R1,R4
6733   0241 9F86                	MVO R1,40838
6735   0244 9F87                	MVO R4,40839
6737   0281 9F8E                	MVI 40846,R1
6739   00C8                     	ADDR R1,R0
673A   0240 01F2                	MVO R0,498
673C   0040                     	SWAP R0
673D   0240 01F6                	MVO R0,502
673F   02B8 000C                	MVII #12,R0
6741   0240 01FD                	MVO R0,509
                                	;[1236] 	SOUND 4,,$38
                                	SRCFILE "samples/pumpkin_master.bas",1236
6743   02B8 0038                	MVII #56,R0
6745   0240 01F8                	MVO R0,504
                                	;[1237] 	sound_state = sound_state + 1
                                	SRCFILE "samples/pumpkin_master.bas",1237
6747   0280 0139                	MVI var_SOUND_STATE,R0
6749   0008                     	INCR R0
674A   0240 0139                	MVO R0,var_SOUND_STATE
                                	;[1238] 	IF sound_state = 10 THEN sound_effect = 0
                                	SRCFILE "samples/pumpkin_master.bas",1238
674C   0280 0139                	MVI var_SOUND_STATE,R0
674E   0378 000A                	CMPI #10,R0
6750   020C 0003                	BNE T203
6752   01C0                     	CLRR R0
6753   0240 0138                	MVO R0,var_SOUND_EFFECT
0x6755                          T203:
                                	;[1239] 	END
                                	SRCFILE "samples/pumpkin_master.bas",1239
6755   02B7                     	RETURN
                                	ENDP
                                	;[1240] 
                                	SRCFILE "samples/pumpkin_master.bas",1240
                                	;[1241] play_explosion_1:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",1241
                                	; PLAY_EXPLOSION_1
0x6756                          label_PLAY_EXPLOSION_1:	PROC
6756   0275                     	BEGIN
                                	;[1242] 	SOUND 2,1000+sound_state * 16,12 - sound_state / 4
                                	SRCFILE "samples/pumpkin_master.bas",1242
6757   0280 0139                	MVI var_SOUND_STATE,R0
6759   004C                     	SLL R0,2
675A   004C                     	SLL R0,2
675B   02F8 03E8                	ADDI #1000,R0
675D   0240 01F2                	MVO R0,498
675F   0040                     	SWAP R0
6760   0240 01F6                	MVO R0,502
6762   02B8 000C                	MVII #12,R0
6764   0281 0139                	MVI var_SOUND_STATE,R1
6766   0065                     	SLR R1,2
6767   0108                     	SUBR R1,R0
6768   0240 01FD                	MVO R0,509
                                	;[1243] 	SOUND 4,,$38
                                	SRCFILE "samples/pumpkin_master.bas",1243
676A   02B8 0038                	MVII #56,R0
676C   0240 01F8                	MVO R0,504
                                	;[1244] 	sound_state = sound_state + 1
                                	SRCFILE "samples/pumpkin_master.bas",1244
676E   0280 0139                	MVI var_SOUND_STATE,R0
6770   0008                     	INCR R0
6771   0240 0139                	MVO R0,var_SOUND_STATE
                                	;[1245] 	IF sound_state = 24 THEN sound_effect = 0
                                	SRCFILE "samples/pumpkin_master.bas",1245
6773   0280 0139                	MVI var_SOUND_STATE,R0
6775   0378 0018                	CMPI #24,R0
6777   020C 0003                	BNE T204
6779   01C0                     	CLRR R0
677A   0240 0138                	MVO R0,var_SOUND_EFFECT
0x677C                          T204:
                                	;[1246] 	END
                                	SRCFILE "samples/pumpkin_master.bas",1246
677C   02B7                     	RETURN
                                	ENDP
                                	;[1247] 
                                	SRCFILE "samples/pumpkin_master.bas",1247
                                	;[1248] play_explosion_2:	PROCEDURE
                                	SRCFILE "samples/pumpkin_master.bas",1248
                                	; PLAY_EXPLOSION_2
0x677D                          label_PLAY_EXPLOSION_2:	PROC
677D   0275                     	BEGIN
                                	;[1249] 	SOUND 2,2000-sound_state*16,12 - sound_state / 8
                                	SRCFILE "samples/pumpkin_master.bas",1249
677E   02B8 07D0                	MVII #2000,R0
6780   0281 0139                	MVI var_SOUND_STATE,R1
6782   004D                     	SLL R1,2
6783   004D                     	SLL R1,2
6784   0108                     	SUBR R1,R0
6785   0240 01F2                	MVO R0,498
6787   0040                     	SWAP R0
6788   0240 01F6                	MVO R0,502
678A   02B8 000C                	MVII #12,R0
678C   0281 0139                	MVI var_SOUND_STATE,R1
678E   0065                     	SLR R1,2
678F   0061                     	SLR R1,1
6790   0108                     	SUBR R1,R0
6791   0240 01FD                	MVO R0,509
                                	;[1250] 	SOUND 4,31-sound_state/4,$18
                                	SRCFILE "samples/pumpkin_master.bas",1250
6793   02B8 001F                	MVII #31,R0
6795   0281 0139                	MVI var_SOUND_STATE,R1
6797   0065                     	SLR R1,2
6798   0108                     	SUBR R1,R0
6799   0240 01F9                	MVO R0,505
679B   02B8 0018                	MVII #24,R0
679D   0240 01F8                	MVO R0,504
                                	;[1251] 	sound_state = sound_state + 1
                                	SRCFILE "samples/pumpkin_master.bas",1251
679F   0280 0139                	MVI var_SOUND_STATE,R0
67A1   0008                     	INCR R0
67A2   0240 0139                	MVO R0,var_SOUND_STATE
                                	;[1252] 	IF sound_state = 96 THEN sound_effect = 0
                                	SRCFILE "samples/pumpkin_master.bas",1252
67A4   0280 0139                	MVI var_SOUND_STATE,R0
67A6   0378 0060                	CMPI #96,R0
67A8   020C 0003                	BNE T205
67AA   01C0                     	CLRR R0
67AB   0240 0138                	MVO R0,var_SOUND_EFFECT
0x67AD                          T205:
                                	;[1253] 	END
                                	SRCFILE "samples/pumpkin_master.bas",1253
67AD   02B7                     	RETURN
                                	ENDP
                                	;[1254] 	
                                	SRCFILE "samples/pumpkin_master.bas",1254
                                	;[1255] 	ASM ORG $F000
                                	SRCFILE "samples/pumpkin_master.bas",1255
0xF000                           ORG $F000
                                	;[1256] 
                                	SRCFILE "samples/pumpkin_master.bas",1256
                                	;[1257] 	'
                                	SRCFILE "samples/pumpkin_master.bas",1257
                                	;[1258] 	' Pumpkin Boogie
                                	SRCFILE "samples/pumpkin_master.bas",1258
                                	;[1259] 	' 
                                	SRCFILE "samples/pumpkin_master.bas",1259
                                	;[1260] 	' Automagically generated by boogie.c srand(1540785469)
                                	SRCFILE "samples/pumpkin_master.bas",1260
                                	;[1261] music_game:
                                	SRCFILE "samples/pumpkin_master.bas",1261
                                	; MUSIC_GAME
0xF000                          label_MUSIC_GAME:	;[1262] 	DATA 6
                                	SRCFILE "samples/pumpkin_master.bas",1262
F000   0006                     	DECLE 6
                                	;[1263] 	MUSIC C3W,C5W,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1263
F001   250D 0000                	DECLE 9485,0
                                	;[1264] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1264
F003   190D 0000                	DECLE 6413,0
                                	;[1265] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1265
F005   3F3F 0000                	DECLE 16191,0
                                	;[1266] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1266
F007   2210 0000                	DECLE 8720,0
                                	;[1267] 	MUSIC E3,F4#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1267
F009   1F11 0000                	DECLE 7953,0
                                	;[1268] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1268
F00B   3F3F 0000                	DECLE 16191,0
                                	;[1269] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1269
F00D   2014 0000                	DECLE 8212,0
                                	;[1270] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1270
F00F   190D 0000                	DECLE 6413,0
                                	;[1271] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1271
F011   3F3F 0000                	DECLE 16191,0
                                	;[1272] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1272
F013   0016 0000                	DECLE 22,0
                                	;[1273] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1273
F015   0014 0000                	DECLE 20,0
                                	;[1274] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1274
F017   003F 0000                	DECLE 63,0
                                	;[1275] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1275
F019   1E12 0000                	DECLE 7698,0
                                	;[1276] 	MUSIC F3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1276
F01B   2512 0000                	DECLE 9490,0
                                	;[1277] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1277
F01D   3F3F 0000                	DECLE 16191,0
                                	;[1278] 	MUSIC G3#,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1278
F01F   2715 0000                	DECLE 10005,0
                                	;[1279] 	MUSIC A3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1279
F021   2516 0000                	DECLE 9494,0
                                	;[1280] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1280
F023   3F3F 0000                	DECLE 16191,0
                                	;[1281] 	MUSIC C4,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1281
F025   1E19 0000                	DECLE 7705,0
                                	;[1282] 	MUSIC F3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1282
F027   0012 0000                	DECLE 18,0
                                	;[1283] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1283
F029   003F 0000                	DECLE 63,0
                                	;[1284] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1284
F02B   001B 0000                	DECLE 27,0
                                	;[1285] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1285
F02D   0019 0000                	DECLE 25,0
                                	;[1286] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1286
F02F   003F 0000                	DECLE 63,0
                                	;[1287] 	MUSIC G3,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1287
F031   3014 0000                	DECLE 12308,0
                                	;[1288] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1288
F033   0014 0000                	DECLE 20,0
                                	;[1289] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1289
F035   003F 0000                	DECLE 63,0
                                	;[1290] 	MUSIC A3#,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1290
F037   3017 0000                	DECLE 12311,0
                                	;[1291] 	MUSIC B3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1291
F039   0018 0000                	DECLE 24,0
                                	;[1292] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1292
F03B   003F 0000                	DECLE 63,0
                                	;[1293] 	MUSIC D4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1293
F03D   301B 0000                	DECLE 12315,0
                                	;[1294] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1294
F03F   0014 0000                	DECLE 20,0
                                	;[1295] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1295
F041   003F 0000                	DECLE 63,0
                                	;[1296] 	MUSIC E4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1296
F043   301D 0000                	DECLE 12317,0
                                	;[1297] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1297
F045   001B 0000                	DECLE 27,0
                                	;[1298] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1298
F047   003F 0000                	DECLE 63,0
                                	;[1299] 	MUSIC F3,F5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1299
F049   2A12 0000                	DECLE 10770,0
                                	;[1300] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1300
F04B   1E12 0000                	DECLE 7698,0
                                	;[1301] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1301
F04D   3F3F 0000                	DECLE 16191,0
                                	;[1302] 	MUSIC G3#,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1302
F04F   2715 0000                	DECLE 10005,0
                                	;[1303] 	MUSIC A3,B4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1303
F051   2416 0000                	DECLE 9238,0
                                	;[1304] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1304
F053   3F3F 0000                	DECLE 16191,0
                                	;[1305] 	MUSIC C4,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1305
F055   2519 0000                	DECLE 9497,0
                                	;[1306] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1306
F057   1E12 0000                	DECLE 7698,0
                                	;[1307] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1307
F059   3F3F 0000                	DECLE 16191,0
                                	;[1308] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1308
F05B   001B 0000                	DECLE 27,0
                                	;[1309] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1309
F05D   0019 0000                	DECLE 25,0
                                	;[1310] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1310
F05F   003F 0000                	DECLE 63,0
                                	;[1311] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1311
F061   250D 0000                	DECLE 9485,0
                                	;[1312] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1312
F063   190D 0000                	DECLE 6413,0
                                	;[1313] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1313
F065   3F3F 0000                	DECLE 16191,0
                                	;[1314] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1314
F067   2210 0000                	DECLE 8720,0
                                	;[1315] 	MUSIC E3,F4#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1315
F069   1F11 0000                	DECLE 7953,0
                                	;[1316] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1316
F06B   3F3F 0000                	DECLE 16191,0
                                	;[1317] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1317
F06D   2014 0000                	DECLE 8212,0
                                	;[1318] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1318
F06F   190D 0000                	DECLE 6413,0
                                	;[1319] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1319
F071   3F3F 0000                	DECLE 16191,0
                                	;[1320] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1320
F073   0016 0000                	DECLE 22,0
                                	;[1321] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1321
F075   0014 0000                	DECLE 20,0
                                	;[1322] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1322
F077   003F 0000                	DECLE 63,0
                                	;[1323] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1323
F079   000D 0000                	DECLE 13,0
                                	;[1324] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1324
F07B   000D 0000                	DECLE 13,0
                                	;[1325] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1325
F07D   003F 0000                	DECLE 63,0
                                	;[1326] 	MUSIC D3#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1326
F07F   0010 0000                	DECLE 16,0
                                	;[1327] 	MUSIC E3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1327
F081   0011 0000                	DECLE 17,0
                                	;[1328] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1328
F083   003F 0000                	DECLE 63,0
                                	;[1329] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1329
F085   0014 0000                	DECLE 20,0
                                	;[1330] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1330
F087   000D 0000                	DECLE 13,0
                                	;[1331] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1331
F089   003F 0000                	DECLE 63,0
                                	;[1332] 	MUSIC A3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1332
F08B   0016 0000                	DECLE 22,0
                                	;[1333] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1333
F08D   0014 0000                	DECLE 20,0
                                	;[1334] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1334
F08F   003F 0000                	DECLE 63,0
                                	;[1335] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1335
F091   290D 0000                	DECLE 10509,0
                                	;[1336] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1336
F093   000D 0000                	DECLE 13,0
                                	;[1337] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1337
F095   003F 0000                	DECLE 63,0
                                	;[1338] 	MUSIC D3#,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1338
F097   2910 0000                	DECLE 10512,0
                                	;[1339] 	MUSIC E3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1339
F099   0011 0000                	DECLE 17,0
                                	;[1340] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1340
F09B   003F 0000                	DECLE 63,0
                                	;[1341] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1341
F09D   2914 0000                	DECLE 10516,0
                                	;[1342] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1342
F09F   000D 0000                	DECLE 13,0
                                	;[1343] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1343
F0A1   003F 0000                	DECLE 63,0
                                	;[1344] 	MUSIC A3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1344
F0A3   2916 0000                	DECLE 10518,0
                                	;[1345] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1345
F0A5   0014 0000                	DECLE 20,0
                                	;[1346] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1346
F0A7   003F 0000                	DECLE 63,0
                                	;[1347] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1347
F0A9   000D 0000                	DECLE 13,0
                                	;[1348] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1348
F0AB   000D 0000                	DECLE 13,0
                                	;[1349] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1349
F0AD   003F 0000                	DECLE 63,0
                                	;[1350] 	MUSIC D3#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1350
F0AF   0010 0000                	DECLE 16,0
                                	;[1351] 	MUSIC E3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1351
F0B1   0011 0000                	DECLE 17,0
                                	;[1352] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1352
F0B3   003F 0000                	DECLE 63,0
                                	;[1353] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1353
F0B5   0014 0000                	DECLE 20,0
                                	;[1354] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1354
F0B7   000D 0000                	DECLE 13,0
                                	;[1355] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1355
F0B9   003F 0000                	DECLE 63,0
                                	;[1356] 	MUSIC A3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1356
F0BB   0016 0000                	DECLE 22,0
                                	;[1357] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1357
F0BD   0014 0000                	DECLE 20,0
                                	;[1358] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1358
F0BF   003F 0000                	DECLE 63,0
                                	;[1359] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1359
F0C1   250D 0000                	DECLE 9485,0
                                	;[1360] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1360
F0C3   190D 0000                	DECLE 6413,0
                                	;[1361] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1361
F0C5   3F3F 0000                	DECLE 16191,0
                                	;[1362] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1362
F0C7   2210 0000                	DECLE 8720,0
                                	;[1363] 	MUSIC E3,F4#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1363
F0C9   1F11 0000                	DECLE 7953,0
                                	;[1364] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1364
F0CB   3F3F 0000                	DECLE 16191,0
                                	;[1365] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1365
F0CD   2014 0000                	DECLE 8212,0
                                	;[1366] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1366
F0CF   190D 0000                	DECLE 6413,0
                                	;[1367] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1367
F0D1   3F3F 0000                	DECLE 16191,0
                                	;[1368] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1368
F0D3   0016 0000                	DECLE 22,0
                                	;[1369] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1369
F0D5   0014 0000                	DECLE 20,0
                                	;[1370] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1370
F0D7   003F 0000                	DECLE 63,0
                                	;[1371] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1371
F0D9   290D 0000                	DECLE 10509,0
                                	;[1372] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1372
F0DB   000D 0000                	DECLE 13,0
                                	;[1373] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1373
F0DD   003F 0000                	DECLE 63,0
                                	;[1374] 	MUSIC D3#,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1374
F0DF   0010 0000                	DECLE 16,0
                                	;[1375] 	MUSIC E3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1375
F0E1   0011 0000                	DECLE 17,0
                                	;[1376] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1376
F0E3   003F 0000                	DECLE 63,0
                                	;[1377] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1377
F0E5   2914 0000                	DECLE 10516,0
                                	;[1378] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1378
F0E7   000D 0000                	DECLE 13,0
                                	;[1379] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1379
F0E9   003F 0000                	DECLE 63,0
                                	;[1380] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1380
F0EB   0016 0000                	DECLE 22,0
                                	;[1381] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1381
F0ED   0014 0000                	DECLE 20,0
                                	;[1382] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1382
F0EF   003F 0000                	DECLE 63,0
                                	;[1383] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1383
F0F1   250D 0000                	DECLE 9485,0
                                	;[1384] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1384
F0F3   190D 0000                	DECLE 6413,0
                                	;[1385] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1385
F0F5   3F3F 0000                	DECLE 16191,0
                                	;[1386] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1386
F0F7   2210 0000                	DECLE 8720,0
                                	;[1387] 	MUSIC E3,F4#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1387
F0F9   1F11 0000                	DECLE 7953,0
                                	;[1388] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1388
F0FB   3F3F 0000                	DECLE 16191,0
                                	;[1389] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1389
F0FD   2014 0000                	DECLE 8212,0
                                	;[1390] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1390
F0FF   190D 0000                	DECLE 6413,0
                                	;[1391] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1391
F101   3F3F 0000                	DECLE 16191,0
                                	;[1392] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1392
F103   0016 0000                	DECLE 22,0
                                	;[1393] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1393
F105   0014 0000                	DECLE 20,0
                                	;[1394] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1394
F107   003F 0000                	DECLE 63,0
                                	;[1395] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1395
F109   190D 0000                	DECLE 6413,0
                                	;[1396] 	MUSIC C3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1396
F10B   200D 0000                	DECLE 8205,0
                                	;[1397] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1397
F10D   3F3F 0000                	DECLE 16191,0
                                	;[1398] 	MUSIC D3#,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1398
F10F   1910 0000                	DECLE 6416,0
                                	;[1399] 	MUSIC E3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1399
F111   2211 0000                	DECLE 8721,0
                                	;[1400] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1400
F113   3F3F 0000                	DECLE 16191,0
                                	;[1401] 	MUSIC G3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1401
F115   1914 0000                	DECLE 6420,0
                                	;[1402] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1402
F117   250D 0000                	DECLE 9485,0
                                	;[1403] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1403
F119   3F3F 0000                	DECLE 16191,0
                                	;[1404] 	MUSIC A3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1404
F11B   1916 0000                	DECLE 6422,0
                                	;[1405] 	MUSIC G3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1405
F11D   2214 0000                	DECLE 8724,0
                                	;[1406] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1406
F11F   3F3F 0000                	DECLE 16191,0
                                	;[1407] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1407
F121   190D 0000                	DECLE 6413,0
                                	;[1408] 	MUSIC C3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1408
F123   200D 0000                	DECLE 8205,0
                                	;[1409] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1409
F125   3F3F 0000                	DECLE 16191,0
                                	;[1410] 	MUSIC D3#,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1410
F127   1910 0000                	DECLE 6416,0
                                	;[1411] 	MUSIC E3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1411
F129   2211 0000                	DECLE 8721,0
                                	;[1412] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1412
F12B   3F3F 0000                	DECLE 16191,0
                                	;[1413] 	MUSIC G3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1413
F12D   1914 0000                	DECLE 6420,0
                                	;[1414] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1414
F12F   250D 0000                	DECLE 9485,0
                                	;[1415] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1415
F131   3F3F 0000                	DECLE 16191,0
                                	;[1416] 	MUSIC A3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1416
F133   1916 0000                	DECLE 6422,0
                                	;[1417] 	MUSIC G3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1417
F135   2214 0000                	DECLE 8724,0
                                	;[1418] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1418
F137   3F3F 0000                	DECLE 16191,0
                                	;[1419] 	MUSIC F3,F5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1419
F139   2A12 0000                	DECLE 10770,0
                                	;[1420] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1420
F13B   1E12 0000                	DECLE 7698,0
                                	;[1421] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1421
F13D   3F3F 0000                	DECLE 16191,0
                                	;[1422] 	MUSIC G3#,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1422
F13F   2715 0000                	DECLE 10005,0
                                	;[1423] 	MUSIC A3,B4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1423
F141   2416 0000                	DECLE 9238,0
                                	;[1424] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1424
F143   3F3F 0000                	DECLE 16191,0
                                	;[1425] 	MUSIC C4,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1425
F145   2519 0000                	DECLE 9497,0
                                	;[1426] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1426
F147   1E12 0000                	DECLE 7698,0
                                	;[1427] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1427
F149   3F3F 0000                	DECLE 16191,0
                                	;[1428] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1428
F14B   001B 0000                	DECLE 27,0
                                	;[1429] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1429
F14D   0019 0000                	DECLE 25,0
                                	;[1430] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1430
F14F   003F 0000                	DECLE 63,0
                                	;[1431] 	MUSIC G3,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1431
F151   3014 0000                	DECLE 12308,0
                                	;[1432] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1432
F153   0014 0000                	DECLE 20,0
                                	;[1433] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1433
F155   003F 0000                	DECLE 63,0
                                	;[1434] 	MUSIC A3#,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1434
F157   3017 0000                	DECLE 12311,0
                                	;[1435] 	MUSIC B3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1435
F159   0018 0000                	DECLE 24,0
                                	;[1436] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1436
F15B   003F 0000                	DECLE 63,0
                                	;[1437] 	MUSIC D4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1437
F15D   301B 0000                	DECLE 12315,0
                                	;[1438] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1438
F15F   0014 0000                	DECLE 20,0
                                	;[1439] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1439
F161   003F 0000                	DECLE 63,0
                                	;[1440] 	MUSIC E4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1440
F163   301D 0000                	DECLE 12317,0
                                	;[1441] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1441
F165   001B 0000                	DECLE 27,0
                                	;[1442] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1442
F167   003F 0000                	DECLE 63,0
                                	;[1443] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1443
F169   1E12 0000                	DECLE 7698,0
                                	;[1444] 	MUSIC F3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1444
F16B   2512 0000                	DECLE 9490,0
                                	;[1445] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1445
F16D   3F3F 0000                	DECLE 16191,0
                                	;[1446] 	MUSIC G3#,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1446
F16F   2715 0000                	DECLE 10005,0
                                	;[1447] 	MUSIC A3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1447
F171   2516 0000                	DECLE 9494,0
                                	;[1448] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1448
F173   3F3F 0000                	DECLE 16191,0
                                	;[1449] 	MUSIC C4,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1449
F175   1E19 0000                	DECLE 7705,0
                                	;[1450] 	MUSIC F3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1450
F177   0012 0000                	DECLE 18,0
                                	;[1451] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1451
F179   003F 0000                	DECLE 63,0
                                	;[1452] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1452
F17B   001B 0000                	DECLE 27,0
                                	;[1453] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1453
F17D   0019 0000                	DECLE 25,0
                                	;[1454] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1454
F17F   003F 0000                	DECLE 63,0
                                	;[1455] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1455
F181   190D 0000                	DECLE 6413,0
                                	;[1456] 	MUSIC C3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1456
F183   200D 0000                	DECLE 8205,0
                                	;[1457] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1457
F185   3F3F 0000                	DECLE 16191,0
                                	;[1458] 	MUSIC D3#,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1458
F187   1910 0000                	DECLE 6416,0
                                	;[1459] 	MUSIC E3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1459
F189   2211 0000                	DECLE 8721,0
                                	;[1460] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1460
F18B   3F3F 0000                	DECLE 16191,0
                                	;[1461] 	MUSIC G3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1461
F18D   1914 0000                	DECLE 6420,0
                                	;[1462] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1462
F18F   250D 0000                	DECLE 9485,0
                                	;[1463] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1463
F191   3F3F 0000                	DECLE 16191,0
                                	;[1464] 	MUSIC A3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1464
F193   1916 0000                	DECLE 6422,0
                                	;[1465] 	MUSIC G3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1465
F195   2214 0000                	DECLE 8724,0
                                	;[1466] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1466
F197   3F3F 0000                	DECLE 16191,0
                                	;[1467] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1467
F199   290D 0000                	DECLE 10509,0
                                	;[1468] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1468
F19B   000D 0000                	DECLE 13,0
                                	;[1469] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1469
F19D   003F 0000                	DECLE 63,0
                                	;[1470] 	MUSIC D3#,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1470
F19F   0010 0000                	DECLE 16,0
                                	;[1471] 	MUSIC E3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1471
F1A1   0011 0000                	DECLE 17,0
                                	;[1472] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1472
F1A3   003F 0000                	DECLE 63,0
                                	;[1473] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1473
F1A5   2914 0000                	DECLE 10516,0
                                	;[1474] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1474
F1A7   000D 0000                	DECLE 13,0
                                	;[1475] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1475
F1A9   003F 0000                	DECLE 63,0
                                	;[1476] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1476
F1AB   0016 0000                	DECLE 22,0
                                	;[1477] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1477
F1AD   0014 0000                	DECLE 20,0
                                	;[1478] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1478
F1AF   003F 0000                	DECLE 63,0
                                	;[1479] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1479
F1B1   190D 0000                	DECLE 6413,0
                                	;[1480] 	MUSIC C3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1480
F1B3   200D 0000                	DECLE 8205,0
                                	;[1481] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1481
F1B5   3F3F 0000                	DECLE 16191,0
                                	;[1482] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1482
F1B7   2210 0000                	DECLE 8720,0
                                	;[1483] 	MUSIC E3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1483
F1B9   2011 0000                	DECLE 8209,0
                                	;[1484] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1484
F1BB   3F3F 0000                	DECLE 16191,0
                                	;[1485] 	MUSIC G3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1485
F1BD   1914 0000                	DECLE 6420,0
                                	;[1486] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1486
F1BF   000D 0000                	DECLE 13,0
                                	;[1487] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1487
F1C1   003F 0000                	DECLE 63,0
                                	;[1488] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1488
F1C3   0016 0000                	DECLE 22,0
                                	;[1489] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1489
F1C5   0014 0000                	DECLE 20,0
                                	;[1490] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1490
F1C7   003F 0000                	DECLE 63,0
                                	;[1491] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1491
F1C9   190D 0000                	DECLE 6413,0
                                	;[1492] 	MUSIC C3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1492
F1CB   200D 0000                	DECLE 8205,0
                                	;[1493] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1493
F1CD   3F3F 0000                	DECLE 16191,0
                                	;[1494] 	MUSIC D3#,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1494
F1CF   1910 0000                	DECLE 6416,0
                                	;[1495] 	MUSIC E3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1495
F1D1   2211 0000                	DECLE 8721,0
                                	;[1496] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1496
F1D3   3F3F 0000                	DECLE 16191,0
                                	;[1497] 	MUSIC G3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1497
F1D5   1914 0000                	DECLE 6420,0
                                	;[1498] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1498
F1D7   250D 0000                	DECLE 9485,0
                                	;[1499] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1499
F1D9   3F3F 0000                	DECLE 16191,0
                                	;[1500] 	MUSIC A3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1500
F1DB   1916 0000                	DECLE 6422,0
                                	;[1501] 	MUSIC G3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1501
F1DD   2214 0000                	DECLE 8724,0
                                	;[1502] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1502
F1DF   3F3F 0000                	DECLE 16191,0
                                	;[1503] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1503
F1E1   250D 0000                	DECLE 9485,0
                                	;[1504] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1504
F1E3   190D 0000                	DECLE 6413,0
                                	;[1505] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1505
F1E5   3F3F 0000                	DECLE 16191,0
                                	;[1506] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1506
F1E7   2210 0000                	DECLE 8720,0
                                	;[1507] 	MUSIC E3,F4#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1507
F1E9   1F11 0000                	DECLE 7953,0
                                	;[1508] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1508
F1EB   3F3F 0000                	DECLE 16191,0
                                	;[1509] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1509
F1ED   2014 0000                	DECLE 8212,0
                                	;[1510] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1510
F1EF   190D 0000                	DECLE 6413,0
                                	;[1511] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1511
F1F1   3F3F 0000                	DECLE 16191,0
                                	;[1512] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1512
F1F3   0016 0000                	DECLE 22,0
                                	;[1513] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1513
F1F5   0014 0000                	DECLE 20,0
                                	;[1514] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1514
F1F7   003F 0000                	DECLE 63,0
                                	;[1515] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1515
F1F9   250D 0000                	DECLE 9485,0
                                	;[1516] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1516
F1FB   190D 0000                	DECLE 6413,0
                                	;[1517] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1517
F1FD   3F3F 0000                	DECLE 16191,0
                                	;[1518] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1518
F1FF   2210 0000                	DECLE 8720,0
                                	;[1519] 	MUSIC E3,F4#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1519
F201   1F11 0000                	DECLE 7953,0
                                	;[1520] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1520
F203   3F3F 0000                	DECLE 16191,0
                                	;[1521] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1521
F205   2014 0000                	DECLE 8212,0
                                	;[1522] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1522
F207   190D 0000                	DECLE 6413,0
                                	;[1523] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1523
F209   3F3F 0000                	DECLE 16191,0
                                	;[1524] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1524
F20B   0016 0000                	DECLE 22,0
                                	;[1525] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1525
F20D   0014 0000                	DECLE 20,0
                                	;[1526] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1526
F20F   003F 0000                	DECLE 63,0
                                	;[1527] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1527
F211   190D 0000                	DECLE 6413,0
                                	;[1528] 	MUSIC C3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1528
F213   200D 0000                	DECLE 8205,0
                                	;[1529] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1529
F215   3F3F 0000                	DECLE 16191,0
                                	;[1530] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1530
F217   2210 0000                	DECLE 8720,0
                                	;[1531] 	MUSIC E3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1531
F219   2011 0000                	DECLE 8209,0
                                	;[1532] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1532
F21B   3F3F 0000                	DECLE 16191,0
                                	;[1533] 	MUSIC G3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1533
F21D   1914 0000                	DECLE 6420,0
                                	;[1534] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1534
F21F   000D 0000                	DECLE 13,0
                                	;[1535] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1535
F221   003F 0000                	DECLE 63,0
                                	;[1536] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1536
F223   0016 0000                	DECLE 22,0
                                	;[1537] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1537
F225   0014 0000                	DECLE 20,0
                                	;[1538] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1538
F227   003F 0000                	DECLE 63,0
                                	;[1539] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1539
F229   250D 0000                	DECLE 9485,0
                                	;[1540] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1540
F22B   190D 0000                	DECLE 6413,0
                                	;[1541] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1541
F22D   3F3F 0000                	DECLE 16191,0
                                	;[1542] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1542
F22F   2210 0000                	DECLE 8720,0
                                	;[1543] 	MUSIC E3,F4#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1543
F231   1F11 0000                	DECLE 7953,0
                                	;[1544] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1544
F233   3F3F 0000                	DECLE 16191,0
                                	;[1545] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1545
F235   2014 0000                	DECLE 8212,0
                                	;[1546] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1546
F237   190D 0000                	DECLE 6413,0
                                	;[1547] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1547
F239   3F3F 0000                	DECLE 16191,0
                                	;[1548] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1548
F23B   0016 0000                	DECLE 22,0
                                	;[1549] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1549
F23D   0014 0000                	DECLE 20,0
                                	;[1550] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1550
F23F   003F 0000                	DECLE 63,0
                                	;[1551] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1551
F241   290D 0000                	DECLE 10509,0
                                	;[1552] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1552
F243   290D 0000                	DECLE 10509,0
                                	;[1553] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1553
F245   3F3F 0000                	DECLE 16191,0
                                	;[1554] 	MUSIC D3#,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1554
F247   2910 0000                	DECLE 10512,0
                                	;[1555] 	MUSIC E3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1555
F249   2911 0000                	DECLE 10513,0
                                	;[1556] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1556
F24B   3F3F 0000                	DECLE 16191,0
                                	;[1557] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1557
F24D   2914 0000                	DECLE 10516,0
                                	;[1558] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1558
F24F   290D 0000                	DECLE 10509,0
                                	;[1559] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1559
F251   3F3F 0000                	DECLE 16191,0
                                	;[1560] 	MUSIC A3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1560
F253   2916 0000                	DECLE 10518,0
                                	;[1561] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1561
F255   2914 0000                	DECLE 10516,0
                                	;[1562] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1562
F257   3F3F 0000                	DECLE 16191,0
                                	;[1563] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1563
F259   250D 0000                	DECLE 9485,0
                                	;[1564] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1564
F25B   190D 0000                	DECLE 6413,0
                                	;[1565] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1565
F25D   3F3F 0000                	DECLE 16191,0
                                	;[1566] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1566
F25F   2210 0000                	DECLE 8720,0
                                	;[1567] 	MUSIC E3,F4#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1567
F261   1F11 0000                	DECLE 7953,0
                                	;[1568] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1568
F263   3F3F 0000                	DECLE 16191,0
                                	;[1569] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1569
F265   2014 0000                	DECLE 8212,0
                                	;[1570] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1570
F267   190D 0000                	DECLE 6413,0
                                	;[1571] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1571
F269   3F3F 0000                	DECLE 16191,0
                                	;[1572] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1572
F26B   0016 0000                	DECLE 22,0
                                	;[1573] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1573
F26D   0014 0000                	DECLE 20,0
                                	;[1574] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1574
F26F   003F 0000                	DECLE 63,0
                                	;[1575] 	MUSIC F3,A5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1575
F271   2E12 0000                	DECLE 11794,0
                                	;[1576] 	MUSIC F3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1576
F273   0012 0000                	DECLE 18,0
                                	;[1577] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1577
F275   003F 0000                	DECLE 63,0
                                	;[1578] 	MUSIC G3#,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1578
F277   0015 0000                	DECLE 21,0
                                	;[1579] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1579
F279   0016 0000                	DECLE 22,0
                                	;[1580] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1580
F27B   003F 0000                	DECLE 63,0
                                	;[1581] 	MUSIC C4,A5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1581
F27D   2E19 0000                	DECLE 11801,0
                                	;[1582] 	MUSIC F3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1582
F27F   0012 0000                	DECLE 18,0
                                	;[1583] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1583
F281   003F 0000                	DECLE 63,0
                                	;[1584] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1584
F283   001B 0000                	DECLE 27,0
                                	;[1585] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1585
F285   0019 0000                	DECLE 25,0
                                	;[1586] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1586
F287   003F 0000                	DECLE 63,0
                                	;[1587] 	MUSIC F3,F5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1587
F289   2A12 0000                	DECLE 10770,0
                                	;[1588] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1588
F28B   1E12 0000                	DECLE 7698,0
                                	;[1589] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1589
F28D   3F3F 0000                	DECLE 16191,0
                                	;[1590] 	MUSIC G3#,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1590
F28F   2715 0000                	DECLE 10005,0
                                	;[1591] 	MUSIC A3,B4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1591
F291   2416 0000                	DECLE 9238,0
                                	;[1592] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1592
F293   3F3F 0000                	DECLE 16191,0
                                	;[1593] 	MUSIC C4,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1593
F295   2519 0000                	DECLE 9497,0
                                	;[1594] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1594
F297   1E12 0000                	DECLE 7698,0
                                	;[1595] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1595
F299   3F3F 0000                	DECLE 16191,0
                                	;[1596] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1596
F29B   001B 0000                	DECLE 27,0
                                	;[1597] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1597
F29D   0019 0000                	DECLE 25,0
                                	;[1598] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1598
F29F   003F 0000                	DECLE 63,0
                                	;[1599] 	MUSIC F3,A5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1599
F2A1   2E12 0000                	DECLE 11794,0
                                	;[1600] 	MUSIC F3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1600
F2A3   0012 0000                	DECLE 18,0
                                	;[1601] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1601
F2A5   003F 0000                	DECLE 63,0
                                	;[1602] 	MUSIC G3#,A5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1602
F2A7   2E15 0000                	DECLE 11797,0
                                	;[1603] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1603
F2A9   0016 0000                	DECLE 22,0
                                	;[1604] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1604
F2AB   003F 0000                	DECLE 63,0
                                	;[1605] 	MUSIC C4,A5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1605
F2AD   2E19 0000                	DECLE 11801,0
                                	;[1606] 	MUSIC F3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1606
F2AF   0012 0000                	DECLE 18,0
                                	;[1607] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1607
F2B1   003F 0000                	DECLE 63,0
                                	;[1608] 	MUSIC D4,A5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1608
F2B3   2E1B 0000                	DECLE 11803,0
                                	;[1609] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1609
F2B5   0019 0000                	DECLE 25,0
                                	;[1610] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1610
F2B7   003F 0000                	DECLE 63,0
                                	;[1611] 	MUSIC F3,F5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1611
F2B9   2A12 0000                	DECLE 10770,0
                                	;[1612] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1612
F2BB   1E12 0000                	DECLE 7698,0
                                	;[1613] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1613
F2BD   3F3F 0000                	DECLE 16191,0
                                	;[1614] 	MUSIC G3#,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1614
F2BF   2715 0000                	DECLE 10005,0
                                	;[1615] 	MUSIC A3,B4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1615
F2C1   2416 0000                	DECLE 9238,0
                                	;[1616] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1616
F2C3   3F3F 0000                	DECLE 16191,0
                                	;[1617] 	MUSIC C4,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1617
F2C5   2519 0000                	DECLE 9497,0
                                	;[1618] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1618
F2C7   1E12 0000                	DECLE 7698,0
                                	;[1619] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1619
F2C9   3F3F 0000                	DECLE 16191,0
                                	;[1620] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1620
F2CB   001B 0000                	DECLE 27,0
                                	;[1621] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1621
F2CD   0019 0000                	DECLE 25,0
                                	;[1622] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1622
F2CF   003F 0000                	DECLE 63,0
                                	;[1623] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1623
F2D1   2014 0000                	DECLE 8212,0
                                	;[1624] 	MUSIC G3,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1624
F2D3   2714 0000                	DECLE 10004,0
                                	;[1625] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1625
F2D5   3F3F 0000                	DECLE 16191,0
                                	;[1626] 	MUSIC A3#,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1626
F2D7   2017 0000                	DECLE 8215,0
                                	;[1627] 	MUSIC B3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1627
F2D9   2918 0000                	DECLE 10520,0
                                	;[1628] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1628
F2DB   3F3F 0000                	DECLE 16191,0
                                	;[1629] 	MUSIC D4,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1629
F2DD   201B 0000                	DECLE 8219,0
                                	;[1630] 	MUSIC G3,G5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1630
F2DF   2C14 0000                	DECLE 11284,0
                                	;[1631] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1631
F2E1   3F3F 0000                	DECLE 16191,0
                                	;[1632] 	MUSIC E4,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1632
F2E3   201D 0000                	DECLE 8221,0
                                	;[1633] 	MUSIC D4,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1633
F2E5   291B 0000                	DECLE 10523,0
                                	;[1634] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1634
F2E7   3F3F 0000                	DECLE 16191,0
                                	;[1635] 	MUSIC G3,G5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1635
F2E9   2C14 0000                	DECLE 11284,0
                                	;[1636] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1636
F2EB   2014 0000                	DECLE 8212,0
                                	;[1637] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1637
F2ED   3F3F 0000                	DECLE 16191,0
                                	;[1638] 	MUSIC A3#,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1638
F2EF   2917 0000                	DECLE 10519,0
                                	;[1639] 	MUSIC B3,C5#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1639
F2F1   2618 0000                	DECLE 9752,0
                                	;[1640] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1640
F2F3   3F3F 0000                	DECLE 16191,0
                                	;[1641] 	MUSIC D4,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1641
F2F5   271B 0000                	DECLE 10011,0
                                	;[1642] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1642
F2F7   2014 0000                	DECLE 8212,0
                                	;[1643] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1643
F2F9   3F3F 0000                	DECLE 16191,0
                                	;[1644] 	MUSIC E4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1644
F2FB   001D 0000                	DECLE 29,0
                                	;[1645] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1645
F2FD   001B 0000                	DECLE 27,0
                                	;[1646] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1646
F2FF   003F 0000                	DECLE 63,0
                                	;[1647] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1647
F301   2014 0000                	DECLE 8212,0
                                	;[1648] 	MUSIC G3,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1648
F303   2714 0000                	DECLE 10004,0
                                	;[1649] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1649
F305   3F3F 0000                	DECLE 16191,0
                                	;[1650] 	MUSIC A3#,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1650
F307   2917 0000                	DECLE 10519,0
                                	;[1651] 	MUSIC B3,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1651
F309   2718 0000                	DECLE 10008,0
                                	;[1652] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1652
F30B   3F3F 0000                	DECLE 16191,0
                                	;[1653] 	MUSIC D4,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1653
F30D   201B 0000                	DECLE 8219,0
                                	;[1654] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1654
F30F   0014 0000                	DECLE 20,0
                                	;[1655] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1655
F311   003F 0000                	DECLE 63,0
                                	;[1656] 	MUSIC E4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1656
F313   001D 0000                	DECLE 29,0
                                	;[1657] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1657
F315   001B 0000                	DECLE 27,0
                                	;[1658] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1658
F317   003F 0000                	DECLE 63,0
                                	;[1659] 	MUSIC G3,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1659
F319   3014 0000                	DECLE 12308,0
                                	;[1660] 	MUSIC G3,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1660
F31B   3014 0000                	DECLE 12308,0
                                	;[1661] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1661
F31D   3F3F 0000                	DECLE 16191,0
                                	;[1662] 	MUSIC A3#,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1662
F31F   3017 0000                	DECLE 12311,0
                                	;[1663] 	MUSIC B3,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1663
F321   3018 0000                	DECLE 12312,0
                                	;[1664] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1664
F323   3F3F 0000                	DECLE 16191,0
                                	;[1665] 	MUSIC D4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1665
F325   301B 0000                	DECLE 12315,0
                                	;[1666] 	MUSIC G3,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1666
F327   3014 0000                	DECLE 12308,0
                                	;[1667] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1667
F329   3F3F 0000                	DECLE 16191,0
                                	;[1668] 	MUSIC E4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1668
F32B   301D 0000                	DECLE 12317,0
                                	;[1669] 	MUSIC D4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1669
F32D   301B 0000                	DECLE 12315,0
                                	;[1670] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1670
F32F   3F3F 0000                	DECLE 16191,0
                                	;[1671] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1671
F331   190D 0000                	DECLE 6413,0
                                	;[1672] 	MUSIC C3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1672
F333   200D 0000                	DECLE 8205,0
                                	;[1673] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1673
F335   3F3F 0000                	DECLE 16191,0
                                	;[1674] 	MUSIC D3#,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1674
F337   1910 0000                	DECLE 6416,0
                                	;[1675] 	MUSIC E3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1675
F339   2211 0000                	DECLE 8721,0
                                	;[1676] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1676
F33B   3F3F 0000                	DECLE 16191,0
                                	;[1677] 	MUSIC G3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1677
F33D   1914 0000                	DECLE 6420,0
                                	;[1678] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1678
F33F   250D 0000                	DECLE 9485,0
                                	;[1679] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1679
F341   3F3F 0000                	DECLE 16191,0
                                	;[1680] 	MUSIC A3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1680
F343   1916 0000                	DECLE 6422,0
                                	;[1681] 	MUSIC G3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1681
F345   2214 0000                	DECLE 8724,0
                                	;[1682] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1682
F347   3F3F 0000                	DECLE 16191,0
                                	;[1683] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1683
F349   000D 0000                	DECLE 13,0
                                	;[1684] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1684
F34B   000D 0000                	DECLE 13,0
                                	;[1685] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1685
F34D   003F 0000                	DECLE 63,0
                                	;[1686] 	MUSIC D3#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1686
F34F   0010 0000                	DECLE 16,0
                                	;[1687] 	MUSIC E3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1687
F351   0011 0000                	DECLE 17,0
                                	;[1688] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1688
F353   003F 0000                	DECLE 63,0
                                	;[1689] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1689
F355   0014 0000                	DECLE 20,0
                                	;[1690] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1690
F357   000D 0000                	DECLE 13,0
                                	;[1691] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1691
F359   003F 0000                	DECLE 63,0
                                	;[1692] 	MUSIC A3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1692
F35B   0016 0000                	DECLE 22,0
                                	;[1693] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1693
F35D   0014 0000                	DECLE 20,0
                                	;[1694] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1694
F35F   003F 0000                	DECLE 63,0
                                	;[1695] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1695
F361   290D 0000                	DECLE 10509,0
                                	;[1696] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1696
F363   290D 0000                	DECLE 10509,0
                                	;[1697] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1697
F365   3F3F 0000                	DECLE 16191,0
                                	;[1698] 	MUSIC D3#,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1698
F367   2910 0000                	DECLE 10512,0
                                	;[1699] 	MUSIC E3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1699
F369   2911 0000                	DECLE 10513,0
                                	;[1700] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1700
F36B   3F3F 0000                	DECLE 16191,0
                                	;[1701] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1701
F36D   2914 0000                	DECLE 10516,0
                                	;[1702] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1702
F36F   290D 0000                	DECLE 10509,0
                                	;[1703] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1703
F371   3F3F 0000                	DECLE 16191,0
                                	;[1704] 	MUSIC A3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1704
F373   2916 0000                	DECLE 10518,0
                                	;[1705] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1705
F375   2914 0000                	DECLE 10516,0
                                	;[1706] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1706
F377   3F3F 0000                	DECLE 16191,0
                                	;[1707] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1707
F379   000D 0000                	DECLE 13,0
                                	;[1708] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1708
F37B   000D 0000                	DECLE 13,0
                                	;[1709] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1709
F37D   003F 0000                	DECLE 63,0
                                	;[1710] 	MUSIC D3#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1710
F37F   0010 0000                	DECLE 16,0
                                	;[1711] 	MUSIC E3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1711
F381   0011 0000                	DECLE 17,0
                                	;[1712] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1712
F383   003F 0000                	DECLE 63,0
                                	;[1713] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1713
F385   0014 0000                	DECLE 20,0
                                	;[1714] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1714
F387   000D 0000                	DECLE 13,0
                                	;[1715] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1715
F389   003F 0000                	DECLE 63,0
                                	;[1716] 	MUSIC A3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1716
F38B   0016 0000                	DECLE 22,0
                                	;[1717] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1717
F38D   0014 0000                	DECLE 20,0
                                	;[1718] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1718
F38F   003F 0000                	DECLE 63,0
                                	;[1719] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1719
F391   290D 0000                	DECLE 10509,0
                                	;[1720] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1720
F393   000D 0000                	DECLE 13,0
                                	;[1721] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1721
F395   003F 0000                	DECLE 63,0
                                	;[1722] 	MUSIC D3#,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1722
F397   2910 0000                	DECLE 10512,0
                                	;[1723] 	MUSIC E3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1723
F399   0011 0000                	DECLE 17,0
                                	;[1724] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1724
F39B   003F 0000                	DECLE 63,0
                                	;[1725] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1725
F39D   2914 0000                	DECLE 10516,0
                                	;[1726] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1726
F39F   000D 0000                	DECLE 13,0
                                	;[1727] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1727
F3A1   003F 0000                	DECLE 63,0
                                	;[1728] 	MUSIC A3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1728
F3A3   2916 0000                	DECLE 10518,0
                                	;[1729] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1729
F3A5   0014 0000                	DECLE 20,0
                                	;[1730] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1730
F3A7   003F 0000                	DECLE 63,0
                                	;[1731] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1731
F3A9   000D 0000                	DECLE 13,0
                                	;[1732] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1732
F3AB   000D 0000                	DECLE 13,0
                                	;[1733] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1733
F3AD   003F 0000                	DECLE 63,0
                                	;[1734] 	MUSIC D3#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1734
F3AF   0010 0000                	DECLE 16,0
                                	;[1735] 	MUSIC E3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1735
F3B1   0011 0000                	DECLE 17,0
                                	;[1736] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1736
F3B3   003F 0000                	DECLE 63,0
                                	;[1737] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1737
F3B5   0014 0000                	DECLE 20,0
                                	;[1738] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1738
F3B7   000D 0000                	DECLE 13,0
                                	;[1739] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1739
F3B9   003F 0000                	DECLE 63,0
                                	;[1740] 	MUSIC A3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1740
F3BB   0016 0000                	DECLE 22,0
                                	;[1741] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1741
F3BD   0014 0000                	DECLE 20,0
                                	;[1742] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1742
F3BF   003F 0000                	DECLE 63,0
                                	;[1743] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1743
F3C1   290D 0000                	DECLE 10509,0
                                	;[1744] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1744
F3C3   290D 0000                	DECLE 10509,0
                                	;[1745] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1745
F3C5   3F3F 0000                	DECLE 16191,0
                                	;[1746] 	MUSIC D3#,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1746
F3C7   2910 0000                	DECLE 10512,0
                                	;[1747] 	MUSIC E3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1747
F3C9   2911 0000                	DECLE 10513,0
                                	;[1748] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1748
F3CB   3F3F 0000                	DECLE 16191,0
                                	;[1749] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1749
F3CD   2914 0000                	DECLE 10516,0
                                	;[1750] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1750
F3CF   290D 0000                	DECLE 10509,0
                                	;[1751] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1751
F3D1   3F3F 0000                	DECLE 16191,0
                                	;[1752] 	MUSIC A3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1752
F3D3   2916 0000                	DECLE 10518,0
                                	;[1753] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1753
F3D5   2914 0000                	DECLE 10516,0
                                	;[1754] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1754
F3D7   3F3F 0000                	DECLE 16191,0
                                	;[1755] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1755
F3D9   000D 0000                	DECLE 13,0
                                	;[1756] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1756
F3DB   000D 0000                	DECLE 13,0
                                	;[1757] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1757
F3DD   003F 0000                	DECLE 63,0
                                	;[1758] 	MUSIC D3#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1758
F3DF   0010 0000                	DECLE 16,0
                                	;[1759] 	MUSIC E3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1759
F3E1   0011 0000                	DECLE 17,0
                                	;[1760] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1760
F3E3   003F 0000                	DECLE 63,0
                                	;[1761] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1761
F3E5   0014 0000                	DECLE 20,0
                                	;[1762] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1762
F3E7   000D 0000                	DECLE 13,0
                                	;[1763] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1763
F3E9   003F 0000                	DECLE 63,0
                                	;[1764] 	MUSIC A3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1764
F3EB   0016 0000                	DECLE 22,0
                                	;[1765] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1765
F3ED   0014 0000                	DECLE 20,0
                                	;[1766] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1766
F3EF   003F 0000                	DECLE 63,0
                                	;[1767] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1767
F3F1   290D 0000                	DECLE 10509,0
                                	;[1768] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1768
F3F3   290D 0000                	DECLE 10509,0
                                	;[1769] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1769
F3F5   3F3F 0000                	DECLE 16191,0
                                	;[1770] 	MUSIC D3#,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1770
F3F7   2910 0000                	DECLE 10512,0
                                	;[1771] 	MUSIC E3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1771
F3F9   2911 0000                	DECLE 10513,0
                                	;[1772] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1772
F3FB   3F3F 0000                	DECLE 16191,0
                                	;[1773] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1773
F3FD   2914 0000                	DECLE 10516,0
                                	;[1774] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1774
F3FF   290D 0000                	DECLE 10509,0
                                	;[1775] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1775
F401   3F3F 0000                	DECLE 16191,0
                                	;[1776] 	MUSIC A3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1776
F403   2916 0000                	DECLE 10518,0
                                	;[1777] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1777
F405   2914 0000                	DECLE 10516,0
                                	;[1778] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1778
F407   3F3F 0000                	DECLE 16191,0
                                	;[1779] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1779
F409   190D 0000                	DECLE 6413,0
                                	;[1780] 	MUSIC C3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1780
F40B   200D 0000                	DECLE 8205,0
                                	;[1781] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1781
F40D   3F3F 0000                	DECLE 16191,0
                                	;[1782] 	MUSIC D3#,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1782
F40F   1910 0000                	DECLE 6416,0
                                	;[1783] 	MUSIC E3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1783
F411   2211 0000                	DECLE 8721,0
                                	;[1784] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1784
F413   3F3F 0000                	DECLE 16191,0
                                	;[1785] 	MUSIC G3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1785
F415   1914 0000                	DECLE 6420,0
                                	;[1786] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1786
F417   250D 0000                	DECLE 9485,0
                                	;[1787] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1787
F419   3F3F 0000                	DECLE 16191,0
                                	;[1788] 	MUSIC A3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1788
F41B   1916 0000                	DECLE 6422,0
                                	;[1789] 	MUSIC G3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1789
F41D   2214 0000                	DECLE 8724,0
                                	;[1790] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1790
F41F   3F3F 0000                	DECLE 16191,0
                                	;[1791] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1791
F421   2014 0000                	DECLE 8212,0
                                	;[1792] 	MUSIC G3,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1792
F423   2714 0000                	DECLE 10004,0
                                	;[1793] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1793
F425   3F3F 0000                	DECLE 16191,0
                                	;[1794] 	MUSIC A3#,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1794
F427   2917 0000                	DECLE 10519,0
                                	;[1795] 	MUSIC B3,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1795
F429   2718 0000                	DECLE 10008,0
                                	;[1796] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1796
F42B   3F3F 0000                	DECLE 16191,0
                                	;[1797] 	MUSIC D4,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1797
F42D   201B 0000                	DECLE 8219,0
                                	;[1798] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1798
F42F   0014 0000                	DECLE 20,0
                                	;[1799] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1799
F431   003F 0000                	DECLE 63,0
                                	;[1800] 	MUSIC E4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1800
F433   001D 0000                	DECLE 29,0
                                	;[1801] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1801
F435   001B 0000                	DECLE 27,0
                                	;[1802] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1802
F437   003F 0000                	DECLE 63,0
                                	;[1803] 	MUSIC G3,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1803
F439   3014 0000                	DECLE 12308,0
                                	;[1804] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1804
F43B   0014 0000                	DECLE 20,0
                                	;[1805] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1805
F43D   003F 0000                	DECLE 63,0
                                	;[1806] 	MUSIC A3#,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1806
F43F   3017 0000                	DECLE 12311,0
                                	;[1807] 	MUSIC B3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1807
F441   0018 0000                	DECLE 24,0
                                	;[1808] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1808
F443   003F 0000                	DECLE 63,0
                                	;[1809] 	MUSIC D4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1809
F445   301B 0000                	DECLE 12315,0
                                	;[1810] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1810
F447   0014 0000                	DECLE 20,0
                                	;[1811] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1811
F449   003F 0000                	DECLE 63,0
                                	;[1812] 	MUSIC E4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1812
F44B   301D 0000                	DECLE 12317,0
                                	;[1813] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1813
F44D   001B 0000                	DECLE 27,0
                                	;[1814] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1814
F44F   003F 0000                	DECLE 63,0
                                	;[1815] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1815
F451   190D 0000                	DECLE 6413,0
                                	;[1816] 	MUSIC C3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1816
F453   200D 0000                	DECLE 8205,0
                                	;[1817] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1817
F455   3F3F 0000                	DECLE 16191,0
                                	;[1818] 	MUSIC D3#,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1818
F457   1910 0000                	DECLE 6416,0
                                	;[1819] 	MUSIC E3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1819
F459   2211 0000                	DECLE 8721,0
                                	;[1820] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1820
F45B   3F3F 0000                	DECLE 16191,0
                                	;[1821] 	MUSIC G3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1821
F45D   1914 0000                	DECLE 6420,0
                                	;[1822] 	MUSIC C3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1822
F45F   250D 0000                	DECLE 9485,0
                                	;[1823] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1823
F461   3F3F 0000                	DECLE 16191,0
                                	;[1824] 	MUSIC A3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1824
F463   1916 0000                	DECLE 6422,0
                                	;[1825] 	MUSIC G3,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1825
F465   2214 0000                	DECLE 8724,0
                                	;[1826] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1826
F467   3F3F 0000                	DECLE 16191,0
                                	;[1827] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1827
F469   000D 0000                	DECLE 13,0
                                	;[1828] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1828
F46B   000D 0000                	DECLE 13,0
                                	;[1829] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1829
F46D   003F 0000                	DECLE 63,0
                                	;[1830] 	MUSIC D3#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1830
F46F   0010 0000                	DECLE 16,0
                                	;[1831] 	MUSIC E3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1831
F471   0011 0000                	DECLE 17,0
                                	;[1832] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1832
F473   003F 0000                	DECLE 63,0
                                	;[1833] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1833
F475   0014 0000                	DECLE 20,0
                                	;[1834] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1834
F477   000D 0000                	DECLE 13,0
                                	;[1835] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1835
F479   003F 0000                	DECLE 63,0
                                	;[1836] 	MUSIC A3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1836
F47B   0016 0000                	DECLE 22,0
                                	;[1837] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1837
F47D   0014 0000                	DECLE 20,0
                                	;[1838] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1838
F47F   003F 0000                	DECLE 63,0
                                	;[1839] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1839
F481   290D 0000                	DECLE 10509,0
                                	;[1840] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1840
F483   000D 0000                	DECLE 13,0
                                	;[1841] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1841
F485   003F 0000                	DECLE 63,0
                                	;[1842] 	MUSIC D3#,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1842
F487   0010 0000                	DECLE 16,0
                                	;[1843] 	MUSIC E3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1843
F489   0011 0000                	DECLE 17,0
                                	;[1844] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1844
F48B   003F 0000                	DECLE 63,0
                                	;[1845] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1845
F48D   2914 0000                	DECLE 10516,0
                                	;[1846] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1846
F48F   000D 0000                	DECLE 13,0
                                	;[1847] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1847
F491   003F 0000                	DECLE 63,0
                                	;[1848] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1848
F493   0016 0000                	DECLE 22,0
                                	;[1849] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1849
F495   0014 0000                	DECLE 20,0
                                	;[1850] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1850
F497   003F 0000                	DECLE 63,0
                                	;[1851] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1851
F499   000D 0000                	DECLE 13,0
                                	;[1852] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1852
F49B   000D 0000                	DECLE 13,0
                                	;[1853] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1853
F49D   003F 0000                	DECLE 63,0
                                	;[1854] 	MUSIC D3#,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1854
F49F   0010 0000                	DECLE 16,0
                                	;[1855] 	MUSIC E3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1855
F4A1   0011 0000                	DECLE 17,0
                                	;[1856] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1856
F4A3   003F 0000                	DECLE 63,0
                                	;[1857] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1857
F4A5   0014 0000                	DECLE 20,0
                                	;[1858] 	MUSIC C3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1858
F4A7   000D 0000                	DECLE 13,0
                                	;[1859] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1859
F4A9   003F 0000                	DECLE 63,0
                                	;[1860] 	MUSIC A3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1860
F4AB   0016 0000                	DECLE 22,0
                                	;[1861] 	MUSIC G3,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1861
F4AD   0014 0000                	DECLE 20,0
                                	;[1862] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1862
F4AF   003F 0000                	DECLE 63,0
                                	;[1863] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1863
F4B1   290D 0000                	DECLE 10509,0
                                	;[1864] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1864
F4B3   290D 0000                	DECLE 10509,0
                                	;[1865] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1865
F4B5   3F3F 0000                	DECLE 16191,0
                                	;[1866] 	MUSIC D3#,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1866
F4B7   2910 0000                	DECLE 10512,0
                                	;[1867] 	MUSIC E3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1867
F4B9   2911 0000                	DECLE 10513,0
                                	;[1868] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1868
F4BB   3F3F 0000                	DECLE 16191,0
                                	;[1869] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1869
F4BD   2914 0000                	DECLE 10516,0
                                	;[1870] 	MUSIC C3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1870
F4BF   290D 0000                	DECLE 10509,0
                                	;[1871] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1871
F4C1   3F3F 0000                	DECLE 16191,0
                                	;[1872] 	MUSIC A3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1872
F4C3   2916 0000                	DECLE 10518,0
                                	;[1873] 	MUSIC G3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1873
F4C5   2914 0000                	DECLE 10516,0
                                	;[1874] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1874
F4C7   3F3F 0000                	DECLE 16191,0
                                	;[1875] 	MUSIC C3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1875
F4C9   190D 0000                	DECLE 6413,0
                                	;[1876] 	MUSIC C3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1876
F4CB   200D 0000                	DECLE 8205,0
                                	;[1877] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1877
F4CD   3F3F 0000                	DECLE 16191,0
                                	;[1878] 	MUSIC D3#,A4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1878
F4CF   2210 0000                	DECLE 8720,0
                                	;[1879] 	MUSIC E3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1879
F4D1   2011 0000                	DECLE 8209,0
                                	;[1880] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1880
F4D3   3F3F 0000                	DECLE 16191,0
                                	;[1881] 	MUSIC G3,C4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1881
F4D5   1914 0000                	DECLE 6420,0
                                	;[1882] 	MUSIC C3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1882
F4D7   000D 0000                	DECLE 13,0
                                	;[1883] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1883
F4D9   003F 0000                	DECLE 63,0
                                	;[1884] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1884
F4DB   0016 0000                	DECLE 22,0
                                	;[1885] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1885
F4DD   0014 0000                	DECLE 20,0
                                	;[1886] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1886
F4DF   003F 0000                	DECLE 63,0
                                	;[1887] 	MUSIC F3,F5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1887
F4E1   2A12 0000                	DECLE 10770,0
                                	;[1888] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1888
F4E3   1E12 0000                	DECLE 7698,0
                                	;[1889] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1889
F4E5   3F3F 0000                	DECLE 16191,0
                                	;[1890] 	MUSIC G3#,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1890
F4E7   2715 0000                	DECLE 10005,0
                                	;[1891] 	MUSIC A3,B4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1891
F4E9   2416 0000                	DECLE 9238,0
                                	;[1892] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1892
F4EB   3F3F 0000                	DECLE 16191,0
                                	;[1893] 	MUSIC C4,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1893
F4ED   2519 0000                	DECLE 9497,0
                                	;[1894] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1894
F4EF   1E12 0000                	DECLE 7698,0
                                	;[1895] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1895
F4F1   3F3F 0000                	DECLE 16191,0
                                	;[1896] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1896
F4F3   001B 0000                	DECLE 27,0
                                	;[1897] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1897
F4F5   0019 0000                	DECLE 25,0
                                	;[1898] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1898
F4F7   003F 0000                	DECLE 63,0
                                	;[1899] 	MUSIC F3,F5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1899
F4F9   2A12 0000                	DECLE 10770,0
                                	;[1900] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1900
F4FB   1E12 0000                	DECLE 7698,0
                                	;[1901] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1901
F4FD   3F3F 0000                	DECLE 16191,0
                                	;[1902] 	MUSIC G3#,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1902
F4FF   2715 0000                	DECLE 10005,0
                                	;[1903] 	MUSIC A3,B4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1903
F501   2416 0000                	DECLE 9238,0
                                	;[1904] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1904
F503   3F3F 0000                	DECLE 16191,0
                                	;[1905] 	MUSIC C4,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1905
F505   2519 0000                	DECLE 9497,0
                                	;[1906] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1906
F507   1E12 0000                	DECLE 7698,0
                                	;[1907] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1907
F509   3F3F 0000                	DECLE 16191,0
                                	;[1908] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1908
F50B   001B 0000                	DECLE 27,0
                                	;[1909] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1909
F50D   0019 0000                	DECLE 25,0
                                	;[1910] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1910
F50F   003F 0000                	DECLE 63,0
                                	;[1911] 	MUSIC F3,A5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1911
F511   2E12 0000                	DECLE 11794,0
                                	;[1912] 	MUSIC F3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1912
F513   0012 0000                	DECLE 18,0
                                	;[1913] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1913
F515   003F 0000                	DECLE 63,0
                                	;[1914] 	MUSIC G3#,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1914
F517   0015 0000                	DECLE 21,0
                                	;[1915] 	MUSIC A3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1915
F519   0016 0000                	DECLE 22,0
                                	;[1916] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1916
F51B   003F 0000                	DECLE 63,0
                                	;[1917] 	MUSIC C4,A5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1917
F51D   2E19 0000                	DECLE 11801,0
                                	;[1918] 	MUSIC F3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1918
F51F   0012 0000                	DECLE 18,0
                                	;[1919] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1919
F521   003F 0000                	DECLE 63,0
                                	;[1920] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1920
F523   001B 0000                	DECLE 27,0
                                	;[1921] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1921
F525   0019 0000                	DECLE 25,0
                                	;[1922] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1922
F527   003F 0000                	DECLE 63,0
                                	;[1923] 	MUSIC F3,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1923
F529   1E12 0000                	DECLE 7698,0
                                	;[1924] 	MUSIC F3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1924
F52B   2512 0000                	DECLE 9490,0
                                	;[1925] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1925
F52D   3F3F 0000                	DECLE 16191,0
                                	;[1926] 	MUSIC G3#,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1926
F52F   2715 0000                	DECLE 10005,0
                                	;[1927] 	MUSIC A3,C5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1927
F531   2516 0000                	DECLE 9494,0
                                	;[1928] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1928
F533   3F3F 0000                	DECLE 16191,0
                                	;[1929] 	MUSIC C4,F4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1929
F535   1E19 0000                	DECLE 7705,0
                                	;[1930] 	MUSIC F3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1930
F537   0012 0000                	DECLE 18,0
                                	;[1931] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1931
F539   003F 0000                	DECLE 63,0
                                	;[1932] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1932
F53B   001B 0000                	DECLE 27,0
                                	;[1933] 	MUSIC C4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1933
F53D   0019 0000                	DECLE 25,0
                                	;[1934] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1934
F53F   003F 0000                	DECLE 63,0
                                	;[1935] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1935
F541   2014 0000                	DECLE 8212,0
                                	;[1936] 	MUSIC G3,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1936
F543   2714 0000                	DECLE 10004,0
                                	;[1937] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1937
F545   3F3F 0000                	DECLE 16191,0
                                	;[1938] 	MUSIC A3#,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1938
F547   2017 0000                	DECLE 8215,0
                                	;[1939] 	MUSIC B3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1939
F549   2918 0000                	DECLE 10520,0
                                	;[1940] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1940
F54B   3F3F 0000                	DECLE 16191,0
                                	;[1941] 	MUSIC D4,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1941
F54D   201B 0000                	DECLE 8219,0
                                	;[1942] 	MUSIC G3,G5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1942
F54F   2C14 0000                	DECLE 11284,0
                                	;[1943] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1943
F551   3F3F 0000                	DECLE 16191,0
                                	;[1944] 	MUSIC E4,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1944
F553   201D 0000                	DECLE 8221,0
                                	;[1945] 	MUSIC D4,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1945
F555   291B 0000                	DECLE 10523,0
                                	;[1946] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1946
F557   3F3F 0000                	DECLE 16191,0
                                	;[1947] 	MUSIC G3,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1947
F559   3014 0000                	DECLE 12308,0
                                	;[1948] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1948
F55B   0014 0000                	DECLE 20,0
                                	;[1949] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1949
F55D   003F 0000                	DECLE 63,0
                                	;[1950] 	MUSIC A3#,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1950
F55F   0017 0000                	DECLE 23,0
                                	;[1951] 	MUSIC B3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1951
F561   0018 0000                	DECLE 24,0
                                	;[1952] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1952
F563   003F 0000                	DECLE 63,0
                                	;[1953] 	MUSIC D4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1953
F565   301B 0000                	DECLE 12315,0
                                	;[1954] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1954
F567   0014 0000                	DECLE 20,0
                                	;[1955] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1955
F569   003F 0000                	DECLE 63,0
                                	;[1956] 	MUSIC E4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1956
F56B   001D 0000                	DECLE 29,0
                                	;[1957] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1957
F56D   001B 0000                	DECLE 27,0
                                	;[1958] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1958
F56F   003F 0000                	DECLE 63,0
                                	;[1959] 	MUSIC G3,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1959
F571   2014 0000                	DECLE 8212,0
                                	;[1960] 	MUSIC G3,D5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1960
F573   2714 0000                	DECLE 10004,0
                                	;[1961] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1961
F575   3F3F 0000                	DECLE 16191,0
                                	;[1962] 	MUSIC A3#,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1962
F577   2017 0000                	DECLE 8215,0
                                	;[1963] 	MUSIC B3,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1963
F579   2918 0000                	DECLE 10520,0
                                	;[1964] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1964
F57B   3F3F 0000                	DECLE 16191,0
                                	;[1965] 	MUSIC D4,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1965
F57D   201B 0000                	DECLE 8219,0
                                	;[1966] 	MUSIC G3,G5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1966
F57F   2C14 0000                	DECLE 11284,0
                                	;[1967] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1967
F581   3F3F 0000                	DECLE 16191,0
                                	;[1968] 	MUSIC E4,G4,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1968
F583   201D 0000                	DECLE 8221,0
                                	;[1969] 	MUSIC D4,E5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1969
F585   291B 0000                	DECLE 10523,0
                                	;[1970] 	MUSIC S,S,-
                                	SRCFILE "samples/pumpkin_master.bas",1970
F587   3F3F 0000                	DECLE 16191,0
                                	;[1971] 	MUSIC G3,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1971
F589   3014 0000                	DECLE 12308,0
                                	;[1972] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1972
F58B   0014 0000                	DECLE 20,0
                                	;[1973] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1973
F58D   003F 0000                	DECLE 63,0
                                	;[1974] 	MUSIC A3#,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1974
F58F   3017 0000                	DECLE 12311,0
                                	;[1975] 	MUSIC B3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1975
F591   0018 0000                	DECLE 24,0
                                	;[1976] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1976
F593   003F 0000                	DECLE 63,0
                                	;[1977] 	MUSIC D4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1977
F595   301B 0000                	DECLE 12315,0
                                	;[1978] 	MUSIC G3,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1978
F597   0014 0000                	DECLE 20,0
                                	;[1979] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1979
F599   003F 0000                	DECLE 63,0
                                	;[1980] 	MUSIC E4,B5,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1980
F59B   301D 0000                	DECLE 12317,0
                                	;[1981] 	MUSIC D4,-,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1981
F59D   001B 0000                	DECLE 27,0
                                	;[1982] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1982
F59F   003F 0000                	DECLE 63,0
                                	;[1983] 	MUSIC REPEAT
                                	SRCFILE "samples/pumpkin_master.bas",1983
F5A1   0000 FD00                	DECLE 0,64768
                                	;[1984] 
                                	SRCFILE "samples/pumpkin_master.bas",1984
                                	;[1985] 	'
                                	SRCFILE "samples/pumpkin_master.bas",1985
                                	;[1986] 	' Boss "music"
                                	SRCFILE "samples/pumpkin_master.bas",1986
                                	;[1987] 	'
                                	SRCFILE "samples/pumpkin_master.bas",1987
                                	;[1988] music_beat:
                                	SRCFILE "samples/pumpkin_master.bas",1988
                                	; MUSIC_BEAT
0xF5A3                          label_MUSIC_BEAT:	;[1989] 	DATA 6
                                	SRCFILE "samples/pumpkin_master.bas",1989
F5A3   0006                     	DECLE 6
                                	;[1990] 	MUSIC C2W,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1990
F5A4   0001 0000                	DECLE 1,0
                                	;[1991] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1991
F5A6   003F 0000                	DECLE 63,0
                                	;[1992] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1992
F5A8   003F 0000                	DECLE 63,0
                                	;[1993] 	MUSIC -,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1993
F5AA   0000 0000                	DECLE 0,0
                                	;[1994] 	MUSIC C2#W,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1994
F5AC   0002 0000                	DECLE 2,0
                                	;[1995] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1995
F5AE   003F 0000                	DECLE 63,0
                                	;[1996] 	MUSIC S,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1996
F5B0   003F 0000                	DECLE 63,0
                                	;[1997] 	MUSIC -,-,-
                                	SRCFILE "samples/pumpkin_master.bas",1997
F5B2   0000 0000                	DECLE 0,0
                                	;[1998] 	MUSIC REPEAT
                                	SRCFILE "samples/pumpkin_master.bas",1998
F5B4   0000 FD00                	DECLE 0,64768
                                	;ENDFILE
                                	SRCFILE "",0
                                	;
                                	; Epilogue for IntyBASIC programs
                                	; by Oscar Toledo G.  http://nanochess.org/
                                	;
                                	; Revision: Jan/30/2014. Moved GRAM code below MOB updates.
                                	;                        Added comments.
                                	; Revision: Feb/26/2014. Optimized access to collision registers
                                	;                        per DZ-Jay suggestion. Added scrolling
                                	;                        routines with optimization per intvnut
                                	;                        suggestion. Added border/mask support.
                                	; Revision: Apr/02/2014. Added support to set MODE (color stack
                                	;                        or foreground/background), added support
                                	;                        for SCREEN statement.
                                	; Revision: Aug/19/2014. Solved bug in bottom scroll, moved an
                                	;                        extra unneeded line.
                                	; Revision: Aug/26/2014. Integrated music player and NTSC/PAL
                                	;                        detection.
                                	; Revision: Oct/24/2014. Adjust in some comments.
                                	; Revision: Nov/13/2014. Integrated Joseph Zbiciak's routines
                                	;                        for printing numbers.
                                	; Revision: Nov/17/2014. Redesigned MODE support to use a single
                                	;                        variable.
                                	; Revision: Nov/21/2014. Added Intellivoice support routines made
                                	;                        by Joseph Zbiciak.
                                	; Revision: Dec/11/2014. Optimized keypad decode routines.
                                	; Revision: Jan/25/2015. Added marker for insertion of ON FRAME GOSUB
                                	; Revision: Feb/17/2015. Allows to deactivate music player (PLAY NONE)
                                	; Revision: Apr/21/2015. Accelerates common case of keypad not pressed.
                                	;                        Added ECS ROM disable code.
                                	; Revision: Apr/22/2015. Added Joseph Zbiciak accelerated multiplication
                                	;                        routines.
                                	; Revision: Jun/04/2015. Optimized play_music (per GroovyBee suggestion)
                                	; Revision: Jul/25/2015. Added infinite loop at start to avoid crashing
                                	;                        with empty programs. Solved bug where _color
                                	;                        didn't started with white.
                                	; Revision: Aug/20/2015. Moved ECS mapper disable code so nothing gets
                                	;                        after it (GroovyBee 42K sample code)
                                	; Revision: Aug/21/2015. Added Joseph Zbiciak routines for JLP Flash
                                	;                        handling.
                                	; Revision: Aug/31/2015. Added CPYBLK2 for SCREEN fifth argument.
                                	; Revision: Sep/01/2015. Defined labels Q1 and Q2 as alias.
                                	; Revision: Jan/22/2016. Music player allows not to use noise channel
                                	;                        for drums. Allows setting music volume.
                                	; Revision: Jan/23/2016. Added jump inside of music (for MUSIC JUMP)
                                	; Revision: May/03/2016. Preserves current mode in bit 0 of _mode_select
                                	; Revision: Oct/21/2016. Added C7 in notes table, it was missing. (thanks
                                	;                        mmarrero)
                                	; Revision: Jan/09/2018. Initializes scroll offset registers (useful when
                                	;                        starting from $4800). Uses slightly less space.
                                	; Revision: Feb/05/2018. Added IV_HUSH.
                                	; Revision: Mar/01/2018. Added support for music tracker over ECS.
                                	; Revision: Sep/25/2018. Solved bug in mixer for ECS drums.
                                	; Revision: Oct/30/2018. Small optimization in music player.
                                	; Revision: Jan/09/2019. Solved bug where it would play always like
                                	;                        PLAY SIMPLE NO DRUMS.
                                	; Revision: May/18/2019. Solved bug where drums failed in ECS side.
                                	;

                                	;
                                	; Avoids empty programs to crash
                                	; 
F5B6   0220 0001                stuck:	B stuck

                                ;	ROM.SelectDefaultSegment
                                	;

                                	;
                                	; Copy screen helper for SCREEN wide statement
                                	;

0xF5B8                          CPYBLK2:	PROC
F5B8   0083                     	MOVR R0,R3		; Offset
F5B9   00AA                     	MOVR R5,R2
F5BA   02B0                     	PULR R0
F5BB   02B1                     	PULR R1
F5BC   02B5                     	PULR R5
F5BD   02B4                     	PULR R4
F5BE   0272                     	PSHR R2
F5BF   010B                     	SUBR R1,R3

F5C0   0273                     @@1:	PSHR R3
F5C1   008B                     	MOVR R1,R3		; Init line copy
F5C2   02A2                     @@2:	MVI@ R4,R2		; Copy line
F5C3   026A                     	MVO@ R2,R5
F5C4   0013                     	DECR R3
F5C5   022C 0004                	BNE @@2
F5C7   02B3                     	PULR R3		 ; Add offset to start in next line
F5C8   00DC                     	ADDR R3,R4
F5C9   010D                     	SUBR R1,R5
F5CA   02FD 0014                	ADDI #20,R5
F5CC   0010                     	DECR R0		 ; Count lines
F5CD   022C 000E                	BNE @@1

F5CF   02B7                     	RETURN
                                	ENDP

                                	;
                                	; Copy screen helper for SCREEN statement
                                	;
0xF5D0                          CPYBLK:	PROC
F5D0   0275                     	BEGIN
F5D1   009C                     	MOVR R3,R4
F5D2   0095                     	MOVR R2,R5

F5D3   008B                     @@1:	MOVR R1,R3	      ; Init line copy
F5D4   02A2                     @@2:	MVI@ R4,R2	      ; Copy line
F5D5   026A                     	MVO@ R2,R5
F5D6   0013                     	DECR R3
F5D7   022C 0004                	BNE @@2
F5D9   02BB 0014                	MVII #20,R3	     ; Add offset to start in next line
F5DB   010B                     	SUBR R1,R3
F5DC   00DC                     	ADDR R3,R4
F5DD   00DD                     	ADDR R3,R5
F5DE   0010                     	DECR R0		 ; Count lines
F5DF   022C 000D                	BNE @@1
F5E1   02B7                     	RETURN
                                	ENDP

                                	;
                                	; Wait for interruption
                                	;
0xF5E2                          _wait:  PROC

                                    IF intybasic_keypad
                                	MVI $01FF,R0
                                	COMR R0
                                	ANDI #$FF,R0
                                	CMP _cnt1_p0,R0
                                	BNE @@2
                                	CMP _cnt1_p1,R0
                                	BNE @@2
                                	TSTR R0		; Accelerates common case of key not pressed
                                	MVII #_keypad_table+13,R4
                                	BEQ @@4
                                	MVII #_keypad_table,R4
                                    REPEAT 6
                                	CMP@ R4,R0
                                	BEQ @@4
                                	CMP@ R4,R0
                                	BEQ @@4
                                    ENDR
                                	INCR R4
                                @@4:    SUBI #_keypad_table+1,R4
                                	MVO R4,_cnt1_key

                                @@2:    MVI _cnt1_p1,R1
                                	MVO R1,_cnt1_p0
                                	MVO R0,_cnt1_p1

                                	MVI $01FE,R0
                                	COMR R0
                                	ANDI #$FF,R0
                                	CMP _cnt2_p0,R0
                                	BNE @@5
                                	CMP _cnt2_p1,R0
                                	BNE @@5
                                	TSTR R0		; Accelerates common case of key not pressed
                                	MVII #_keypad_table+13,R4
                                	BEQ @@7
                                	MVII #_keypad_table,R4
                                    REPEAT 6
                                	CMP@ R4,R0
                                	BEQ @@7
                                	CMP@ R4,R0
                                	BEQ @@7
                                    ENDR

                                	INCR R4
                                @@7:    SUBI #_keypad_table+1,R4
                                	MVO R4,_cnt2_key

                                @@5:    MVI _cnt2_p1,R1
                                	MVO R1,_cnt2_p0
                                	MVO R0,_cnt2_p1
                                    ENDI

F5E2   01C0                     	CLRR    R0
F5E3   0240 0102                	MVO     R0,_int	 ; Clears waiting flag
F5E5   0340 0102                @@1:	CMP     _int,  R0       ; Waits for change
F5E7   0224 0003                	BEQ     @@1
F5E9   00AF                     	JR      R5	      ; Returns
                                	ENDP

                                	;
                                	; Keypad table
                                	;
0xF5EA                          _keypad_table:	  PROC
F5EA   0048 0081 0041 0021      	DECLE $48,$81,$41,$21,$82,$42,$22,$84,$44,$24,$88,$28
F5EE   0082 0042 0022 0084 0044 0024 0088 0028 
                                	ENDP

0xF5F6                          _set_isr:	PROC
F5F6   02A8                     	MVI@ R5,R0
F5F7   0240 0100                	MVO R0,ISRVEC
F5F9   0040                     	SWAP R0
F5FA   0240 0101                	MVO R0,ISRVEC+1
F5FC   00AF                     	JR R5
                                	ENDP

                                	;
                                	; Interruption routine
                                	;
0xF5FD                          _int_vector:     PROC

                                    IF intybasic_stack
                                	CMPI #$308,R6
                                	BNC @@vs
                                	MVO R0,$20	; Enables display
                                	MVI $21,R0	; Activates Color Stack mode
                                	CLRR R0
                                	MVO R0,$28
                                	MVO R0,$29
                                	MVO R0,$2A
                                	MVO R0,$2B
                                	MVII #@@vs1,R4
                                	MVII #$200,R5
                                	MVII #20,R1
                                @@vs2:	MVI@ R4,R0
                                	MVO@ R0,R5
                                	DECR R1
                                	BNE @@vs2
                                	RETURN

                                	; Stack Overflow message
                                @@vs1:	DECLE 0,0,0,$33*8+7,$54*8+7,$41*8+7,$43*8+7,$4B*8+7,$00*8+7
                                	DECLE $4F*8+7,$56*8+7,$45*8+7,$52*8+7,$46*8+7,$4C*8+7
                                	DECLE $4F*8+7,$57*8+7,0,0,0

                                @@vs:
                                    ENDI

F5FD   02B9 0001                	MVII #1,R1
F5FF   0241 0102                	MVO R1,_int	; Indicates interrupt happened.

F601   0280 0109                	MVI _mode_select,R0
F603   007C                     	SARC R0,2
F604   020C 0002                	BNE @@ds
F606   0240 0020                	MVO R0,$20	; Enables display
F608   0209 0006                @@ds:	BNC @@vi14
F60A   0240 0021                	MVO R0,$21	; Foreground/background mode
F60C   020A 001B                	BNOV @@vi0
F60E   0200 0013                	B @@vi15

F610   0280 0021                @@vi14:	MVI $21,R0	; Color stack mode
F612   020A 0015                	BNOV @@vi0
F614   01C9                     	CLRR R1
F615   0280 0347                	MVI _color,R0
F617   0240 0028                	MVO R0,$28
F619   0040                     	SWAP R0
F61A   0240 0029                	MVO R0,$29
F61C   0064                     	SLR R0,2
F61D   0064                     	SLR R0,2
F61E   0240 002A                	MVO R0,$2A
F620   0040                     	SWAP R0
F621   0240 002B                	MVO R0,$2B
0xF623                          @@vi15:
F623   0241 0109                	MVO R1,_mode_select
F625   02B8 0007                	MVII #7,R0
F627   0240 0347                	MVO R0,_color	   ; Default color for PRINT "string"
0xF629                          @@vi0:

F629   0275                     	BEGIN

F62A   0280 010A                	MVI _border_color,R0
F62C   0240 002C                	MVO     R0,     $2C     ; Border color
F62E   0280 010B                	MVI _border_mask,R0
F630   0240 0032                	MVO     R0,     $32     ; Border mask
                                    IF intybasic_col
                                	;
                                	; Save collision registers for further use and clear them
                                	;
F632   02BC 0018                	MVII #$18,R4
F634   02BD 0337                	MVII #_col0,R5
F636   02A0                     	MVI@ R4,R0
F637   0268                     	MVO@ R0,R5  ; _col0
F638   02A0                     	MVI@ R4,R0
F639   0268                     	MVO@ R0,R5  ; _col1
F63A   02A0                     	MVI@ R4,R0
F63B   0268                     	MVO@ R0,R5  ; _col2
F63C   02A0                     	MVI@ R4,R0
F63D   0268                     	MVO@ R0,R5  ; _col3
F63E   02A0                     	MVI@ R4,R0
F63F   0268                     	MVO@ R0,R5  ; _col4
F640   02A0                     	MVI@ R4,R0
F641   0268                     	MVO@ R0,R5  ; _col5
F642   02A0                     	MVI@ R4,R0
F643   0268                     	MVO@ R0,R5  ; _col6
F644   02A0                     	MVI@ R4,R0
F645   0268                     	MVO@ R0,R5  ; _col7
                                    ENDI
                                	
                                    IF intybasic_scroll

                                	;
                                	; Scrolling things
                                	;
                                	MVI _scroll_x,R0
                                	MVO R0,$30
                                	MVI _scroll_y,R0
                                	MVO R0,$31
                                    ENDI

                                	;
                                	; Updates sprites (MOBs)
                                	;
F646   02BC 0348                	MVII #_mobs,R4
F648   01ED                     	CLRR R5		; X-coordinates
                                    REPEAT 8
F649   02A0                     	MVI@ R4,R0
F64A   0268                     	MVO@ R0,R5
F64B   02A0                     	MVI@ R4,R0
F64C   0268                     	MVO@ R0,R5
F64D   02A0                     	MVI@ R4,R0
F64E   0268                     	MVO@ R0,R5
  ;== 1                             ENDR
F64F   02A0                     	MVI@ R4,R0
F650   0268                     	MVO@ R0,R5
F651   02A0                     	MVI@ R4,R0
F652   0268                     	MVO@ R0,R5
F653   02A0                     	MVI@ R4,R0
F654   0268                     	MVO@ R0,R5
  ;== 2                             ENDR
F655   02A0                     	MVI@ R4,R0
F656   0268                     	MVO@ R0,R5
F657   02A0                     	MVI@ R4,R0
F658   0268                     	MVO@ R0,R5
F659   02A0                     	MVI@ R4,R0
F65A   0268                     	MVO@ R0,R5
  ;== 3                             ENDR
F65B   02A0                     	MVI@ R4,R0
F65C   0268                     	MVO@ R0,R5
F65D   02A0                     	MVI@ R4,R0
F65E   0268                     	MVO@ R0,R5
F65F   02A0                     	MVI@ R4,R0
F660   0268                     	MVO@ R0,R5
  ;== 4                             ENDR
F661   02A0                     	MVI@ R4,R0
F662   0268                     	MVO@ R0,R5
F663   02A0                     	MVI@ R4,R0
F664   0268                     	MVO@ R0,R5
F665   02A0                     	MVI@ R4,R0
F666   0268                     	MVO@ R0,R5
  ;== 5                             ENDR
F667   02A0                     	MVI@ R4,R0
F668   0268                     	MVO@ R0,R5
F669   02A0                     	MVI@ R4,R0
F66A   0268                     	MVO@ R0,R5
F66B   02A0                     	MVI@ R4,R0
F66C   0268                     	MVO@ R0,R5
  ;== 6                             ENDR
F66D   02A0                     	MVI@ R4,R0
F66E   0268                     	MVO@ R0,R5
F66F   02A0                     	MVI@ R4,R0
F670   0268                     	MVO@ R0,R5
F671   02A0                     	MVI@ R4,R0
F672   0268                     	MVO@ R0,R5
  ;== 7                             ENDR
F673   02A0                     	MVI@ R4,R0
F674   0268                     	MVO@ R0,R5
F675   02A0                     	MVI@ R4,R0
F676   0268                     	MVO@ R0,R5
F677   02A0                     	MVI@ R4,R0
F678   0268                     	MVO@ R0,R5
  ;== 8                             ENDR
                                    IF intybasic_col
F679   01C0                     	CLRR R0		; Erase collision bits (R5 = $18)
F67A   0268                     	MVO@ R0,R5
F67B   0268                     	MVO@ R0,R5
F67C   0268                     	MVO@ R0,R5
F67D   0268                     	MVO@ R0,R5
F67E   0268                     	MVO@ R0,R5
F67F   0268                     	MVO@ R0,R5
F680   0268                     	MVO@ R0,R5
F681   0268                     	MVO@ R0,R5
                                    ENDI

                                    IF intybasic_music
F682   0280 0103                     	MVI _ntsc,R0
F684   0070                     	RRC R0,1	 ; PAL?
F685   0209 000C                	BNC @@vo97      ; Yes, always emit sound
F687   0280 010F                	MVI _music_frame,R0
F689   0008                     	INCR R0
F68A   0378 0006                	CMPI #6,R0
F68C   020C 0001                	BNE @@vo14
F68E   01C0                     	CLRR R0
F68F   0240 010F                @@vo14:	MVO R0,_music_frame
F691   0204 0003                	BEQ @@vo15
F693   0004 01F8 02AA           @@vo97:	CALL _emit_sound
                                    IF intybasic_music_ecs
                                	CALL _emit_sound_ecs
                                    ENDI
0xF696                          @@vo15:
                                    ENDI

                                	;
                                	; Detect GRAM definition
                                	;
F696   0284 0344                	MVI _gram_bitmap,R4
F698   00A4                     	TSTR R4
F699   0204 001E                	BEQ @@vi1
F69B   0281 0105                	MVI _gram_target,R1
F69D   004D                     	SLL R1,2
F69E   0049                     	SLL R1,1
F69F   02F9 3800                	ADDI #$3800,R1
F6A1   008D                     	MOVR R1,R5
F6A2   0280 0106                	MVI _gram_total,R0
0xF6A4                          @@vi3:
F6A4   02A1                     	MVI@    R4,     R1
F6A5   0269                     	MVO@    R1,     R5
F6A6   0041                     	SWAP    R1
F6A7   0269                     	MVO@    R1,     R5
F6A8   02A1                     	MVI@    R4,     R1
F6A9   0269                     	MVO@    R1,     R5
F6AA   0041                     	SWAP    R1
F6AB   0269                     	MVO@    R1,     R5
F6AC   02A1                     	MVI@    R4,     R1
F6AD   0269                     	MVO@    R1,     R5
F6AE   0041                     	SWAP    R1
F6AF   0269                     	MVO@    R1,     R5
F6B0   02A1                     	MVI@    R4,     R1
F6B1   0269                     	MVO@    R1,     R5
F6B2   0041                     	SWAP    R1
F6B3   0269                     	MVO@    R1,     R5
F6B4   0010                     	DECR R0
F6B5   022C 0012                	BNE @@vi3
F6B7   0240 0344                	MVO R0,_gram_bitmap
0xF6B9                          @@vi1:
F6B9   0284 0345                	MVI _gram2_bitmap,R4
F6BB   00A4                     	TSTR R4
F6BC   0204 001E                	BEQ @@vii1
F6BE   0281 0107                	MVI _gram2_target,R1
F6C0   004D                     	SLL R1,2
F6C1   0049                     	SLL R1,1
F6C2   02F9 3800                	ADDI #$3800,R1
F6C4   008D                     	MOVR R1,R5
F6C5   0280 0108                	MVI _gram2_total,R0
0xF6C7                          @@vii3:
F6C7   02A1                     	MVI@    R4,     R1
F6C8   0269                     	MVO@    R1,     R5
F6C9   0041                     	SWAP    R1
F6CA   0269                     	MVO@    R1,     R5
F6CB   02A1                     	MVI@    R4,     R1
F6CC   0269                     	MVO@    R1,     R5
F6CD   0041                     	SWAP    R1
F6CE   0269                     	MVO@    R1,     R5
F6CF   02A1                     	MVI@    R4,     R1
F6D0   0269                     	MVO@    R1,     R5
F6D1   0041                     	SWAP    R1
F6D2   0269                     	MVO@    R1,     R5
F6D3   02A1                     	MVI@    R4,     R1
F6D4   0269                     	MVO@    R1,     R5
F6D5   0041                     	SWAP    R1
F6D6   0269                     	MVO@    R1,     R5
F6D7   0010                     	DECR R0
F6D8   022C 0012                	BNE @@vii3
F6DA   0240 0345                	MVO R0,_gram2_bitmap
0xF6DC                          @@vii1:

                                    IF intybasic_scroll
                                	;
                                	; Frame scroll support
                                	;
                                	MVI _scroll_d,R0
                                	TSTR R0
                                	BEQ @@vi4
                                	CLRR R1
                                	MVO R1,_scroll_d
                                	DECR R0     ; Left
                                	BEQ @@vi5
                                	DECR R0     ; Right
                                	BEQ @@vi6
                                	DECR R0     ; Top
                                	BEQ @@vi7
                                	DECR R0     ; Bottom
                                	BEQ @@vi8
                                	B @@vi4

                                @@vi5:  MVII #$0200,R4
                                	MOVR R4,R5
                                	INCR R5
                                	MVII #12,R1
                                @@vi12: MVI@ R4,R2
                                	MVI@ R4,R3
                                	REPEAT 8
                                	MVO@ R2,R5
                                	MVI@ R4,R2
                                	MVO@ R3,R5
                                	MVI@ R4,R3
                                	ENDR
                                	MVO@ R2,R5
                                	MVI@ R4,R2
                                	MVO@ R3,R5
                                	MVO@ R2,R5
                                	INCR R4
                                	INCR R5
                                	DECR R1
                                	BNE @@vi12
                                	B @@vi4

                                @@vi6:  MVII #$0201,R4
                                	MVII #$0200,R5
                                	MVII #12,R1
                                @@vi11:
                                	REPEAT 19
                                	MVI@ R4,R0
                                	MVO@ R0,R5
                                	ENDR
                                	INCR R4
                                	INCR R5
                                	DECR R1
                                	BNE @@vi11
                                	B @@vi4
                                    
                                	;
                                	; Complex routine to be ahead of STIC display
                                	; Moves first the top 6 lines, saves intermediate line
                                	; Then moves the bottom 6 lines and restores intermediate line
                                	;
                                @@vi7:  MVII #$0264,R4
                                	MVII #5,R1
                                	MVII #_scroll_buffer,R5
                                	REPEAT 20
                                	MVI@ R4,R0
                                	MVO@ R0,R5
                                	ENDR
                                	SUBI #40,R4
                                	MOVR R4,R5
                                	ADDI #20,R5
                                @@vi10:
                                	REPEAT 20
                                	MVI@ R4,R0
                                	MVO@ R0,R5
                                	ENDR
                                	SUBI #40,R4
                                	SUBI #40,R5
                                	DECR R1
                                	BNE @@vi10
                                	MVII #$02C8,R4
                                	MVII #$02DC,R5
                                	MVII #5,R1
                                @@vi13:
                                	REPEAT 20
                                	MVI@ R4,R0
                                	MVO@ R0,R5
                                	ENDR
                                	SUBI #40,R4
                                	SUBI #40,R5
                                	DECR R1
                                	BNE @@vi13
                                	MVII #_scroll_buffer,R4
                                	REPEAT 20
                                	MVI@ R4,R0
                                	MVO@ R0,R5
                                	ENDR
                                	B @@vi4

                                @@vi8:  MVII #$0214,R4
                                	MVII #$0200,R5
                                	MVII #$DC/4,R1
                                @@vi9:  
                                	REPEAT 4
                                	MVI@ R4,R0
                                	MVO@ R0,R5
                                	ENDR
                                	DECR R1
                                	BNE @@vi9
                                	B @@vi4

                                @@vi4:
                                    ENDI

                                    IF intybasic_voice
                                	;
                                	; Intellivoice support
                                	;
                                	CALL IV_ISR
                                    ENDI

                                	;
                                	; Random number generator
                                	;
F6DC   0004 01F4 02F5           	CALL _next_random

                                    IF intybasic_music
                                	; Generate sound for next frame
F6DF   0280 0103                       	MVI _ntsc,R0
F6E1   0070                     	RRC R0,1	 ; PAL?
F6E2   0209 0005                	BNC @@vo98      ; Yes, always generate sound
F6E4   0280 010F                	MVI _music_frame,R0
F6E6   0080                     	TSTR R0
F6E7   0204 0003                	BEQ @@vo16
F6E9   0004 01F4 03C2           @@vo98: CALL _generate_music
0xF6EC                          @@vo16:
                                    ENDI

                                	; Increase frame number
F6EC   0280 0342                	MVI _frame,R0
F6EE   0008                     	INCR R0
F6EF   0240 0342                	MVO R0,_frame

                                	; This mark is for ON FRAME GOSUB support
F6F1   0004 0164 02E5           	CALL label_PLAY_SOUND

F6F4   02B7                     	RETURN
                                	ENDP

                                	;
                                	; Generates the next random number
                                	;
0xF6F5                          _next_random:	PROC

                                MACRO _ROR
                                	RRC R0,1
                                	MOVR R0,R2
                                	SLR R2,2
                                	SLR R2,2
                                	ANDI #$0800,R2
                                	SLR R2,2
                                	SLR R2,2
                                	ANDI #$007F,R0
                                	XORR R2,R0
                                ENDM
F6F5   0280 0104                	MVI _rand,R0
F6F7   0007                     	SETC
                                ;	_ROR
F6F8   0070                     	RRC R0,1
F6F9   0082                     	MOVR R0,R2
F6FA   0066                     	SLR R2,2
F6FB   0066                     	SLR R2,2
F6FC   03BA 0800                	ANDI #$0800,R2
F6FE   0066                     	SLR R2,2
F6FF   0066                     	SLR R2,2
F700   03B8 007F                	ANDI #$007F,R0
F702   01D0                     	XORR R2,R0
F703   03C0 0342                	XOR _frame,R0
                                ;	_ROR
F705   0070                     	RRC R0,1
F706   0082                     	MOVR R0,R2
F707   0066                     	SLR R2,2
F708   0066                     	SLR R2,2
F709   03BA 0800                	ANDI #$0800,R2
F70B   0066                     	SLR R2,2
F70C   0066                     	SLR R2,2
F70D   03B8 007F                	ANDI #$007F,R0
F70F   01D0                     	XORR R2,R0
F710   03C0 0104                	XOR _rand,R0
                                ;	_ROR
F712   0070                     	RRC R0,1
F713   0082                     	MOVR R0,R2
F714   0066                     	SLR R2,2
F715   0066                     	SLR R2,2
F716   03BA 0800                	ANDI #$0800,R2
F718   0066                     	SLR R2,2
F719   0066                     	SLR R2,2
F71A   03B8 007F                	ANDI #$007F,R0
F71C   01D0                     	XORR R2,R0
F71D   03F8 0009                	XORI #9,R0
F71F   0240 0104                	MVO R0,_rand
F721   00AF                     	JR R5
                                	ENDP

                                    IF intybasic_music

                                	;
                                	; Music player, comes from my game Princess Quest for Intellivision
                                	; so it's a practical tracker used in a real game ;) and with enough
                                	; features.
                                	;

                                	; NTSC frequency for notes (based on 3.579545 mhz)
0xF722                          ntsc_note_table:    PROC
                                	; Silence - 0
F722   0000                     	DECLE 0
                                	; Octave 2 - 1
F723   06B9 0655 05FC 059A      	DECLE 1721,1621,1532,1434,1364,1286,1216,1141,1076,1017,956,909
F727   0554 0506 04C0 0475 0434 03F9 03BC 038D 
                                	; Octave 3 - 13
F72F   0356 0325 02F9 02CD      	DECLE 854,805,761,717,678,639,605,571,538,508,480,453
F733   02A6 027F 025D 023B 021A 01FC 01E0 01C5 
                                	; Octave 4 - 25
F73B   01AB 0194 017C 0168      	DECLE 427,404,380,360,339,321,302,285,270,254,240,226
F73F   0153 0141 012E 011D 010E 00FE 00F0 00E2 
                                	; Octave 5 - 37
F747   00D6 00CA 00BF 00B4      	DECLE 214,202,191,180,170,160,151,143,135,127,120,113
F74B   00AA 00A0 0097 008F 0087 007F 0078 0071 
                                	; Octave 6 - 49
F753   006B 0065 005F 005A      	DECLE 107,101,95,90,85,80,76,71,67,64,60,57
F757   0055 0050 004C 0047 0043 0040 003C 0039 
                                	; Octave 7 - 61
F75F   0036                     	DECLE 54
                                	; Space for two notes more
                                	ENDP

                                	; PAL frequency for notes (based on 4 mhz)
0xF760                          pal_note_table:    PROC
                                	; Silence - 0
F760   0000                     	DECLE 0
                                	; Octava 2 - 1
F761   0783 0714 06B0 0643      	DECLE 1923,1812,1712,1603,1524,1437,1359,1276,1202,1136,1068,1016
F765   05F4 059D 054F 04FC 04B2 0470 042C 03F8 
                                	; Octava 3 - 13
F76D   03BA 0383 0352 0321      	DECLE 954,899,850,801,758,714,676,638,601,568,536,506
F771   02F6 02CA 02A4 027E 0259 0238 0218 01FA 
                                	; Octava 4 - 25
F779   01DD 01C3 01A9 0192      	DECLE 477,451,425,402,379,358,338,319,301,284,268,253
F77D   017B 0166 0152 013F 012D 011C 010C 00FD 
                                	; Octava 5 - 37
F785   00EF 00E2 00D5 00C9      	DECLE 239,226,213,201,190,179,169,159,150,142,134,127
F789   00BE 00B3 00A9 009F 0096 008E 0086 007F 
                                	; Octava 6 - 49
F791   0078 0071 006A 0064      	DECLE 120,113,106,100,95,89,84,80,75,71,67,63
F795   005F 0059 0054 0050 004B 0047 0043 003F 
                                	; Octava 7 - 61
F79D   003C                     	DECLE 60
                                	; Space for two notes more
                                	ENDP
                                    ENDI

                                	;
                                	; Music tracker init
                                	;
0xF79E                          _init_music:	PROC
                                    IF intybasic_music
F79E   0280 0103                	MVI _ntsc,R0
F7A0   0070                     	RRC R0,1
F7A1   02B8 F722                	MVII #ntsc_note_table,R0
F7A3   0201 0002                	BC @@0
F7A5   02B8 F760                	MVII #pal_note_table,R0
F7A7   0240 0340                @@0:	MVO R0,_music_table
F7A9   02B8 0038                	MVII #$38,R0	; $B8 blocks controllers o.O!
F7AB   0240 0123                	MVO R0,_music_mix
                                    IF intybasic_music_ecs
                                	MVO R0,_music2_mix
                                    ENDI
F7AD   01C0                     	CLRR R0
                                    ELSE
                                	JR R5		; Tracker disabled (no PLAY statement used)
                                    ENDI
                                	ENDP

                                    IF intybasic_music
                                	;
                                	; Start music
                                	; R0 = Pointer to music
                                	;
0xF7AE                          _play_music:	PROC
F7AE   02B9 0001                	MVII #1,R1
F7B0   008B                     	MOVR R1,R3
F7B1   0082                     	MOVR R0,R2
F7B2   0204 0002                	BEQ @@1
F7B4   0293                     	MVI@ R2,R3
F7B5   000A                     	INCR R2
F7B6   0242 0341                @@1:	MVO R2,_music_p
F7B8   0242 010C                	MVO R2,_music_start
F7BA   0042                     	SWAP R2
F7BB   0242 010D                	MVO R2,_music_start+1
F7BD   0243 0111                	MVO R3,_music_t
F7BF   0241 0110                	MVO R1,_music_tc
F7C1   00AF                     	JR R5

                                	ENDP

                                	;
                                	; Generate music
                                	;
0xF7C2                          _generate_music:	PROC
F7C2   0275                     	BEGIN
F7C3   0280 0123                	MVI _music_mix,R0
F7C5   03B8 00C0                	ANDI #$C0,R0
F7C7   03F8 0038                	XORI #$38,R0
F7C9   0240 0123                	MVO R0,_music_mix
                                    IF intybasic_music_ecs
                                	MVI _music2_mix,R0
                                	ANDI #$C0,R0
                                	XORI #$38,R0
                                	MVO R0,_music2_mix
                                    ENDI
F7CB   01C9                     	CLRR R1			; Turn off volume for the three sound channels
F7CC   0241 0125                	MVO R1,_music_vol1
F7CE   0241 0126                	MVO R1,_music_vol2
F7D0   0283 0110                	MVI _music_tc,R3
F7D2   0241 0127                	MVO R1,_music_vol3
                                    IF intybasic_music_ecs
                                	MVO R1,_music2_vol1
                                	NOP
                                	MVO R1,_music2_vol2
                                	MVO R1,_music2_vol3
                                    ENDI
F7D4   0013                     	DECR R3
F7D5   0243 0110                	MVO R3,_music_tc
F7D7   020C 007E                	BNE @@6
                                	; R3 is zero from here up to @@6
F7D9   0284 0341                	MVI _music_p,R4
F7DB   00A4                     @@15:	TSTR R4		; Silence?
F7DC   0204 0034                	BEQ @@43	; Keep quiet
F7DE   02A0                     @@41:	MVI@ R4,R0
F7DF   02A1                     	MVI@ R4,R1
F7E0   0282 0111                	MVI _music_t,R2
F7E2   0379 FA00                	CMPI #$FA00,R1	; Volume?
F7E4   0209 0032                	BNC @@42
                                    IF intybasic_music_volume
F7E6   0204 0018                	BEQ @@40
                                    ENDI
F7E8   0379 FF00                	CMPI #$FF00,R1	; Speed?
F7EA   0204 0018                	BEQ @@39
F7EC   0379 FB00                	CMPI #$FB00,R1	; Return?
F7EE   0204 0019                	BEQ @@38
F7F0   0379 FC00                	CMPI #$FC00,R1	; Gosub?
F7F2   0204 0019                	BEQ @@37
F7F4   0379 FE00                	CMPI #$FE00,R1	; The end?
F7F6   0204 0017                	BEQ @@36       ; Keep quiet
                                ;	CMPI #$FD00,R1	; Repeat?
                                ;	BNE @@42
F7F8   0280 010D                	MVI _music_start+1,R0
F7FA   0040                     	SWAP R0
F7FB   02C0 010C                	ADD _music_start,R0
F7FD   0084                     	MOVR R0,R4
F7FE   0220 0024                	B @@15

                                    IF intybasic_music_volume
0xF800                          @@40:	
F800   0240 0128                	MVO R0,_music_vol
F802   0220 0025                	B @@41
                                    ENDI

F804   0240 0111                @@39:	MVO R0,_music_t
F806   0082                     	MOVR R0,R2
F807   0220 002A                	B @@41

F809   0284 033F                @@38:	MVI _music_gosub,R4
F80B   0220 0031                	B @@15

F80D   0244 033F                @@37:	MVO R4,_music_gosub
F80F   0084                     @@36:	MOVR R0,R4	; Jump, zero will make it quiet
F810   0220 0036                	B @@15

F812   02B8 0001                @@43:	MVII #1,R0
F814   0240 0110                	MVO R0,_music_tc
F816   0200 00CD                	B @@0
                                	
F818   0242 0110                @@42: 	MVO R2,_music_tc    ; Restart note time
F81A   0244 0341                     	MVO R4,_music_p
                                     	
F81C   0082                     	MOVR R0,R2
F81D   03BA 00FF                	ANDI #$FF,R2
F81F   037A 003F                	CMPI #$3F,R2	; Sustain note?
F821   0204 000B                	BEQ @@1
F823   0094                     	MOVR R2,R4
F824   03BC 003F                	ANDI #$3F,R4
F826   0244 0114                	MVO R4,_music_n1	; Note
F828   0243 0113                	MVO R3,_music_s1	; Waveform
F82A   03BA 00C0                	ANDI #$C0,R2
F82C   0242 0112                	MVO R2,_music_i1	; Instrument
                                	
F82E   0040                     @@1:	SWAP R0
F82F   03B8 00FF                	ANDI #$FF,R0
F831   0378 003F                	CMPI #$3F,R0	; Sustain note?
F833   0204 000B                	BEQ @@2
F835   0084                     	MOVR R0,R4
F836   03BC 003F                	ANDI #$3F,R4
F838   0244 0117                	MVO R4,_music_n2	; Note
F83A   0243 0116                	MVO R3,_music_s2	; Waveform
F83C   03B8 00C0                	ANDI #$C0,R0
F83E   0240 0115                	MVO R0,_music_i2	; Instrument
                                	
F840   008A                     @@2:	MOVR R1,R2
F841   03BA 00FF                	ANDI #$FF,R2
F843   037A 003F                	CMPI #$3F,R2	; Sustain note?
F845   0204 000B                	BEQ @@3
F847   0094                     	MOVR R2,R4
F848   03BC 003F                	ANDI #$3F,R4
F84A   0244 011A                	MVO R4,_music_n3	; Note
F84C   0243 0119                	MVO R3,_music_s3	; Waveform
F84E   03BA 00C0                	ANDI #$C0,R2
F850   0242 0118                	MVO R2,_music_i3	; Instrument
                                	
F852   0041                     @@3:	SWAP R1
F853   0241 011C                	MVO R1,_music_n4
F855   0243 011B                	MVO R3,_music_s4
                                	
                                    IF intybasic_music_ecs
                                	MVI _music_p,R4
                                	MVI@ R4,R0
                                	MVI@ R4,R1
                                	MVO R4,_music_p

                                	MOVR R0,R2
                                	ANDI #$FF,R2
                                	CMPI #$3F,R2	; Sustain note?
                                	BEQ @@33
                                	MOVR R2,R4
                                	ANDI #$3F,R4
                                	MVO R4,_music_n5	; Note
                                	MVO R3,_music_s5	; Waveform
                                	ANDI #$C0,R2
                                	MVO R2,_music_i5	; Instrument
                                	
                                @@33:	SWAP R0
                                	ANDI #$FF,R0
                                	CMPI #$3F,R0	; Sustain note?
                                	BEQ @@34
                                	MOVR R0,R4
                                	ANDI #$3F,R4
                                	MVO R4,_music_n6	; Note
                                	MVO R3,_music_s6	; Waveform
                                	ANDI #$C0,R0
                                	MVO R0,_music_i6	; Instrument
                                	
                                @@34:	MOVR R1,R2
                                	ANDI #$FF,R2
                                	CMPI #$3F,R2	; Sustain note?
                                	BEQ @@35
                                	MOVR R2,R4
                                	ANDI #$3F,R4
                                	MVO R4,_music_n7	; Note
                                	MVO R3,_music_s7	; Waveform
                                	ANDI #$C0,R2
                                	MVO R2,_music_i7	; Instrument
                                	
                                @@35:	MOVR R1,R2
                                	SWAP R2
                                	MVO R2,_music_n8
                                	MVO R3,_music_s8
                                	
                                    ENDI

                                	;
                                	; Construct main voice
                                	;
F857   0283 0114                @@6:	MVI _music_n1,R3	; Read note
F859   009B                     	TSTR R3		; There is note?
F85A   0204 0018                	BEQ @@7		; No, jump
F85C   0281 0113                	MVI _music_s1,R1
F85E   0282 0112                	MVI _music_i1,R2
F860   0088                     	MOVR R1,R0
F861   0004 01F8 00E6           	CALL _note2freq
F864   0243 011D                	MVO R3,_music_freq10	; Note in voice A
F866   0043                     	SWAP R3
F867   0243 0120                	MVO R3,_music_freq11
F869   0241 0125                	MVO R1,_music_vol1
                                	; Increase time for instrument waveform
F86B   0008                     	INCR R0
F86C   0378 0018                	CMPI #$18,R0
F86E   020C 0002                	BNE @@20
F870   0338 0008                	SUBI #$08,R0
F872   0240 0113                @@20:	MVO R0,_music_s1

F874   0283 0117                @@7:	MVI _music_n2,R3	; Read note
F876   009B                     	TSTR R3		; There is note?
F877   0204 0018                	BEQ @@8		; No, jump
F879   0281 0116                	MVI _music_s2,R1
F87B   0282 0115                	MVI _music_i2,R2
F87D   0088                     	MOVR R1,R0
F87E   0004 01F8 00E6           	CALL _note2freq
F881   0243 011E                	MVO R3,_music_freq20	; Note in voice B
F883   0043                     	SWAP R3
F884   0243 0121                	MVO R3,_music_freq21
F886   0241 0126                	MVO R1,_music_vol2
                                	; Increase time for instrument waveform
F888   0008                     	INCR R0
F889   0378 0018                	CMPI #$18,R0
F88B   020C 0002                	BNE @@21
F88D   0338 0008                	SUBI #$08,R0
F88F   0240 0116                @@21:	MVO R0,_music_s2

F891   0283 011A                @@8:	MVI _music_n3,R3	; Read note
F893   009B                     	TSTR R3		; There is note?
F894   0204 0018                	BEQ @@9		; No, jump
F896   0281 0119                	MVI _music_s3,R1
F898   0282 0118                	MVI _music_i3,R2
F89A   0088                     	MOVR R1,R0
F89B   0004 01F8 00E6           	CALL _note2freq
F89E   0243 011F                	MVO R3,_music_freq30	; Note in voice C
F8A0   0043                     	SWAP R3
F8A1   0243 0122                	MVO R3,_music_freq31
F8A3   0241 0127                	MVO R1,_music_vol3
                                	; Increase time for instrument waveform
F8A5   0008                     	INCR R0
F8A6   0378 0018                	CMPI #$18,R0
F8A8   020C 0002                	BNE @@22
F8AA   0338 0008                	SUBI #$08,R0
F8AC   0240 0119                @@22:	MVO R0,_music_s3

F8AE   0280 011C                @@9:	MVI _music_n4,R0	; Read drum
F8B0   0010                     	DECR R0		; There is drum?
F8B1   020B 0032                	BMI @@4		; No, jump
F8B3   0281 011B                	MVI _music_s4,R1
                                	       		; 1 - Strong
F8B5   020C 000D                	BNE @@5
F8B7   0379 0003                	CMPI #3,R1
F8B9   020D 0027                	BGE @@12
F8BB   02B8 0005                @@10:	MVII #5,R0
F8BD   0240 0124                	MVO R0,_music_noise
F8BF   0004 01F8 02F5           	CALL _activate_drum
F8C2   0200 001E                	B @@12

F8C4   0010                     @@5:	DECR R0		;2 - Short
F8C5   020C 000C                	BNE @@11
F8C7   0089                     	TSTR R1
F8C8   020C 0018                	BNE @@12
F8CA   02B8 0008                	MVII #8,R0
F8CC   0240 0124                	MVO R0,_music_noise
F8CE   0004 01F8 02F5           	CALL _activate_drum
F8D1   0200 000F                	B @@12

0xF8D3                          @@11:	;DECR R0	; 3 - Rolling
                                	;BNE @@12
F8D3   0379 0002                	CMPI #2,R1
F8D5   0225 001B                	BLT @@10
F8D7   0280 0111                	MVI _music_t,R0
F8D9   0060                     	SLR R0,1
F8DA   0141                     	CMPR R0,R1
F8DB   0205 0005                	BLT @@12
F8DD   02F8 0002                	ADDI #2,R0
F8DF   0141                     	CMPR R0,R1
F8E0   0225 0026                	BLT @@10
                                	; Increase time for drum waveform
F8E2   0009                     @@12:   INCR R1
F8E3   0241 011B                	MVO R1,_music_s4

0xF8E5                          @@4:
                                    IF intybasic_music_ecs
                                	;
                                	; Construct main voice
                                	;
                                	MVI _music_n5,R3	; Read note
                                	TSTR R3		; There is note?
                                	BEQ @@23	; No, jump
                                	MVI _music_s5,R1
                                	MVI _music_i5,R2
                                	MOVR R1,R0
                                	CALL _note2freq
                                	MVO R3,_music2_freq10	; Note in voice A
                                	SWAP R3
                                	MVO R3,_music2_freq11
                                	MVO R1,_music2_vol1
                                	; Increase time for instrument waveform
                                	INCR R0
                                	CMPI #$18,R0
                                	BNE @@24
                                	SUBI #$08,R0
                                @@24:	MVO R0,_music_s5

                                @@23:	MVI _music_n6,R3	; Read note
                                	TSTR R3		; There is note?
                                	BEQ @@25		; No, jump
                                	MVI _music_s6,R1
                                	MVI _music_i6,R2
                                	MOVR R1,R0
                                	CALL _note2freq
                                	MVO R3,_music2_freq20	; Note in voice B
                                	SWAP R3
                                	MVO R3,_music2_freq21
                                	MVO R1,_music2_vol2
                                	; Increase time for instrument waveform
                                	INCR R0
                                	CMPI #$18,R0
                                	BNE @@26
                                	SUBI #$08,R0
                                @@26:	MVO R0,_music_s6

                                @@25:	MVI _music_n7,R3	; Read note
                                	TSTR R3		; There is note?
                                	BEQ @@27		; No, jump
                                	MVI _music_s7,R1
                                	MVI _music_i7,R2
                                	MOVR R1,R0
                                	CALL _note2freq
                                	MVO R3,_music2_freq30	; Note in voice C
                                	SWAP R3
                                	MVO R3,_music2_freq31
                                	MVO R1,_music2_vol3
                                	; Increase time for instrument waveform
                                	INCR R0
                                	CMPI #$18,R0
                                	BNE @@28
                                	SUBI #$08,R0
                                @@28:	MVO R0,_music_s7

                                @@27:	MVI _music_n8,R0	; Read drum
                                	DECR R0		; There is drum?
                                	BMI @@0		; No, jump
                                	MVI _music_s8,R1
                                	       		; 1 - Strong
                                	BNE @@29
                                	CMPI #3,R1
                                	BGE @@31
                                @@32:	MVII #5,R0
                                	MVO R0,_music2_noise
                                	CALL _activate_drum_ecs
                                	B @@31

                                @@29:	DECR R0		;2 - Short
                                	BNE @@30
                                	TSTR R1
                                	BNE @@31
                                	MVII #8,R0
                                	MVO R0,_music2_noise
                                	CALL _activate_drum_ecs
                                	B @@31

                                @@30:	;DECR R0	; 3 - Rolling
                                	;BNE @@31
                                	CMPI #2,R1
                                	BLT @@32
                                	MVI _music_t,R0
                                	SLR R0,1
                                	CMPR R0,R1
                                	BLT @@31
                                	ADDI #2,R0
                                	CMPR R0,R1
                                	BLT @@32
                                	; Increase time for drum waveform
                                @@31:	INCR R1
                                	MVO R1,_music_s8

                                    ENDI
F8E5   02B7                     @@0:	RETURN
                                	ENDP

                                	;
                                	; Translates note number to frequency
                                	; R3 = Note
                                	; R1 = Position in waveform for instrument
                                	; R2 = Instrument
                                	;
0xF8E6                          _note2freq:	PROC
F8E6   02C3 0340                	ADD _music_table,R3
F8E8   029B                     	MVI@ R3,R3
F8E9   0042                     	SWAP R2
F8EA   0204 0023                	BEQ _piano_instrument
F8EC   0052                     	RLC R2,1
F8ED   0209 003D                	BNC _clarinet_instrument
F8EF   0203 0076                	BPL _flute_instrument
                                ;	BMI _bass_instrument
                                	ENDP

                                	;
                                	; Generates a bass
                                	;
0xF8F1                          _bass_instrument:	PROC
F8F1   004F                     	SLL R3,2	; Lower 2 octaves
F8F2   02F9 F8F7                	ADDI #_bass_volume,R1
F8F4   0289                     	MVI@ R1,R1	; Bass effect
                                    IF intybasic_music_volume
F8F5   0200 00A8                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

0xF8F7                          _bass_volume:	PROC
F8F7   000C 000D 000E 000E      	DECLE 12,13,14,14,13,12,12,12
F8FB   000D 000C 000C 000C 
F8FF   000B 000B 000C 000C      	DECLE 11,11,12,12,11,11,12,12
F903   000B 000B 000C 000C 
F907   000B 000B 000C 000C      	DECLE 11,11,12,12,11,11,12,12
F90B   000B 000B 000C 000C 
                                	ENDP

                                	;
                                	; Generates a piano
                                	; R3 = Frequency
                                	; R1 = Waveform position
                                	;
                                	; Output:
                                	; R3 = Frequency.
                                	; R1 = Volume.
                                	;
0xF90F                          _piano_instrument:	PROC
F90F   02F9 F914                	ADDI #_piano_volume,R1
F911   0289                     	MVI@ R1,R1
                                    IF intybasic_music_volume
F912   0200 008B                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

0xF914                          _piano_volume:	PROC
F914   000E 000D 000D 000C      	DECLE 14,13,13,12,12,11,11,10
F918   000C 000B 000B 000A 
F91C   000A 0009 0009 0008      	DECLE 10,9,9,8,8,7,7,6
F920   0008 0007 0007 0006 
F924   0006 0006 0007 0007      	DECLE 6,6,7,7,6,6,5,5
F928   0006 0006 0005 0005 
                                	ENDP

                                	;
                                	; Generate a clarinet
                                	; R3 = Frequency
                                	; R1 = Waveform position
                                	;
                                	; Output:
                                	; R3 = Frequency
                                	; R1 = Volume
                                	;
0xF92C                          _clarinet_instrument:	PROC
F92C   02F9 F937                	ADDI #_clarinet_vibrato,R1
F92E   02CB                     	ADD@ R1,R3
F92F   0006                     	CLRC
F930   0073                     	RRC R3,1	; Duplicates frequency
F931   002B                     	ADCR R3
F932   02F9 0018                	ADDI #_clarinet_volume-_clarinet_vibrato,R1
F934   0289                     	MVI@ R1,R1
                                    IF intybasic_music_volume
F935   0200 0068                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

0xF937                          _clarinet_vibrato:	PROC
F937   0000 0000 0000 0000      	DECLE 0,0,0,0
F93B   FFFE FFFC FFFE 0000      	DECLE -2,-4,-2,0
F93F   0002 0004 0002 0000      	DECLE 2,4,2,0
F943   FFFE FFFC FFFE 0000      	DECLE -2,-4,-2,0
F947   0002 0004 0002 0000      	DECLE 2,4,2,0
F94B   FFFE FFFC FFFE 0000      	DECLE -2,-4,-2,0
                                	ENDP

0xF94F                          _clarinet_volume:	PROC
F94F   000D 000E 000E 000D      	DECLE 13,14,14,13,13,12,12,12
F953   000D 000C 000C 000C 
F957   000B 000B 000B 000B      	DECLE 11,11,11,11,12,12,12,12
F95B   000C 000C 000C 000C 
F95F   000B 000B 000B 000B      	DECLE 11,11,11,11,12,12,12,12
F963   000C 000C 000C 000C 
                                	ENDP

                                	;
                                	; Generates a flute
                                	; R3 = Frequency
                                	; R1 = Waveform position
                                	;
                                	; Output:
                                	; R3 = Frequency
                                	; R1 = Volume
                                	;
0xF967                          _flute_instrument:	PROC
F967   02F9 F96F                	ADDI #_flute_vibrato,R1
F969   02CB                     	ADD@ R1,R3
F96A   02F9 0018                	ADDI #_flute_volume-_flute_vibrato,R1
F96C   0289                     	MVI@ R1,R1
                                    IF intybasic_music_volume
F96D   0200 0030                	B _global_volume
                                    ELSE
                                	JR R5
                                    ENDI
                                	ENDP

0xF96F                          _flute_vibrato:	PROC
F96F   0000 0000 0000 0000      	DECLE 0,0,0,0
F973   0000 0001 0002 0001      	DECLE 0,1,2,1
F977   0000 0001 0002 0001      	DECLE 0,1,2,1
F97B   0000 0001 0002 0001      	DECLE 0,1,2,1
F97F   0000 0001 0002 0001      	DECLE 0,1,2,1
F983   0000 0001 0002 0001      	DECLE 0,1,2,1
                                	ENDP
                                		 
0xF987                          _flute_volume:	PROC
F987   000A 000C 000D 000D      	DECLE 10,12,13,13,12,12,12,12
F98B   000C 000C 000C 000C 
F98F   000B 000B 000B 000B      	DECLE 11,11,11,11,10,10,10,10
F993   000A 000A 000A 000A 
F997   000B 000B 000B 000B      	DECLE 11,11,11,11,10,10,10,10
F99B   000A 000A 000A 000A 
                                	ENDP

                                    IF intybasic_music_volume

0xF99F                          _global_volume:	PROC
F99F   0282 0128                	MVI _music_vol,R2
F9A1   03BA 000F                	ANDI #$0F,R2
F9A3   004E                     	SLL R2,2
F9A4   004E                     	SLL R2,2
F9A5   00CA                     	ADDR R1,R2
F9A6   02FA F9AA                	ADDI #@@table,R2
F9A8   0291                     	MVI@ R2,R1
F9A9   00AF                     	JR R5

0xF9AA                          @@table:
F9AA   0000 0000 0000 0000      	DECLE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
F9AE   0000 0000 0000 0000 0000 0000 0000 0000 
F9B6   0000 0000 0000 0000 
F9BA   0000 0000 0000 0000      	DECLE 0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1
F9BE   0000 0000 0000 0001 0001 0001 0001 0001 
F9C6   0001 0001 0001 0001 
F9CA   0000 0000 0000 0000      	DECLE 0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2
F9CE   0001 0001 0001 0001 0001 0001 0001 0002 
F9D6   0002 0002 0002 0002 
F9DA   0000 0000 0000 0001      	DECLE 0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3
F9DE   0001 0001 0001 0001 0002 0002 0002 0002 
F9E6   0002 0003 0003 0003 
F9EA   0000 0000 0001 0001      	DECLE 0,0,1,1,1,1,2,2,2,2,3,3,3,4,4,4
F9EE   0001 0001 0002 0002 0002 0002 0003 0003 
F9F6   0003 0004 0004 0004 
F9FA   0000 0000 0001 0001      	DECLE 0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5
F9FE   0001 0002 0002 0002 0003 0003 0003 0004 
FA06   0004 0004 0005 0005 
FA0A   0000 0000 0001 0001      	DECLE 0,0,1,1,2,2,2,3,3,4,4,4,5,5,6,6
FA0E   0002 0002 0002 0003 0003 0004 0004 0004 
FA16   0005 0005 0006 0006 
FA1A   0000 0001 0001 0001      	DECLE 0,1,1,1,2,2,3,3,4,4,5,5,6,6,7,7
FA1E   0002 0002 0003 0003 0004 0004 0005 0005 
FA26   0006 0006 0007 0007 
FA2A   0000 0001 0001 0002      	DECLE 0,1,1,2,2,3,3,4,4,5,5,6,6,7,8,8
FA2E   0002 0003 0003 0004 0004 0005 0005 0006 
FA36   0006 0007 0008 0008 
FA3A   0000 0001 0001 0002      	DECLE 0,1,1,2,2,3,4,4,5,5,6,7,7,8,8,9
FA3E   0002 0003 0004 0004 0005 0005 0006 0007 
FA46   0007 0008 0008 0009 
FA4A   0000 0001 0001 0002      	DECLE 0,1,1,2,3,3,4,5,5,6,7,7,8,9,9,10
FA4E   0003 0003 0004 0005 0005 0006 0007 0007 
FA56   0008 0009 0009 000A 
FA5A   0000 0001 0002 0002      	DECLE 0,1,2,2,3,4,4,5,6,7,7,8,9,10,10,11
FA5E   0003 0004 0004 0005 0006 0007 0007 0008 
FA66   0009 000A 000A 000B 
FA6A   0000 0001 0002 0002      	DECLE 0,1,2,2,3,4,5,6,6,7,8,9,10,10,11,12
FA6E   0003 0004 0005 0006 0006 0007 0008 0009 
FA76   000A 000A 000B 000C 
FA7A   0000 0001 0002 0003      	DECLE 0,1,2,3,4,4,5,6,7,8,9,10,10,11,12,13
FA7E   0004 0004 0005 0006 0007 0008 0009 000A 
FA86   000A 000B 000C 000D 
FA8A   0000 0001 0002 0003      	DECLE 0,1,2,3,4,5,6,7,8,8,9,10,11,12,13,14
FA8E   0004 0005 0006 0007 0008 0008 0009 000A 
FA96   000B 000C 000D 000E 
FA9A   0000 0001 0002 0003      	DECLE 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
FA9E   0004 0005 0006 0007 0008 0009 000A 000B 
FAA6   000C 000D 000E 000F 

                                	ENDP

                                    ENDI

                                    IF intybasic_music_ecs
                                	;
                                	; Emits sound for ECS
                                	;
                                _emit_sound_ecs:	PROC
                                	MOVR R5,R1
                                	MVI _music_mode,R2
                                	SARC R2,1
                                	BEQ @@6
                                	MVII #_music2_freq10,R4
                                	MVII #$00F0,R5
                                	B _emit_sound.0

                                @@6:	JR R1

                                	ENDP

                                    ENDI

                                	;
                                	; Emits sound
                                	;
0xFAAA                          _emit_sound:	PROC
FAAA   00A9                     	MOVR R5,R1
FAAB   0282 010E                	MVI _music_mode,R2
FAAD   007A                     	SARC R2,1
FAAE   0204 0044                	BEQ @@6
FAB0   02BC 011D                	MVII #_music_freq10,R4
FAB2   02BD 01F0                	MVII #$01F0,R5
0xFAB4                          @@0:
FAB4   02A0                     	MVI@ R4,R0
FAB5   0268                     	MVO@ R0,R5	; $01F0 - Channel A Period (Low 8 bits of 12)
FAB6   02A0                     	MVI@ R4,R0
FAB7   0268                     	MVO@ R0,R5	; $01F1 - Channel B Period (Low 8 bits of 12)
FAB8   0012                     	DECR R2
FAB9   0204 001E                	BEQ @@1
FABB   02A0                     	MVI@ R4,R0	
FABC   0268                     	MVO@ R0,R5	; $01F2 - Channel C Period (Low 8 bits of 12)
FABD   000D                     	INCR R5		; Avoid $01F3 - Enveloped Period (Low 8 bits of 16)
FABE   02A0                     	MVI@ R4,R0
FABF   0268                     	MVO@ R0,R5	; $01F4 - Channel A Period (High 4 bits of 12)
FAC0   02A0                     	MVI@ R4,R0
FAC1   0268                     	MVO@ R0,R5	; $01F5 - Channel B Period (High 4 bits of 12)
FAC2   02A0                     	MVI@ R4,R0
FAC3   0268                     	MVO@ R0,R5	; $01F6 - Channel C Period (High 4 bits of 12)
FAC4   000D                     	INCR R5		; Avoid $01F7 - Envelope Period (High 8 bits of 16)
FAC5   0201 0006                	BC @@2		; Jump if playing with drums
FAC7   02FC 0002                	ADDI #2,R4
FAC9   02FD 0003                	ADDI #3,R5
FACB   0200 0005                	B @@3

FACD   02A0                     @@2:	MVI@ R4,R0
FACE   0268                     	MVO@ R0,R5	; $01F8 - Enable Noise/Tone (bits 3-5 Noise : 0-2 Tone)
FACF   02A0                     	MVI@ R4,R0	
FAD0   0268                     	MVO@ R0,R5	; $01F9 - Noise Period (5 bits)
FAD1   000D                     	INCR R5		; Avoid $01FA - Envelope Type (4 bits)
FAD2   02A0                     @@3:	MVI@ R4,R0
FAD3   0268                     	MVO@ R0,R5	; $01FB - Channel A Volume
FAD4   02A0                     	MVI@ R4,R0
FAD5   0268                     	MVO@ R0,R5	; $01FC - Channel B Volume
FAD6   02A0                     	MVI@ R4,R0
FAD7   0268                     	MVO@ R0,R5	; $01FD - Channel C Volume
FAD8   008F                     	JR R1

FAD9   000C                     @@1:	INCR R4		
FADA   000D                     	INCR R5		; Avoid $01F2 and $01F3
FADB   000D                     	INCR R5		; Cannot use ADDI
FADC   02A0                     	MVI@ R4,R0
FADD   0268                     	MVO@ R0,R5	; $01F4 - Channel A Period (High 4 bits of 12)
FADE   02A0                     	MVI@ R4,R0
FADF   0268                     	MVO@ R0,R5	; $01F5 - Channel B Period (High 4 bits of 12)
FAE0   000C                     	INCR R4
FAE1   000D                     	INCR R5		; Avoid $01F6 and $01F7
FAE2   000D                     	INCR R5		; Cannot use ADDI
FAE3   0201 0006                	BC @@4		; Jump if playing with drums
FAE5   02FC 0002                	ADDI #2,R4
FAE7   02FD 0003                	ADDI #3,R5
FAE9   0200 0005                	B @@5

FAEB   02A0                     @@4:	MVI@ R4,R0
FAEC   0268                     	MVO@ R0,R5	; $01F8 - Enable Noise/Tone (bits 3-5 Noise : 0-2 Tone)
FAED   02A0                     	MVI@ R4,R0
FAEE   0268                     	MVO@ R0,R5	; $01F9 - Noise Period (5 bits)
FAEF   000D                     	INCR R5		; Avoid $01FA - Envelope Type (4 bits)
FAF0   02A0                     @@5:	MVI@ R4,R0
FAF1   0268                     	MVO@ R0,R5	; $01FB - Channel A Volume
FAF2   02A0                     	MVI@ R4,R0
FAF3   0268                     	MVO@ R0,R5	; $01FC - Channel B Volume
FAF4   008F                     @@6:	JR R1
                                	ENDP

                                	;
                                	; Activates drum
                                	;
0xFAF5                          _activate_drum:	PROC
                                    IF intybasic_music_volume
FAF5   0275                     	BEGIN
                                    ENDI
FAF6   0282 010E                	MVI _music_mode,R2
FAF8   007A                     	SARC R2,1	; PLAY NO DRUMS?
FAF9   0209 0048                	BNC @@0		; Yes, jump
FAFB   0280 0125                	MVI _music_vol1,R0
FAFD   0080                     	TSTR R0
FAFE   020C 0010                	BNE @@1
FB00   02B9 000B                	MVII #11,R1
                                    IF intybasic_music_volume
FB02   0004 01F8 019F           	CALL _global_volume
                                    ENDI
FB05   0241 0125                	MVO R1,_music_vol1
FB07   0280 0123                	MVI _music_mix,R0
FB09   03B8 00F6                	ANDI #$F6,R0
FB0B   03F8 0001                	XORI #$01,R0
FB0D   0240 0123                	MVO R0,_music_mix
                                    IF intybasic_music_volume
FB0F   02B7                     	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

FB10   0280 0126                @@1:    MVI _music_vol2,R0
FB12   0080                     	TSTR R0
FB13   020C 0010                	BNE @@2
FB15   02B9 000B                	MVII #11,R1
                                    IF intybasic_music_volume
FB17   0004 01F8 019F           	CALL _global_volume
                                    ENDI
FB1A   0241 0126                	MVO R1,_music_vol2
FB1C   0280 0123                	MVI _music_mix,R0
FB1E   03B8 00ED                	ANDI #$ED,R0
FB20   03F8 0002                	XORI #$02,R0
FB22   0240 0123                	MVO R0,_music_mix
                                    IF intybasic_music_volume
FB24   02B7                     	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

FB25   0012                     @@2:    DECR R2		; PLAY SIMPLE?
FB26   0204 0015                	BEQ @@3		; Yes, jump
FB28   0280 0127                	MVI _music_vol3,R0
FB2A   0080                     	TSTR R0
FB2B   020C 0010                	BNE @@3
FB2D   02B9 000B                	MVII #11,R1
                                    IF intybasic_music_volume
FB2F   0004 01F8 019F           	CALL _global_volume
                                    ENDI
FB32   0241 0127                	MVO R1,_music_vol3
FB34   0280 0123                	MVI _music_mix,R0
FB36   03B8 00DB                	ANDI #$DB,R0
FB38   03F8 0004                	XORI #$04,R0
FB3A   0240 0123                	MVO R0,_music_mix
                                    IF intybasic_music_volume
FB3C   02B7                     	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

FB3D   0280 0123                @@3:    MVI _music_mix,R0
FB3F   03B8 00EF                	ANDI #$EF,R0
FB41   0240 0123                	MVO R0,_music_mix
0xFB43                          @@0:	
                                    IF intybasic_music_volume
FB43   02B7                     	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                	ENDP

                                    IF intybasic_music_ecs
                                	;
                                	; Activates drum
                                	;
                                _activate_drum_ecs:	PROC
                                    IF intybasic_music_volume
                                	BEGIN
                                    ENDI
                                	MVI _music_mode,R2
                                	SARC R2,1	; PLAY NO DRUMS?
                                	BNC @@0		; Yes, jump
                                	MVI _music2_vol1,R0
                                	TSTR R0
                                	BNE @@1
                                	MVII #11,R1
                                    IF intybasic_music_volume
                                	CALL _global_volume
                                    ENDI
                                	MVO R1,_music2_vol1
                                	MVI _music2_mix,R0
                                	ANDI #$F6,R0
                                	XORI #$01,R0
                                	MVO R0,_music2_mix
                                    IF intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                @@1:    MVI _music2_vol2,R0
                                	TSTR R0
                                	BNE @@2
                                	MVII #11,R1
                                    IF intybasic_music_volume
                                	CALL _global_volume
                                    ENDI
                                	MVO R1,_music2_vol2
                                	MVI _music2_mix,R0
                                	ANDI #$ED,R0
                                	XORI #$02,R0
                                	MVO R0,_music2_mix
                                    IF intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                @@2:    DECR R2		; PLAY SIMPLE?
                                	BEQ @@3		; Yes, jump
                                	MVI _music2_vol3,R0
                                	TSTR R0
                                	BNE @@3
                                	MVII #11,R1
                                    IF intybasic_music_volume
                                	CALL _global_volume
                                    ENDI
                                	MVO R1,_music2_vol3
                                	MVI _music2_mix,R0
                                	ANDI #$DB,R0
                                	XORI #$04,R0
                                	MVO R0,_music2_mix
                                    IF intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                @@3:    MVI _music2_mix,R0
                                	ANDI #$EF,R0
                                	MVO R0,_music2_mix
                                @@0:	
                                    IF intybasic_music_volume
                                	RETURN
                                    ELSE
                                	JR R5
                                    ENDI

                                	ENDP

                                    ENDI

                                    ENDI
                                    
                                    IF intybasic_numbers

                                	;
                                	; Following code from as1600 libraries, prnum16.asm
                                	; Public domain by Joseph Zbiciak
                                	;

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- Joseph Zbiciak, 2008				     *;
                                ;* ======================================================================== *;

                                ;; ======================================================================== ;;
                                ;;  _PW10								   ;;
                                ;;      Lookup table holding the first 5 powers of 10 (1 thru 10000) as     ;;
                                ;;      16-bit numbers.						     ;;
                                ;; ======================================================================== ;;
0xFB44                          _PW10   PROC    ; 0 thru 10000
FB44   2710 03E8 0064 000A      	DECLE   10000, 1000, 100, 10, 1, 0
FB48   0001 0000 
                                	ENDP

                                ;; ======================================================================== ;;
                                ;;  PRNUM16.l     -- Print an unsigned 16-bit number left-justified.	;;
                                ;;  PRNUM16.b     -- Print an unsigned 16-bit number with leading blanks.   ;;
                                ;;  PRNUM16.z     -- Print an unsigned 16-bit number with leading zeros.    ;;
                                ;;									  ;;
                                ;;  AUTHOR								  ;;
                                ;;      Joseph Zbiciak  <im14u2c AT globalcrossing DOT net>		 ;;
                                ;;									  ;;
                                ;;  REVISION HISTORY							;;
                                ;;      30-Mar-2003 Initial complete revision			       ;;
                                ;;									  ;;
                                ;;  INPUTS for all variants						 ;;
                                ;;      R0  Number to print.						;;
                                ;;      R2  Width of field.  Ignored by PRNUM16.l.			  ;;
                                ;;      R3  Format word, added to digits to set the color.		  ;;
                                ;;	  Note:  Bit 15 MUST be cleared when building with PRNUM32.       ;;
                                ;;      R4  Pointer to location on screen to print number		   ;;
                                ;;									  ;;
                                ;;  OUTPUTS								 ;;
                                ;;      R0  Zeroed							  ;;
                                ;;      R1  Unmodified						      ;;
                                ;;      R2  Unmodified						      ;;
                                ;;      R3  Unmodified						      ;;
                                ;;      R4  Points to first character after field.			  ;;
                                ;;									  ;;
                                ;;  DESCRIPTION							     ;;
                                ;;      These routines print unsigned 16-bit numbers in a field up to 5     ;;
                                ;;      positions wide.  The number is printed either in left-justified     ;;
                                ;;      or right-justified format.  Right-justified numbers are padded      ;;
                                ;;      with leading blanks or leading zeros.  Left-justified numbers       ;;
                                ;;      are not padded on the right.					;;
                                ;;									  ;;
                                ;;      This code handles fields wider than 5 characters, padding with      ;;
                                ;;      zeros or blanks as necessary.				       ;;
                                ;;									  ;;
                                ;;	      Routine      Value(hex)     Field	Output	     ;;
                                ;;	      ----------   ----------   ----------   ----------	   ;;
                                ;;	      PRNUM16.l      $0045	 n/a	"69"		;;
                                ;;	      PRNUM16.b      $0045	  4	 "  69"	      ;;
                                ;;	      PRNUM16.b      $0045	  6	 "    69"	    ;;
                                ;;	      PRNUM16.z      $0045	  4	 "0069"	      ;;
                                ;;	      PRNUM16.z      $0045	  6	 "000069"	    ;;
                                ;;									  ;;
                                ;;  TECHNIQUES							      ;;
                                ;;      This routine uses repeated subtraction to divide the number	 ;;
                                ;;      to display by various powers of 10.  This is cheaper than a	 ;;
                                ;;      full divide, at least when the input number is large.  It's	 ;;
                                ;;      also easier to get right.  :-)				      ;;
                                ;;									  ;;
                                ;;      The printing routine first pads out fields wider than 5 spaces      ;;
                                ;;      with zeros or blanks as requested.  It then scans the power-of-10   ;;
                                ;;      table looking for the first power of 10 that is <= the number to    ;;
                                ;;      display.  While scanning for this power of 10, it outputs leading   ;;
                                ;;      blanks or zeros, if requested.  This eliminates "leading digit"     ;;
                                ;;      logic from the main digit loop.				     ;;
                                ;;									  ;;
                                ;;      Once in the main digit loop, we discover the value of each digit    ;;
                                ;;      by repeated subtraction.  We build up our digit value while	 ;;
                                ;;      subtracting the power-of-10 repeatedly.  We iterate until we go     ;;
                                ;;      a step too far, and then we add back on power-of-10 to restore      ;;
                                ;;      the remainder.						      ;;
                                ;;									  ;;
                                ;;  NOTES								   ;;
                                ;;      The left-justified variant ignores field width.		     ;;
                                ;;									  ;;
                                ;;      The code is fully reentrant.					;;
                                ;;									  ;;
                                ;;      This code does not handle numbers which are too large to be	 ;;
                                ;;      displayed in the provided field.  If the number is too large,       ;;
                                ;;      non-digit characters will be displayed in the initial digit	 ;;
                                ;;      position.  Also, the run time of this routine may get excessively   ;;
                                ;;      large, depending on the magnitude of the overflow.		  ;;
                                ;;									  ;;
                                ;;      When using with PRNUM32, one must either include PRNUM32 before     ;;
                                ;;      this function, or define the symbol _WITH_PRNUM32.  PRNUM32	 ;;
                                ;;      needs a tiny bit of support from PRNUM16 to handle numbers in       ;;
                                ;;      the range 65536...99999 correctly.				  ;;
                                ;;									  ;;
                                ;;  CODESIZE								;;
                                ;;      73 words, including power-of-10 table			       ;;
                                ;;      80 words, if compiled with PRNUM32.				 ;;
                                ;;									  ;;
                                ;;      To save code size, you can define the following symbols to omit     ;;
                                ;;      some variants:						      ;;
                                ;;									  ;;
                                ;;	  _NO_PRNUM16.l:   Disables PRNUM16.l.  Saves 10 words	    ;;
                                ;;	  _NO_PRNUM16.b:   Disables PRNUM16.b.  Saves 3 words.	    ;;
                                ;;									  ;;
                                ;;      Defining both symbols saves 17 words total, because it omits	;;
                                ;;      some code shared by both routines.				  ;;
                                ;;									  ;;
                                ;;  STACK USAGE							     ;;
                                ;;      This function uses up to 4 words of stack space.		    ;;
                                ;; ======================================================================== ;;

0xFB4A                          PRNUM16 PROC

                                    
                                	;; ---------------------------------------------------------------- ;;
                                	;;  PRNUM16.l:  Print unsigned, left-justified.		     ;;
                                	;; ---------------------------------------------------------------- ;;
FB4A   0275                     @@l:    PSHR    R5	      ; save return address
FB4B   02BD 0001                @@l1:   MVII    #$1,    R5      ; set R5 to 1 to counteract screen ptr update
                                				; in the 'find initial power of 10' loop
FB4D   0272                     	PSHR    R2
FB4E   02BA 0005                	MVII    #5,     R2      ; force effective field width to 5.
FB50   0200 0005                	B       @@z2

                                	;; ---------------------------------------------------------------- ;;
                                	;;  PRNUM16.b:  Print unsigned with leading blanks.		 ;;
                                	;; ---------------------------------------------------------------- ;;
FB52   0275                     @@b:    PSHR    R5
FB53   01ED                     @@b1:   CLRR    R5	      ; let the blank loop do its thing
FB54   000F                     	INCR    PC	      ; skip the PSHR R5

                                	;; ---------------------------------------------------------------- ;;
                                	;;  PRNUM16.z:  Print unsigned with leading zeros.		  ;;
                                	;; ---------------------------------------------------------------- ;;
FB55   0275                     @@z:    PSHR    R5
FB56   0272                     @@z1:   PSHR    R2
FB57   0271                     @@z2:   PSHR    R1

                                	;; ---------------------------------------------------------------- ;;
                                	;;  Find the initial power of 10 to use for display.		;;
                                	;;  Note:  For fields wider than 5, fill the extra spots above 5    ;;
                                	;;  with blanks or zeros as needed.				 ;;
                                	;; ---------------------------------------------------------------- ;;
FB58   02B9 FB49                	MVII    #_PW10+5,R1     ; Point to end of power-of-10 table
FB5A   0111                     	SUBR    R2,     R1      ; Subtract the field width to get right power
FB5B   0273                     	PSHR    R3	      ; save format word

FB5C   037D 0002                	CMPI    #2,     R5      ; are we leading with zeros?
FB5E   0209 0008                	BNC     @@lblnk	 ; no:  then do the loop w/ blanks

FB60   01ED                     	CLRR    R5	      ; force R5==0
FB61   02FB 0080                	ADDI    #$80,   R3      ; yes: do the loop with zeros
FB63   0200 0003                	B       @@lblnk
                                    

FB65   0263                     @@llp   MVO@    R3,     R4      ; print a blank/zero

FB66   012C                     	SUBR    R5,     R4      ; rewind pointer if needed.

FB67   0009                     	INCR    R1	      ; get next power of 10
FB68   0012                     @@lblnk DECR    R2	      ; decrement available digits
FB69   0204 0007                	BEQ     @@ldone
FB6B   037A 0005                	CMPI    #5,     R2      ; field too wide?
FB6D   022D 0009                	BGE     @@llp	   ; just force blanks/zeros 'till we're narrower.
FB6F   0348                     	CMP@    R1,     R0      ; Is this power of 10 too big?
FB70   0229 000C                	BNC     @@llp	   ; Yes:  Put a blank and go to next

FB72   02B3                     @@ldone PULR    R3	      ; restore format word

                                	;; ---------------------------------------------------------------- ;;
                                	;;  The digit loop prints at least one digit.  It discovers digits  ;;
                                	;;  by repeated subtraction.					;;
                                	;; ---------------------------------------------------------------- ;;
FB73   0080                     @@digit TSTR    R0	      ; If the number is zero, print zero and leave
FB74   020C 0006                	BNEQ    @@dig1	  ; no: print the number

FB76   009D                     	MOVR    R3,     R5      ;\    
FB77   02FD 0080                	ADDI    #$80,   R5      ; |-- print a 0 there.
FB79   0265                     	MVO@    R5,     R4      ;/    
FB7A   0200 000E                	B       @@done

0xFB7C                          @@dig1:
                                    
FB7C   009D                     @@nxdig MOVR    R3,     R5      ; save display format word
FB7D   02FD 0078                @@cont: ADDI    #$80-8, R5      ; start our digit as one just before '0'
0xFB7F                          @@spcl:
                                 
                                	;; ---------------------------------------------------------------- ;;
                                	;;  Divide by repeated subtraction.  This divide is constructed     ;;
                                	;;  to go "one step too far" and then back up.		      ;;
                                	;; ---------------------------------------------------------------- ;;
FB7F   02FD 0008                @@div:  ADDI    #8,     R5      ; increment our digit
FB81   0308                     	SUB@    R1,     R0      ; subtract power of 10
FB82   0221 0004                	BC      @@div	   ; loop until we go too far
FB84   02C8                     	ADD@    R1,     R0      ; add back the extra power of 10.

FB85   0265                     	MVO@    R5,     R4      ; display the digit.

FB86   0009                     	INCR    R1	      ; point to next power of 10
FB87   0012                     	DECR    R2	      ; any room left in field?
FB88   0223 000D                	BPL     @@nxdig	 ; keep going until R2 < 0.

FB8A   02B1                     @@done: PULR    R1	      ; restore R1
FB8B   02B2                     	PULR    R2	      ; restore R2
FB8C   02B7                     	PULR    PC	      ; return

                                	ENDP
                                	
                                    ENDI

                                    IF intybasic_voice
                                ;;==========================================================================;;
                                ;;  SP0256-AL2 Allophones						   ;;
                                ;;									  ;;
                                ;;  This file contains the allophone set that was obtained from an	  ;;
                                ;;  SP0256-AL2.  It is being provided for your convenience.		 ;;
                                ;;									  ;;
                                ;;  The directory "al2" contains a series of assembly files, each one       ;;
                                ;;  containing a single allophone.  This series of files may be useful in   ;;
                                ;;  situations where space is at a premium.				 ;;
                                ;;									  ;;
                                ;;  Consult the Archer SP0256-AL2 documentation (under doc/programming)     ;;
                                ;;  for more information about SP0256-AL2's allophone library.	      ;;
                                ;;									  ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;									  ;;
                                ;;  Copyright information:						  ;;
                                ;;									  ;;
                                ;;  The allophone data below was extracted from the SP0256-AL2 ROM image.   ;;
                                ;;  The SP0256-AL2 allophones are NOT in the public domain, nor are they    ;;
                                ;;  placed under the GNU General Public License.  This program is	   ;;
                                ;;  distributed in the hope that it will be useful, but WITHOUT ANY	 ;;
                                ;;  WARRANTY; without even the implied warranty of MERCHANTABILITY or       ;;
                                ;;  FITNESS FOR A PARTICULAR PURPOSE.				       ;;
                                ;;									  ;;
                                ;;  Microchip, Inc. retains the copyright to the data and algorithms	;;
                                ;;  contained in the SP0256-AL2.  This speech data is distributed with      ;;
                                ;;  explicit permission from Microchip, Inc.  All such redistributions      ;;
                                ;;  must retain this notice of copyright.				   ;;
                                ;;									  ;;
                                ;;  No copyright claims are made on this data by the author(s) of SDK1600.  ;;
                                ;;  Please see http://spatula-city.org/~im14u2c/sp0256-al2/ for details.    ;;
                                ;;									  ;;
                                ;;==========================================================================;;

                                ;; ------------------------------------------------------------------------ ;;
                                _AA:
                                    DECLE   _AA.end - _AA - 1
                                    DECLE   $0318, $014C, $016F, $02CE, $03AF, $015F, $01B1, $008E
                                    DECLE   $0088, $0392, $01EA, $024B, $03AA, $039B, $000F, $0000
                                _AA.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AE1:
                                    DECLE   _AE1.end - _AE1 - 1
                                    DECLE   $0118, $038E, $016E, $01FC, $0149, $0043, $026F, $036E
                                    DECLE   $01CC, $0005, $0000
                                _AE1.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AO:
                                    DECLE   _AO.end - _AO - 1
                                    DECLE   $0018, $010E, $016F, $0225, $00C6, $02C4, $030F, $0160
                                    DECLE   $024B, $0005, $0000
                                _AO.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AR:
                                    DECLE   _AR.end - _AR - 1
                                    DECLE   $0218, $010C, $016E, $001E, $000B, $0091, $032F, $00DE
                                    DECLE   $018B, $0095, $0003, $0238, $0027, $01E0, $03E8, $0090
                                    DECLE   $0003, $01C7, $0020, $03DE, $0100, $0190, $01CA, $02AB
                                    DECLE   $00B7, $004A, $0386, $0100, $0144, $02B6, $0024, $0320
                                    DECLE   $0011, $0041, $01DF, $0316, $014C, $016E, $001E, $00C4
                                    DECLE   $02B2, $031E, $0264, $02AA, $019D, $01BE, $000B, $00F0
                                    DECLE   $006A, $01CE, $00D6, $015B, $03B5, $03E4, $0000, $0380
                                    DECLE   $0007, $0312, $03E8, $030C, $016D, $02EE, $0085, $03C2
                                    DECLE   $03EC, $0283, $024A, $0005, $0000
                                _AR.end:  ; 69 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AW:
                                    DECLE   _AW.end - _AW - 1
                                    DECLE   $0010, $01CE, $016E, $02BE, $0375, $034F, $0220, $0290
                                    DECLE   $008A, $026D, $013F, $01D5, $0316, $029F, $02E2, $018A
                                    DECLE   $0170, $0035, $00BD, $0000, $0000
                                _AW.end:  ; 21 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AX:
                                    DECLE   _AX.end - _AX - 1
                                    DECLE   $0218, $02CD, $016F, $02F5, $0386, $00C2, $00CD, $0094
                                    DECLE   $010C, $0005, $0000
                                _AX.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _AY:
                                    DECLE   _AY.end - _AY - 1
                                    DECLE   $0110, $038C, $016E, $03B7, $03B3, $02AF, $0221, $009E
                                    DECLE   $01AA, $01B3, $00BF, $02E7, $025B, $0354, $00DA, $017F
                                    DECLE   $018A, $03F3, $00AF, $02D5, $0356, $027F, $017A, $01FB
                                    DECLE   $011E, $01B9, $03E5, $029F, $025A, $0076, $0148, $0124
                                    DECLE   $003D, $0000
                                _AY.end:  ; 34 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _BB1:
                                    DECLE   _BB1.end - _BB1 - 1
                                    DECLE   $0318, $004C, $016C, $00FB, $00C7, $0144, $002E, $030C
                                    DECLE   $010E, $018C, $01DC, $00AB, $00C9, $0268, $01F7, $021D
                                    DECLE   $01B3, $0098, $0000
                                _BB1.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _BB2:
                                    DECLE   _BB2.end - _BB2 - 1
                                    DECLE   $00F4, $0046, $0062, $0200, $0221, $03E4, $0087, $016F
                                    DECLE   $02A6, $02B7, $0212, $0326, $0368, $01BF, $0338, $0196
                                    DECLE   $0002
                                _BB2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _CH:
                                    DECLE   _CH.end - _CH - 1
                                    DECLE   $00F5, $0146, $0052, $0000, $032A, $0049, $0032, $02F2
                                    DECLE   $02A5, $0000, $026D, $0119, $0124, $00F6, $0000
                                _CH.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DD1:
                                    DECLE   _DD1.end - _DD1 - 1
                                    DECLE   $0318, $034C, $016E, $0397, $01B9, $0020, $02B1, $008E
                                    DECLE   $0349, $0291, $01D8, $0072, $0000
                                _DD1.end:  ; 13 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DD2:
                                    DECLE   _DD2.end - _DD2 - 1
                                    DECLE   $00F4, $00C6, $00F2, $0000, $0129, $00A6, $0246, $01F3
                                    DECLE   $02C6, $02B7, $028E, $0064, $0362, $01CF, $0379, $01D5
                                    DECLE   $0002
                                _DD2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DH1:
                                    DECLE   _DH1.end - _DH1 - 1
                                    DECLE   $0018, $034F, $016D, $030B, $0306, $0363, $017E, $006A
                                    DECLE   $0164, $019E, $01DA, $00CB, $00E8, $027A, $03E8, $01D7
                                    DECLE   $0173, $00A1, $0000
                                _DH1.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _DH2:
                                    DECLE   _DH2.end - _DH2 - 1
                                    DECLE   $0119, $034C, $016D, $030B, $0306, $0363, $017E, $006A
                                    DECLE   $0164, $019E, $01DA, $00CB, $00E8, $027A, $03E8, $01D7
                                    DECLE   $0173, $00A1, $0000
                                _DH2.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _EH:
                                    DECLE   _EH.end - _EH - 1
                                    DECLE   $0218, $02CD, $016F, $0105, $014B, $0224, $02CF, $0274
                                    DECLE   $014C, $0005, $0000
                                _EH.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _EL:
                                    DECLE   _EL.end - _EL - 1
                                    DECLE   $0118, $038D, $016E, $011C, $008B, $03D2, $030F, $0262
                                    DECLE   $006C, $019D, $01CC, $022B, $0170, $0078, $03FE, $0018
                                    DECLE   $0183, $03A3, $010D, $016E, $012E, $00C6, $00C3, $0300
                                    DECLE   $0060, $000D, $0005, $0000
                                _EL.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ER1:
                                    DECLE   _ER1.end - _ER1 - 1
                                    DECLE   $0118, $034C, $016E, $001C, $0089, $01C3, $034E, $03E6
                                    DECLE   $00AB, $0095, $0001, $0000, $03FC, $0381, $0000, $0188
                                    DECLE   $01DA, $00CB, $00E7, $0048, $03A6, $0244, $016C, $01A8
                                    DECLE   $03E4, $0000, $0002, $0001, $00FC, $01DA, $02E4, $0000
                                    DECLE   $0002, $0008, $0200, $0217, $0164, $0000, $000E, $0038
                                    DECLE   $0014, $01EA, $0264, $0000, $0002, $0048, $01EC, $02F1
                                    DECLE   $03CC, $016D, $021E, $0048, $00C2, $034E, $036A, $000D
                                    DECLE   $008D, $000B, $0200, $0047, $0022, $03A8, $0000, $0000
                                _ER1.end:  ; 64 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ER2:
                                    DECLE   _ER2.end - _ER2 - 1
                                    DECLE   $0218, $034C, $016E, $001C, $0089, $01C3, $034E, $03E6
                                    DECLE   $00AB, $0095, $0001, $0000, $03FC, $0381, $0000, $0190
                                    DECLE   $01D8, $00CB, $00E7, $0058, $01A6, $0244, $0164, $02A9
                                    DECLE   $0024, $0000, $0000, $0007, $0201, $02F8, $02E4, $0000
                                    DECLE   $0002, $0001, $00FC, $02DA, $0024, $0000, $0002, $0008
                                    DECLE   $0200, $0217, $0024, $0000, $000E, $0038, $0014, $03EA
                                    DECLE   $03A4, $0000, $0002, $0048, $01EC, $03F1, $038C, $016D
                                    DECLE   $021E, $0048, $00C2, $034E, $036A, $000D, $009D, $0003
                                    DECLE   $0200, $0047, $0022, $03A8, $0000, $0000
                                _ER2.end:  ; 70 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _EY:
                                    DECLE   _EY.end - _EY - 1
                                    DECLE   $0310, $038C, $016E, $02A7, $00BB, $0160, $0290, $0094
                                    DECLE   $01CA, $03A9, $00C1, $02D7, $015B, $01D4, $03CE, $02FF
                                    DECLE   $00EA, $03E7, $0041, $0277, $025B, $0355, $03C9, $0103
                                    DECLE   $02EA, $03E4, $003F, $0000
                                _EY.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _FF:
                                    DECLE   _FF.end - _FF - 1
                                    DECLE   $0119, $03C8, $0000, $00A7, $0094, $0138, $01C6, $0000
                                _FF.end:  ; 8 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _GG1:
                                    DECLE   _GG1.end - _GG1 - 1
                                    DECLE   $00F4, $00C6, $00C2, $0200, $0015, $03FE, $0283, $01FD
                                    DECLE   $01E6, $00B7, $030A, $0364, $0331, $017F, $033D, $0215
                                    DECLE   $0002
                                _GG1.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _GG2:
                                    DECLE   _GG2.end - _GG2 - 1
                                    DECLE   $00F4, $0106, $0072, $0300, $0021, $0308, $0039, $0173
                                    DECLE   $00C6, $00B7, $037E, $03A3, $0319, $0177, $0036, $0217
                                    DECLE   $0002
                                _GG2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _GG3:
                                    DECLE   _GG3.end - _GG3 - 1
                                    DECLE   $00F8, $0146, $00F2, $0100, $0132, $03A8, $0055, $01F5
                                    DECLE   $00A6, $02B7, $0291, $0326, $0368, $0167, $023A, $01C6
                                    DECLE   $0002
                                _GG3.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _HH1:
                                    DECLE   _HH1.end - _HH1 - 1
                                    DECLE   $0218, $01C9, $0000, $0095, $0127, $0060, $01D6, $0213
                                    DECLE   $0002, $01AE, $033E, $01A0, $03C4, $0122, $0001, $0218
                                    DECLE   $01E4, $03FD, $0019, $0000
                                _HH1.end:  ; 20 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _HH2:
                                    DECLE   _HH2.end - _HH2 - 1
                                    DECLE   $0218, $00CB, $0000, $0086, $000F, $0240, $0182, $031A
                                    DECLE   $02DB, $0008, $0293, $0067, $00BD, $01E0, $0092, $000C
                                    DECLE   $0000
                                _HH2.end:  ; 17 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _IH:
                                    DECLE   _IH.end - _IH - 1
                                    DECLE   $0118, $02CD, $016F, $0205, $0144, $02C3, $00FE, $031A
                                    DECLE   $000D, $0005, $0000
                                _IH.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _IY:
                                    DECLE   _IY.end - _IY - 1
                                    DECLE   $0318, $02CC, $016F, $0008, $030B, $01C3, $0330, $0178
                                    DECLE   $002B, $019D, $01F6, $018B, $01E1, $0010, $020D, $0358
                                    DECLE   $015F, $02A4, $02CC, $016F, $0109, $030B, $0193, $0320
                                    DECLE   $017A, $034C, $009C, $0017, $0001, $0200, $03C1, $0020
                                    DECLE   $00A7, $001D, $0001, $0104, $003D, $0040, $01A7, $01CA
                                    DECLE   $018B, $0160, $0078, $01F6, $0343, $01C7, $0090, $0000
                                _IY.end:  ; 48 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _JH:
                                    DECLE   _JH.end - _JH - 1
                                    DECLE   $0018, $0149, $0001, $00A4, $0321, $0180, $01F4, $039A
                                    DECLE   $02DC, $023C, $011A, $0047, $0200, $0001, $018E, $034E
                                    DECLE   $0394, $0356, $02C1, $010C, $03FD, $0129, $00B7, $01BA
                                    DECLE   $0000
                                _JH.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _KK1:
                                    DECLE   _KK1.end - _KK1 - 1
                                    DECLE   $00F4, $00C6, $00D2, $0000, $023A, $03E0, $02D1, $02E5
                                    DECLE   $0184, $0200, $0041, $0210, $0188, $00C5, $0000
                                _KK1.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _KK2:
                                    DECLE   _KK2.end - _KK2 - 1
                                    DECLE   $021D, $023C, $0211, $003C, $0180, $024D, $0008, $032B
                                    DECLE   $025B, $002D, $01DC, $01E3, $007A, $0000
                                _KK2.end:  ; 14 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _KK3:
                                    DECLE   _KK3.end - _KK3 - 1
                                    DECLE   $00F7, $0046, $01D2, $0300, $0131, $006C, $006E, $00F1
                                    DECLE   $00E4, $0000, $025A, $010D, $0110, $01F9, $014A, $0001
                                    DECLE   $00B5, $01A2, $00D8, $01CE, $0000
                                _KK3.end:  ; 21 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _LL:
                                    DECLE   _LL.end - _LL - 1
                                    DECLE   $0318, $038C, $016D, $029E, $0333, $0260, $0221, $0294
                                    DECLE   $01C4, $0299, $025A, $00E6, $014C, $012C, $0031, $0000
                                _LL.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _MM:
                                    DECLE   _MM.end - _MM - 1
                                    DECLE   $0210, $034D, $016D, $03F5, $00B0, $002E, $0220, $0290
                                    DECLE   $03CE, $02B6, $03AA, $00F3, $00CF, $015D, $016E, $0000
                                _MM.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _NG1:
                                    DECLE   _NG1.end - _NG1 - 1
                                    DECLE   $0118, $03CD, $016E, $00DC, $032F, $01BF, $01E0, $0116
                                    DECLE   $02AB, $029A, $0358, $01DB, $015B, $01A7, $02FD, $02B1
                                    DECLE   $03D2, $0356, $0000
                                _NG1.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _NN1:
                                    DECLE   _NN1.end - _NN1 - 1
                                    DECLE   $0318, $03CD, $016C, $0203, $0306, $03C3, $015F, $0270
                                    DECLE   $002A, $009D, $000D, $0248, $01B4, $0120, $01E1, $00C8
                                    DECLE   $0003, $0040, $0000, $0080, $015F, $0006, $0000
                                _NN1.end:  ; 23 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _NN2:
                                    DECLE   _NN2.end - _NN2 - 1
                                    DECLE   $0018, $034D, $016D, $0203, $0306, $03C3, $015F, $0270
                                    DECLE   $002A, $0095, $0003, $0248, $01B4, $0120, $01E1, $0090
                                    DECLE   $000B, $0040, $0000, $0080, $015F, $019E, $01F6, $028B
                                    DECLE   $00E0, $0266, $03F6, $01D8, $0143, $01A8, $0024, $00C0
                                    DECLE   $0080, $0000, $01E6, $0321, $0024, $0260, $000A, $0008
                                    DECLE   $03FE, $0000, $0000
                                _NN2.end:  ; 43 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _OR2:
                                    DECLE   _OR2.end - _OR2 - 1
                                    DECLE   $0218, $018C, $016D, $02A6, $03AB, $004F, $0301, $0390
                                    DECLE   $02EA, $0289, $0228, $0356, $01CF, $02D5, $0135, $007D
                                    DECLE   $02B5, $02AF, $024A, $02E2, $0153, $0167, $0333, $02A9
                                    DECLE   $02B3, $039A, $0351, $0147, $03CD, $0339, $02DA, $0000
                                _OR2.end:  ; 32 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _OW:
                                    DECLE   _OW.end - _OW - 1
                                    DECLE   $0310, $034C, $016E, $02AE, $03B1, $00CF, $0304, $0192
                                    DECLE   $018A, $022B, $0041, $0277, $015B, $0395, $03D1, $0082
                                    DECLE   $03CE, $00B6, $03BB, $02DA, $0000
                                _OW.end:  ; 21 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _OY:
                                    DECLE   _OY.end - _OY - 1
                                    DECLE   $0310, $014C, $016E, $02A6, $03AF, $00CF, $0304, $0192
                                    DECLE   $03CA, $01A8, $007F, $0155, $02B4, $027F, $00E2, $036A
                                    DECLE   $031F, $035D, $0116, $01D5, $02F4, $025F, $033A, $038A
                                    DECLE   $014F, $01B5, $03D5, $0297, $02DA, $03F2, $0167, $0124
                                    DECLE   $03FB, $0001
                                _OY.end:  ; 34 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA1:
                                    DECLE   _PA1.end - _PA1 - 1
                                    DECLE   $00F1, $0000
                                _PA1.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA2:
                                    DECLE   _PA2.end - _PA2 - 1
                                    DECLE   $00F4, $0000
                                _PA2.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA3:
                                    DECLE   _PA3.end - _PA3 - 1
                                    DECLE   $00F7, $0000
                                _PA3.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA4:
                                    DECLE   _PA4.end - _PA4 - 1
                                    DECLE   $00FF, $0000
                                _PA4.end:  ; 2 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PA5:
                                    DECLE   _PA5.end - _PA5 - 1
                                    DECLE   $031D, $003F, $0000
                                _PA5.end:  ; 3 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _PP:
                                    DECLE   _PP.end - _PP - 1
                                    DECLE   $00FD, $0106, $0052, $0000, $022A, $03A5, $0277, $035F
                                    DECLE   $0184, $0000, $0055, $0391, $00EB, $00CF, $0000
                                _PP.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _RR1:
                                    DECLE   _RR1.end - _RR1 - 1
                                    DECLE   $0118, $01CD, $016C, $029E, $0171, $038E, $01E0, $0190
                                    DECLE   $0245, $0299, $01AA, $02E2, $01C7, $02DE, $0125, $00B5
                                    DECLE   $02C5, $028F, $024E, $035E, $01CB, $02EC, $0005, $0000
                                _RR1.end:  ; 24 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _RR2:
                                    DECLE   _RR2.end - _RR2 - 1
                                    DECLE   $0218, $03CC, $016C, $030C, $02C8, $0393, $02CD, $025E
                                    DECLE   $008A, $019D, $01AC, $02CB, $00BE, $0046, $017E, $01C2
                                    DECLE   $0174, $00A1, $01E5, $00E0, $010E, $0007, $0313, $0017
                                    DECLE   $0000
                                _RR2.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _SH:
                                    DECLE   _SH.end - _SH - 1
                                    DECLE   $0218, $0109, $0000, $007A, $0187, $02E0, $03F6, $0311
                                    DECLE   $0002, $0126, $0242, $0161, $03E9, $0219, $016C, $0300
                                    DECLE   $0013, $0045, $0124, $0005, $024C, $005C, $0182, $03C2
                                    DECLE   $0001
                                _SH.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _SS:
                                    DECLE   _SS.end - _SS - 1
                                    DECLE   $0218, $01CA, $0001, $0128, $001C, $0149, $01C6, $0000
                                _SS.end:  ; 8 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _TH:
                                    DECLE   _TH.end - _TH - 1
                                    DECLE   $0019, $0349, $0000, $00C6, $0212, $01D8, $01CA, $0000
                                _TH.end:  ; 8 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _TT1:
                                    DECLE   _TT1.end - _TT1 - 1
                                    DECLE   $00F6, $0046, $0142, $0100, $0042, $0088, $027E, $02EF
                                    DECLE   $01A4, $0200, $0049, $0290, $00FC, $00E8, $0000
                                _TT1.end:  ; 15 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _TT2:
                                    DECLE   _TT2.end - _TT2 - 1
                                    DECLE   $00F5, $00C6, $01D2, $0100, $0335, $00E9, $0042, $027A
                                    DECLE   $02A4, $0000, $0062, $01D1, $014C, $03EA, $02EC, $01E0
                                    DECLE   $0007, $03A7, $0000
                                _TT2.end:  ; 19 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _UH:
                                    DECLE   _UH.end - _UH - 1
                                    DECLE   $0018, $034E, $016E, $01FF, $0349, $00D2, $003C, $030C
                                    DECLE   $008B, $0005, $0000
                                _UH.end:  ; 11 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _UW1:
                                    DECLE   _UW1.end - _UW1 - 1
                                    DECLE   $0318, $014C, $016F, $029E, $03BD, $03BD, $0271, $0212
                                    DECLE   $0325, $0291, $016A, $027B, $014A, $03B4, $0133, $0001
                                _UW1.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _UW2:
                                    DECLE   _UW2.end - _UW2 - 1
                                    DECLE   $0018, $034E, $016E, $02F6, $0107, $02C2, $006D, $0090
                                    DECLE   $03AC, $01A4, $01DC, $03AB, $0128, $0076, $03E6, $0119
                                    DECLE   $014F, $03A6, $03A5, $0020, $0090, $0001, $02EE, $00BB
                                    DECLE   $0000
                                _UW2.end:  ; 25 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _VV:
                                    DECLE   _VV.end - _VV - 1
                                    DECLE   $0218, $030D, $016C, $010B, $010B, $0095, $034F, $03E4
                                    DECLE   $0108, $01B5, $01BE, $028B, $0160, $00AA, $03E4, $0106
                                    DECLE   $00EB, $02DE, $014C, $016E, $00F6, $0107, $00D2, $00CD
                                    DECLE   $0296, $00E4, $0006, $0000
                                _VV.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _WH:
                                    DECLE   _WH.end - _WH - 1
                                    DECLE   $0218, $00C9, $0000, $0084, $038E, $0147, $03A4, $0195
                                    DECLE   $0000, $012E, $0118, $0150, $02D1, $0232, $01B7, $03F1
                                    DECLE   $0237, $01C8, $03B1, $0227, $01AE, $0254, $0329, $032D
                                    DECLE   $01BF, $0169, $019A, $0307, $0181, $028D, $0000
                                _WH.end:  ; 31 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _WW:
                                    DECLE   _WW.end - _WW - 1
                                    DECLE   $0118, $034D, $016C, $00FA, $02C7, $0072, $03CC, $0109
                                    DECLE   $000B, $01AD, $019E, $016B, $0130, $0278, $01F8, $0314
                                    DECLE   $017E, $029E, $014D, $016D, $0205, $0147, $02E2, $001A
                                    DECLE   $010A, $026E, $0004, $0000
                                _WW.end:  ; 28 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _XR2:
                                    DECLE   _XR2.end - _XR2 - 1
                                    DECLE   $0318, $034C, $016E, $02A6, $03BB, $002F, $0290, $008E
                                    DECLE   $004B, $0392, $01DA, $024B, $013A, $01DA, $012F, $00B5
                                    DECLE   $02E5, $0297, $02DC, $0372, $014B, $016D, $0377, $00E7
                                    DECLE   $0376, $038A, $01CE, $026B, $02FA, $01AA, $011E, $0071
                                    DECLE   $00D5, $0297, $02BC, $02EA, $01C7, $02D7, $0135, $0155
                                    DECLE   $01DD, $0007, $0000
                                _XR2.end:  ; 43 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _YR:
                                    DECLE   _YR.end - _YR - 1
                                    DECLE   $0318, $03CC, $016E, $0197, $00FD, $0130, $0270, $0094
                                    DECLE   $0328, $0291, $0168, $007E, $01CC, $02F5, $0125, $02B5
                                    DECLE   $00F4, $0298, $01DA, $03F6, $0153, $0126, $03B9, $00AB
                                    DECLE   $0293, $03DB, $0175, $01B9, $0001
                                _YR.end:  ; 29 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _YY1:
                                    DECLE   _YY1.end - _YY1 - 1
                                    DECLE   $0318, $01CC, $016E, $0015, $00CB, $0263, $0320, $0078
                                    DECLE   $01CE, $0094, $001F, $0040, $0320, $03BF, $0230, $00A7
                                    DECLE   $000F, $01FE, $03FC, $01E2, $00D0, $0089, $000F, $0248
                                    DECLE   $032B, $03FD, $01CF, $0001, $0000
                                _YY1.end:  ; 29 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _YY2:
                                    DECLE   _YY2.end - _YY2 - 1
                                    DECLE   $0318, $01CC, $016E, $0015, $00CB, $0263, $0320, $0078
                                    DECLE   $01CE, $0094, $001F, $0040, $0320, $03BF, $0230, $00A7
                                    DECLE   $000F, $01FE, $03FC, $01E2, $00D0, $0089, $000F, $0248
                                    DECLE   $032B, $03FD, $01CF, $0199, $01EE, $008B, $0161, $0232
                                    DECLE   $0004, $0318, $01A7, $0198, $0124, $03E0, $0001, $0001
                                    DECLE   $030F, $0027, $0000
                                _YY2.end:  ; 43 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ZH:
                                    DECLE   _ZH.end - _ZH - 1
                                    DECLE   $0310, $014D, $016E, $00C3, $03B9, $01BF, $0241, $0012
                                    DECLE   $0163, $00E1, $0000, $0080, $0084, $023F, $003F, $0000
                                _ZH.end:  ; 16 decles
                                ;; ------------------------------------------------------------------------ ;;
                                _ZZ:
                                    DECLE   _ZZ.end - _ZZ - 1
                                    DECLE   $0218, $010D, $016F, $0225, $0351, $00B5, $02A0, $02EE
                                    DECLE   $00E9, $014D, $002C, $0360, $0008, $00EC, $004C, $0342
                                    DECLE   $03D4, $0156, $0052, $0131, $0008, $03B0, $01BE, $0172
                                    DECLE   $0000
                                _ZZ.end:  ; 25 decles

                                ;;==========================================================================;;
                                ;;									  ;;
                                ;;  Copyright information:						  ;;
                                ;;									  ;;
                                ;;  The above allophone data was extracted from the SP0256-AL2 ROM image.   ;;
                                ;;  The SP0256-AL2 allophones are NOT in the public domain, nor are they    ;;
                                ;;  placed under the GNU General Public License.  This program is	   ;;
                                ;;  distributed in the hope that it will be useful, but WITHOUT ANY	 ;;
                                ;;  WARRANTY; without even the implied warranty of MERCHANTABILITY or       ;;
                                ;;  FITNESS FOR A PARTICULAR PURPOSE.				       ;;
                                ;;									  ;;
                                ;;  Microchip, Inc. retains the copyright to the data and algorithms	;;
                                ;;  contained in the SP0256-AL2.  This speech data is distributed with      ;;
                                ;;  explicit permission from Microchip, Inc.  All such redistributions      ;;
                                ;;  must retain this notice of copyright.				   ;;
                                ;;									  ;;
                                ;;  No copyright claims are made on this data by the author(s) of SDK1600.  ;;
                                ;;  Please see http://spatula-city.org/~im14u2c/sp0256-al2/ for details.    ;;
                                ;;									  ;;
                                ;;==========================================================================;;

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- Joseph Zbiciak, 2008				     *;
                                ;* ======================================================================== *;

                                ;; ======================================================================== ;;
                                ;;  INTELLIVOICE DRIVER ROUTINES					    ;;
                                ;;  Written in 2002 by Joe Zbiciak <intvnut AT gmail.com>		   ;;
                                ;;  http://spatula-city.org/~im14u2c/intv/				  ;;
                                ;; ======================================================================== ;;

                                ;; ======================================================================== ;;
                                ;;  GLOBAL VARIABLES USED BY THESE ROUTINES				 ;;
                                ;;									  ;;
                                ;;  Note that some of these routines may use one or more global variables.  ;;
                                ;;  If you use these routines, you will need to allocate the appropriate    ;;
                                ;;  space in either 16-bit or 8-bit memory as appropriate.  Each global     ;;
                                ;;  variable is listed with the routines which use it and the required      ;;
                                ;;  memory width.							   ;;
                                ;;									  ;;
                                ;;  Example declarations for these routines are shown below, commented out. ;;
                                ;;  You should uncomment these and add them to your program to make use of  ;;
                                ;;  the routine that needs them.  Make sure to assign these variables to    ;;
                                ;;  locations that aren't used for anything else.			   ;;
                                ;; ======================================================================== ;;

                                			; Used by       Req'd Width     Description
                                			;-----------------------------------------------------
                                ;IV.QH      EQU $110    ; IV_xxx	8-bit	   Voice queue head
                                ;IV.QT      EQU $111    ; IV_xxx	8-bit	   Voice queue tail
                                ;IV.Q       EQU $112    ; IV_xxx	8-bit	   Voice queue  (8 bytes)
                                ;IV.FLEN    EQU $11A    ; IV_xxx	8-bit	   Length of FIFO data
                                ;IV.FPTR    EQU $320    ; IV_xxx	16-bit	  Current FIFO ptr.
                                ;IV.PPTR    EQU $321    ; IV_xxx	16-bit	  Current Phrase ptr.

                                ;; ======================================================================== ;;
                                ;;  MEMORY USAGE							    ;;
                                ;;									  ;;
                                ;;  These routines implement a queue of "pending phrases" that will be      ;;
                                ;;  played by the Intellivoice.  The user calls IV_PLAY to enqueue a	;;
                                ;;  phrase number.  Phrase numbers indicate either a RESROM sample or       ;;
                                ;;  a compiled in phrase to be spoken.				      ;;
                                ;;									  ;;
                                ;;  The user must compose an "IV_PHRASE_TBL", which is composed of	  ;;
                                ;;  pointers to phrases to be spoken.  Phrases are strings of pointers      ;;
                                ;;  and RESROM triggers, terminated by a NUL.			       ;;
                                ;;									  ;;
                                ;;  Phrase numbers 1 through 42 are RESROM samples.  Phrase numbers	 ;;
                                ;;  43 through 255 index into the IV_PHRASE_TBL.			    ;;
                                ;;									  ;;
                                ;;  SPECIAL NOTES							   ;;
                                ;;									  ;;
                                ;;  Bit 7 of IV.QH and IV.QT is used to denote whether the Intellivoice     ;;
                                ;;  is present.  If Intellivoice is present, this bit is clear.	     ;;
                                ;;									  ;;
                                ;;  Bit 6 of IV.QT is used to denote that we still need to do an ALD $00    ;;
                                ;;  for FIFO'd voice data.						  ;;
                                ;; ======================================================================== ;;
                                	    

                                ;; ======================================================================== ;;
                                ;;  NAME								    ;;
                                ;;      IV_INIT     Initialize the Intellivoice			     ;;
                                ;;									  ;;
                                ;;  AUTHOR								  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>			       ;;
                                ;;									  ;;
                                ;;  REVISION HISTORY							;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;									  ;;
                                ;;  INPUTS for IV_INIT						      ;;
                                ;;      R5      Return address					      ;;
                                ;;									  ;;
                                ;;  OUTPUTS								 ;;
                                ;;      R0      0 if Intellivoice found, -1 if not.			 ;;
                                ;;									  ;;
                                ;;  DESCRIPTION							     ;;
                                ;;      Resets Intellivoice, determines if it is actually there, and	;;
                                ;;      then initializes the IV structure.				  ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;		   Copyright (c) 2002, Joseph Zbiciak		     ;;
                                ;; ======================================================================== ;;

                                IV_INIT     PROC
                                	    MVII    #$0400, R0	  ;
                                	    MVO     R0,     $0081       ; Reset the Intellivoice

                                	    MVI     $0081,  R0	  ; \
                                	    RLC     R0,     2	   ;  |-- See if we detect Intellivoice
                                	    BOV     @@no_ivoice	 ; /    once we've reset it.

                                	    CLRR    R0		  ; 
                                	    MVO     R0,     IV.FPTR     ; No data for FIFO
                                	    MVO     R0,     IV.PPTR     ; No phrase being spoken
                                	    MVO     R0,     IV.QH       ; Clear our queue
                                	    MVO     R0,     IV.QT       ; Clear our queue
                                	    JR      R5		  ; Done!

                                @@no_ivoice:
                                	    CLRR    R0
                                	    MVO     R0,     IV.FPTR     ; No data for FIFO
                                	    MVO     R0,     IV.PPTR     ; No phrase being spoken
                                	    DECR    R0
                                	    MVO     R0,     IV.QH       ; Set queue to -1 ("No Intellivoice")
                                	    MVO     R0,     IV.QT       ; Set queue to -1 ("No Intellivoice")
                                ;	    JR      R5		 ; Done!
                                	    B       _wait	       ; Special for IntyBASIC!
                                	    ENDP

                                ;; ======================================================================== ;;
                                ;;  NAME								    ;;
                                ;;      IV_ISR      Interrupt service routine to feed Intellivoice	  ;;
                                ;;									  ;;
                                ;;  AUTHOR								  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>			       ;;
                                ;;									  ;;
                                ;;  REVISION HISTORY							;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;									  ;;
                                ;;  INPUTS for IV_ISR						       ;;
                                ;;      R5      Return address					      ;;
                                ;;									  ;;
                                ;;  OUTPUTS								 ;;
                                ;;      R0, R1, R4 trashed.						 ;;
                                ;;									  ;;
                                ;;  NOTES								   ;;
                                ;;      Call this from your main interrupt service routine.		 ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;		   Copyright (c) 2002, Joseph Zbiciak		     ;;
                                ;; ======================================================================== ;;
                                IV_ISR      PROC
                                	    ;; ------------------------------------------------------------ ;;
                                	    ;;  Check for Intellivoice.  Leave if none present.	     ;;
                                	    ;; ------------------------------------------------------------ ;;
                                	    MVI     IV.QT,  R1	  ; Get queue tail
                                	    SWAP    R1,     2
                                	    BPL     @@ok		; Bit 7 set? If yes: No Intellivoice
                                @@ald_busy:
                                @@leave     JR      R5		  ; Exit if no Intellivoice.

                                     
                                	    ;; ------------------------------------------------------------ ;;
                                	    ;;  Check to see if we pump samples into the FIFO.
                                	    ;; ------------------------------------------------------------ ;;
                                @@ok:       MVI     IV.FPTR, R4	 ; Get FIFO data pointer
                                	    TSTR    R4		  ; is it zero?
                                	    BEQ     @@no_fifodata       ; Yes:  No data for FIFO.
                                @@fifo_fill:
                                	    MVI     $0081,  R0	  ; Read speech FIFO ready bit
                                	    SLLC    R0,     1	   ; 
                                	    BC      @@fifo_busy     

                                	    MVI@    R4,     R0	  ; Get next word
                                	    MVO     R0,     $0081       ; write it to the FIFO

                                	    MVI     IV.FLEN, R0	 ;\
                                	    DECR    R0		  ; |-- Decrement our FIFO'd data length
                                	    MVO     R0,     IV.FLEN     ;/
                                	    BEQ     @@last_fifo	 ; If zero, we're done w/ FIFO
                                	    MVO     R4,     IV.FPTR     ; Otherwise, save new pointer
                                	    B       @@fifo_fill	 ; ...and keep trying to load FIFO

                                @@last_fifo MVO     R0,     IV.FPTR     ; done with FIFO loading.
                                					; fall into ALD processing.


                                	    ;; ------------------------------------------------------------ ;;
                                	    ;;  Try to do an Address Load.  We do this in two settings:     ;;
                                	    ;;   -- We have no FIFO data to load.			   ;;
                                	    ;;   -- We've loaded as much FIFO data as we can, but we	;;
                                	    ;;      might have an address load command to send for it.      ;;
                                	    ;; ------------------------------------------------------------ ;;
                                @@fifo_busy:
                                @@no_fifodata:
                                	    MVI     $0080,  R0	  ; Read LRQ bit from ALD register
                                	    SLLC    R0,     1
                                	    BNC     @@ald_busy	  ; LRQ is low, meaning we can't ALD.
                                					; So, leave.

                                	    ;; ------------------------------------------------------------ ;;
                                	    ;;  We can do an address load (ALD) on the SP0256.  Give FIFO   ;;
                                	    ;;  driven ALDs priority, since we already started the FIFO     ;;
                                	    ;;  load.  The "need ALD" bit is stored in bit 6 of IV.QT.      ;;
                                	    ;; ------------------------------------------------------------ ;;
                                	    ANDI    #$40,   R1	  ; Is "Need FIFO ALD" bit set?
                                	    BEQ     @@no_fifo_ald
                                	    XOR     IV.QT,  R1	  ;\__ Clear the "Need FIFO ALD" bit.
                                	    MVO     R1,     IV.QT       ;/
                                	    CLRR    R1
                                	    MVO     R1,     $80	 ; Load a 0 into ALD (trigger FIFO rd.)
                                	    JR      R5		  ; done!

                                	    ;; ------------------------------------------------------------ ;;
                                	    ;;  We don't need to ALD on behalf of the FIFO.  So, we grab    ;;
                                	    ;;  the next thing off our phrase list.			 ;;
                                	    ;; ------------------------------------------------------------ ;;
                                @@no_fifo_ald:
                                	    MVI     IV.PPTR, R4	 ; Get phrase pointer.
                                	    TSTR    R4		  ; Is it zero?
                                	    BEQ     @@next_phrase       ; Yes:  Get next phrase from queue.

                                	    MVI@    R4,     R0
                                	    TSTR    R0		  ; Is it end of phrase?
                                	    BNEQ    @@process_phrase    ; !=0:  Go do it.

                                	    MVO     R0,     IV.PPTR     ; 
                                @@next_phrase:
                                	    MVI     IV.QT,  R1	  ; reload queue tail (was trashed above)
                                	    MOVR    R1,     R0	  ; copy QT to R0 so we can increment it
                                	    ANDI    #$7,    R1	  ; Mask away flags in queue head
                                	    CMP     IV.QH,  R1	  ; Is it same as queue tail?
                                	    BEQ     @@leave	     ; Yes:  No more speech for now.

                                	    INCR    R0
                                	    ANDI    #$F7,   R0	  ; mask away the possible 'carry'
                                	    MVO     R0,     IV.QT       ; save updated queue tail

                                	    ADDI    #IV.Q,  R1	  ; Index into queue
                                	    MVI@    R1,     R4	  ; get next value from queue
                                	    CMPI    #43,    R4	  ; Is it a RESROM or Phrase?
                                	    BNC     @@play_resrom_r4
                                @@new_phrase:
                                ;	    ADDI    #IV_PHRASE_TBL - 43, R4 ; Index into phrase table
                                ;	    MVI@    R4,     R4	  ; Read from phrase table
                                	    MVO     R4,     IV.PPTR
                                	    JR      R5		  ; we'll get to this phrase next time.

                                @@play_resrom_r4:
                                	    MVO     R4,     $0080       ; Just ALD it
                                	    JR      R5		  ; and leave.

                                	    ;; ------------------------------------------------------------ ;;
                                	    ;;  We're in the middle of a phrase, so continue interpreting.  ;;
                                	    ;; ------------------------------------------------------------ ;;
                                @@process_phrase:
                                	    
                                	    MVO     R4,     IV.PPTR     ; save new phrase pointer
                                	    CMPI    #43,    R0	  ; Is it a RESROM cue?
                                	    BC      @@play_fifo	 ; Just ALD it and leave.
                                @@play_resrom_r0
                                	    MVO     R0,     $0080       ; Just ALD it
                                	    JR      R5		  ; and leave.
                                @@play_fifo:
                                	    MVI     IV.FPTR,R1	  ; Make sure not to stomp existing FIFO
                                	    TSTR    R1		  ; data.
                                	    BEQ     @@new_fifo_ok
                                	    DECR    R4		  ; Oops, FIFO data still playing,
                                	    MVO     R4,     IV.PPTR     ; so rewind.
                                	    JR      R5		  ; and leave.

                                @@new_fifo_ok:
                                	    MOVR    R0,     R4	  ;
                                	    MVI@    R4,     R0	  ; Get chunk length
                                	    MVO     R0,     IV.FLEN     ; Init FIFO chunk length
                                	    MVO     R4,     IV.FPTR     ; Init FIFO pointer
                                	    MVI     IV.QT,  R0	  ;\
                                	    XORI    #$40,   R0	  ; |- Set "Need ALD" bit in QT
                                	    MVO     R0,     IV.QT       ;/

                                  IF 1      ; debug code		;\
                                	    ANDI    #$40,   R0	  ; |   Debug code:  We should only
                                	    BNEQ    @@qtok	      ; |-- be here if "Need FIFO ALD" 
                                	    HLT     ;BUG!!	      ; |   was already clear.	 
                                @@qtok				  ;/    
                                  ENDI
                                	    JR      R5		  ; leave.

                                	    ENDP


                                ;; ======================================================================== ;;
                                ;;  NAME								    ;;
                                ;;      IV_PLAY     Play a voice sample sequence.			   ;;
                                ;;									  ;;
                                ;;  AUTHOR								  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>			       ;;
                                ;;									  ;;
                                ;;  REVISION HISTORY							;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;									  ;;
                                ;;  INPUTS for IV_PLAY						      ;;
                                ;;      R5      Invocation record, followed by return address.	      ;;
                                ;;		  1 DECLE    Phrase number to play.		       ;;
                                ;;									  ;;
                                ;;  INPUTS for IV_PLAY.1						    ;;
                                ;;      R0      Address of phrase to play.				  ;;
                                ;;      R5      Return address					      ;;
                                ;;									  ;;
                                ;;  OUTPUTS								 ;;
                                ;;      R0, R1  trashed						     ;;
                                ;;      Z==0    if item not successfully queued.			    ;;
                                ;;      Z==1    if successfully queued.				     ;;
                                ;;									  ;;
                                ;;  NOTES								   ;;
                                ;;      This code will drop phrases if the queue is full.		   ;;
                                ;;      Phrase numbers 1..42 are RESROM samples.  43..255 will index	;;
                                ;;      into the user-supplied IV_PHRASE_TBL.  43 will refer to the	 ;;
                                ;;      first entry, 44 to the second, and so on.  Phrase 0 is undefined.   ;;
                                ;;									  ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;		   Copyright (c) 2002, Joseph Zbiciak		     ;;
                                ;; ======================================================================== ;;
                                IV_PLAY     PROC
                                	    MVI@    R5,     R0

                                @@1:	; alternate entry point
                                	    MVI     IV.QT,  R1	  ; Get queue tail
                                	    SWAP    R1,     2	   ;\___ Leave if "no Intellivoice"
                                	    BMI     @@leave	     ;/    bit it set.
                                @@ok:       
                                	    DECR    R1		  ;\
                                	    ANDI    #$7,    R1	  ; |-- See if we still have room
                                	    CMP     IV.QH,  R1	  ;/
                                	    BEQ     @@leave	     ; Leave if we're full

                                @@2:	MVI     IV.QH,  R1	  ; Get our queue head pointer
                                	    PSHR    R1		  ;\
                                	    INCR    R1		  ; |
                                	    ANDI    #$F7,   R1	  ; |-- Increment it, removing
                                	    MVO     R1,     IV.QH       ; |   carry but preserving flags.
                                	    PULR    R1		  ;/

                                	    ADDI    #IV.Q,  R1	  ;\__ Store phrase to queue
                                	    MVO@    R0,     R1	  ;/

                                @@leave:    JR      R5		  ; Leave.
                                	    ENDP

                                ;; ======================================================================== ;;
                                ;;  NAME								    ;;
                                ;;      IV_PLAYW    Play a voice sample sequence.  Wait for queue room.     ;;
                                ;;									  ;;
                                ;;  AUTHOR								  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>			       ;;
                                ;;									  ;;
                                ;;  REVISION HISTORY							;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;									  ;;
                                ;;  INPUTS for IV_PLAY						      ;;
                                ;;      R5      Invocation record, followed by return address.	      ;;
                                ;;		  1 DECLE    Phrase number to play.		       ;;
                                ;;									  ;;
                                ;;  INPUTS for IV_PLAY.1						    ;;
                                ;;      R0      Address of phrase to play.				  ;;
                                ;;      R5      Return address					      ;;
                                ;;									  ;;
                                ;;  OUTPUTS								 ;;
                                ;;      R0, R1  trashed						     ;;
                                ;;									  ;;
                                ;;  NOTES								   ;;
                                ;;      This code will wait for a queue slot to open if queue is full.      ;;
                                ;;      Phrase numbers 1..42 are RESROM samples.  43..255 will index	;;
                                ;;      into the user-supplied IV_PHRASE_TBL.  43 will refer to the	 ;;
                                ;;      first entry, 44 to the second, and so on.  Phrase 0 is undefined.   ;;
                                ;;									  ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;		   Copyright (c) 2002, Joseph Zbiciak		     ;;
                                ;; ======================================================================== ;;
                                IV_PLAYW    PROC
                                	    MVI@    R5,     R0

                                @@1:	; alternate entry point
                                	    MVI     IV.QT,  R1	  ; Get queue tail
                                	    SWAP    R1,     2	   ;\___ Leave if "no Intellivoice"
                                	    BMI     IV_PLAY.leave       ;/    bit it set.
                                @@ok:       
                                	    DECR    R1		  ;\
                                	    ANDI    #$7,    R1	  ; |-- See if we still have room
                                	    CMP     IV.QH,  R1	  ;/
                                	    BEQ     @@1		 ; wait for room
                                	    B       IV_PLAY.2

                                	    ENDP

                                ;; ======================================================================== ;;
                                ;;  NAME								    ;;
                                ;;      IV_HUSH     Flush the speech queue, and hush the Intellivoice.      ;;
                                ;;									  ;;
                                ;;  AUTHOR								  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>			       ;;
                                ;;									  ;;
                                ;;  REVISION HISTORY							;;
                                ;;      02-Feb-2018 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;									  ;;
                                ;;  INPUTS for IV_HUSH						      ;;
                                ;;      None.							       ;;
                                ;;									  ;;
                                ;;  OUTPUTS								 ;;
                                ;;      R0 trashed.							 ;;
                                ;;									  ;;
                                ;;  NOTES								   ;;
                                ;;      Returns via IV_WAIT.						;;
                                ;;									  ;;
                                ;; ======================================================================== ;;
                                IV_HUSH:    PROC
                                	    MVI     IV.QH,  R0
                                	    SWAP    R0,     2
                                	    BMI     IV_WAIT.leave

                                	    DIS
                                	    ;; We can't stop a phrase segment that's being FIFOed down.
                                	    ;; We need to remember if we've committed to pushing ALD.
                                	    ;; We _can_ stop new phrase segments from going down, and _can_
                                	    ;; stop new phrases from being started.

                                	    ;; Set head pointer to indicate we've inserted one item.
                                	    MVI     IV.QH,  R0  ; Re-read, as an interrupt may have occurred
                                	    ANDI    #$F0,   R0
                                	    INCR    R0
                                	    MVO     R0,     IV.QH

                                	    ;; Reset tail pointer, keeping "need ALD" bit and other flags.
                                	    MVI     IV.QT,  R0
                                	    ANDI    #$F0,   R0
                                	    MVO     R0,     IV.QT

                                	    ;; Reset the phrase pointer, to stop a long phrase.
                                	    CLRR    R0
                                	    MVO     R0,     IV.PPTR

                                	    ;; Queue a PA1 in the queue.  Since we're can't guarantee the user
                                	    ;; has included resrom.asm, let's just use the raw number (5).
                                	    MVII    #5,     R0
                                	    MVO     R0,     IV.Q

                                	    ;; Re-enable interrupts and wait for Intellivoice to shut up.
                                	    ;;
                                	    ;; We can't just jump to IV_WAIT.q_loop, as we need to reload
                                	    ;; IV.QH into R0, and I'm really committed to only using R0.
                                ;	   JE      IV_WAIT
                                	    EIS
                                	    ; fallthrough into IV_WAIT
                                	    ENDP

                                ;; ======================================================================== ;;
                                ;;  NAME								    ;;
                                ;;      IV_WAIT     Wait for voice queue to empty.			  ;;
                                ;;									  ;;
                                ;;  AUTHOR								  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>			       ;;
                                ;;									  ;;
                                ;;  REVISION HISTORY							;;
                                ;;      15-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;									  ;;
                                ;;  INPUTS for IV_WAIT						      ;;
                                ;;      R5      Return address					      ;;
                                ;;									  ;;
                                ;;  OUTPUTS								 ;;
                                ;;      R0      trashed.						    ;;
                                ;;									  ;;
                                ;;  NOTES								   ;;
                                ;;      This waits until the Intellivoice is nearly completely quiescent.   ;;
                                ;;      Some voice data may still be spoken from the last triggered	 ;;
                                ;;      phrase.  To truly wait for *that* to be spoken, speak a 'pause'     ;;
                                ;;      (eg. RESROM.pa1) and then call IV_WAIT.			     ;;
                                ;; ------------------------------------------------------------------------ ;;
                                ;;		   Copyright (c) 2002, Joseph Zbiciak		     ;;
                                ;; ======================================================================== ;;
                                IV_WAIT     PROC
                                	    MVI     IV.QH,  R0
                                	    CMPI    #$80, R0	    ; test bit 7, leave if set.
                                	    BC      @@leave

                                	    ; Wait for queue to drain.
                                @@q_loop:   CMP     IV.QT,  R0
                                	    BNEQ    @@q_loop

                                	    ; Wait for FIFO and LRQ to say ready.
                                @@s_loop:   MVI     $81,    R0	  ; Read FIFO status.  0 == ready.
                                	    COMR    R0
                                	    AND     $80,    R0	  ; Merge w/ ALD status.  1 == ready
                                	    TSTR    R0
                                	    BPL     @@s_loop	    ; if bit 15 == 0, not ready.
                                	    
                                @@leave:    JR      R5
                                	    ENDP

                                ;; ======================================================================== ;;
                                ;;  End of File:  ivoice.asm						;;
                                ;; ======================================================================== ;;

                                ;* ======================================================================== *;
                                ;*  These routines are placed into the public domain by their author.  All  *;
                                ;*  copyright rights are hereby relinquished on the routines and data in    *;
                                ;*  this file.  -- Joseph Zbiciak, 2008				     *;
                                ;* ======================================================================== *;

                                ;; ======================================================================== ;;
                                ;;  NAME								    ;;
                                ;;      IV_SAYNUM16 Say a 16-bit unsigned number using RESROM digits	;;
                                ;;									  ;;
                                ;;  AUTHOR								  ;;
                                ;;      Joseph Zbiciak <intvnut AT gmail.com>			       ;;
                                ;;									  ;;
                                ;;  REVISION HISTORY							;;
                                ;;      16-Sep-2002 Initial revision . . . . . . . . . . .  J. Zbiciak      ;;
                                ;;									  ;;
                                ;;  INPUTS for IV_SAYNUM16						  ;;
                                ;;      R0      Number to "speak"					   ;;
                                ;;      R5      Return address					      ;;
                                ;;									  ;;
                                ;;  OUTPUTS								 ;;
                                ;;									  ;;
                                ;;  DESCRIPTION							     ;;
                                ;;      "Says" a 16-bit number using IV_PLAYW to queue up the phrase.       ;;
                                ;;      Because the number may be built from several segments, it could     ;;
                                ;;      easily eat up the queue.  I believe the longest number will take    ;;
                                ;;      7 queue entries -- that is, fill the queue.  Thus, this code	;;
                                ;;      could block, waiting for slots in the queue.			;;
                                ;; ======================================================================== ;;

                                IV_SAYNUM16 PROC
                                	    PSHR    R5

                                	    TSTR    R0
                                	    BEQ     @@zero	  ; Special case:  Just say "zero"

                                	    ;; ------------------------------------------------------------ ;;
                                	    ;;  First, try to pull off 'thousands'.  We call ourselves      ;;
                                	    ;;  recursively to play the the number of thousands.	    ;;
                                	    ;; ------------------------------------------------------------ ;;
                                	    CLRR    R1
                                @@thloop:   INCR    R1
                                	    SUBI    #1000,  R0
                                	    BC      @@thloop

                                	    ADDI    #1000,  R0
                                	    PSHR    R0
                                	    DECR    R1
                                	    BEQ     @@no_thousand

                                	    CALL    IV_SAYNUM16.recurse

                                	    CALL    IV_PLAYW
                                	    DECLE   36  ; THOUSAND
                                	    
                                @@no_thousand
                                	    PULR    R1

                                	    ;; ------------------------------------------------------------ ;;
                                	    ;;  Now try to play hundreds.				   ;;
                                	    ;; ------------------------------------------------------------ ;;
                                	    MVII    #7-1, R0    ; ZERO
                                	    CMPI    #100,   R1
                                	    BNC     @@no_hundred

                                @@hloop:    INCR    R0
                                	    SUBI    #100,   R1
                                	    BC      @@hloop
                                	    ADDI    #100,   R1

                                	    PSHR    R1

                                	    CALL    IV_PLAYW.1

                                	    CALL    IV_PLAYW
                                	    DECLE   35  ; HUNDRED

                                	    PULR    R1
                                	    B       @@notrecurse    ; skip "PSHR R5"
                                @@recurse:  PSHR    R5	      ; recursive entry point for 'thousand'

                                @@no_hundred:
                                @@notrecurse:
                                	    MOVR    R1,     R0
                                	    BEQ     @@leave

                                	    SUBI    #20,    R1
                                	    BNC     @@teens

                                	    MVII    #27-1, R0   ; TWENTY
                                @@tyloop    INCR    R0
                                	    SUBI    #10,    R1
                                	    BC      @@tyloop
                                	    ADDI    #10,    R1

                                	    PSHR    R1
                                	    CALL    IV_PLAYW.1

                                	    PULR    R0
                                	    TSTR    R0
                                	    BEQ     @@leave

                                @@teens:
                                @@zero:     ADDI    #7, R0  ; ZERO

                                	    CALL    IV_PLAYW.1

                                @@leave     PULR    PC
                                	    ENDP

                                ;; ======================================================================== ;;
                                ;;  End of File:  saynum16.asm					      ;;
                                ;; ======================================================================== ;;

                                IV_INIT_and_wait:     EQU IV_INIT

                                    ELSE

0xF5E2                          IV_INIT_and_wait:     EQU _wait	; No voice init; just WAIT.

                                    ENDI

                                	IF intybasic_flash

                                ;; ======================================================================== ;;
                                ;;  JLP "Save Game" support						 ;;
                                ;; ======================================================================== ;;
                                JF.first    EQU     $8023
                                JF.last     EQU     $8024
                                JF.addr     EQU     $8025
                                JF.row      EQU     $8026
                                		   
                                JF.wrcmd    EQU     $802D
                                JF.rdcmd    EQU     $802E
                                JF.ercmd    EQU     $802F
                                JF.wrkey    EQU     $C0DE
                                JF.rdkey    EQU     $DEC0
                                JF.erkey    EQU     $BEEF

                                JF.write:   DECLE   JF.wrcmd,   JF.wrkey    ; Copy JLP RAM to flash row  
                                JF.read:    DECLE   JF.rdcmd,   JF.rdkey    ; Copy flash row to JLP RAM  
                                JF.erase:   DECLE   JF.ercmd,   JF.erkey    ; Erase flash sector 

                                ;; ======================================================================== ;;
                                ;;  JF.INIT	 Copy JLP save-game support routine to System RAM	;;
                                ;; ======================================================================== ;;
                                JF.INIT     PROC
                                	    PSHR    R5	    
                                	    MVII    #@@__code,  R5
                                	    MVII    #JF.SYSRAM, R4
                                	    REPEAT  5       
                                	    MVI@    R5,	 R0      ; \_ Copy code fragment to System RAM
                                	    MVO@    R0,	 R4      ; /
                                	    ENDR
                                	    PULR    PC

                                	    ;; === start of code that will run from RAM
                                @@__code:   MVO@    R0,	 R1      ; JF.SYSRAM + 0: initiate command
                                	    ADD@    R1,	 PC      ; JF.SYSRAM + 1: Wait for JLP to return
                                	    JR      R5		  ; JF.SYSRAM + 2:
                                	    MVO@    R2,	 R2      ; JF.SYSRAM + 3: \__ simple ISR
                                	    JR      R5		  ; JF.SYSRAM + 4: /
                                	    ;; === end of code that will run from RAM
                                	    ENDP

                                ;; ======================================================================== ;;
                                ;;  JF.CMD	  Issue a JLP Flash command			       ;;
                                ;;									  ;;
                                ;;  INPUT								   ;;
                                ;;      R0  Slot number to operate on				       ;;
                                ;;      R1  Address to copy to/from in JLP RAM			      ;;
                                ;;      @R5 Command to invoke:					      ;;
                                ;;									  ;;
                                ;;	      JF.write -- Copy JLP RAM to Flash			   ;;
                                ;;	      JF.read  -- Copy Flash to JLP RAM			   ;;
                                ;;	      JF.erase -- Erase flash sector			      ;;
                                ;;									  ;;
                                ;;  OUTPUT								  ;;
                                ;;      R0 - R4 not modified.  (Saved and restored across call)	     ;;
                                ;;      JLP command executed						;;
                                ;;									  ;;
                                ;;  NOTES								   ;;
                                ;;      This code requires two short routines in the console's System RAM.  ;;
                                ;;      It also requires that the system stack reside in System RAM.	;;
                                ;;      Because an interrupt may occur during the code's execution, there   ;;
                                ;;      must be sufficient stack space to service the interrupt (8 words).  ;;
                                ;;									  ;;
                                ;;      The code also relies on the fact that the EXEC ISR dispatch does    ;;
                                ;;      not modify R2.  This allows us to initialize R2 for the ISR ahead   ;;
                                ;;      of time, rather than in the ISR.				    ;;
                                ;; ======================================================================== ;;
                                JF.CMD      PROC

                                	    MVO     R4,	 JF.SV.R4    ; \
                                	    MVII    #JF.SV.R0,  R4	  ;  |
                                	    MVO@    R0,	 R4	  ;  |- Save registers, but not on
                                	    MVO@    R1,	 R4	  ;  |  the stack.  (limit stack use)
                                	    MVO@    R2,	 R4	  ; /

                                	    MVI@    R5,	 R4	  ; Get command to invoke

                                	    MVO     R5,	 JF.SV.R5    ; save return address

                                	    DIS
                                	    MVO     R1,	 JF.addr     ; \_ Save SG arguments in JLP
                                	    MVO     R0,	 JF.row      ; /
                                					  
                                	    MVI@    R4,	 R1	  ; Get command address
                                	    MVI@    R4,	 R0	  ; Get unlock word
                                					  
                                	    MVII    #$100,      R4	  ; \
                                	    SDBD			    ;  |_ Save old ISR in save area
                                	    MVI@    R4,	 R2	  ;  |
                                	    MVO     R2,	 JF.SV.ISR   ; /
                                					  
                                	    MVII    #JF.SYSRAM + 3, R2      ; \
                                	    MVO     R2,	 $100	;  |_ Set up new ISR in RAM
                                	    SWAP    R2		      ;  |
                                	    MVO     R2,	 $101	; / 
                                					  
                                	    MVII    #$20,       R2	  ; Address of STIC handshake
                                	    JSRE    R5,  JF.SYSRAM	  ; Invoke the command
                                					  
                                	    MVI     JF.SV.ISR,  R2	  ; \
                                	    MVO     R2,	 $100	;  |_ Restore old ISR 
                                	    SWAP    R2		      ;  |
                                	    MVO     R2,	 $101	; /
                                					  
                                	    MVII    #JF.SV.R0,  R5	  ; \
                                	    MVI@    R5,	 R0	  ;  |
                                	    MVI@    R5,	 R1	  ;  |- Restore registers
                                	    MVI@    R5,	 R2	  ;  |
                                	    MVI@    R5,	 R4	  ; /
                                	    MVI@    R5,	 PC	  ; Return

                                	    ENDP


                                	ENDI

                                	IF intybasic_fastmult

                                ; Quarter Square Multiplication
                                ; Assembly code by Joe Zbiciak, 2015
                                ; Released to public domain.

0xFB8D                          QSQR8_TBL:  PROC
FB8D   3F80 3F01 3E82 3E04      	    DECLE   $3F80, $3F01, $3E82, $3E04, $3D86, $3D09, $3C8C, $3C10
FB91   3D86 3D09 3C8C 3C10 
FB95   3B94 3B19 3A9E 3A24      	    DECLE   $3B94, $3B19, $3A9E, $3A24, $39AA, $3931, $38B8, $3840
FB99   39AA 3931 38B8 3840 
FB9D   37C8 3751 36DA 3664      	    DECLE   $37C8, $3751, $36DA, $3664, $35EE, $3579, $3504, $3490
FBA1   35EE 3579 3504 3490 
FBA5   341C 33A9 3336 32C4      	    DECLE   $341C, $33A9, $3336, $32C4, $3252, $31E1, $3170, $3100
FBA9   3252 31E1 3170 3100 
FBAD   3090 3021 2FB2 2F44      	    DECLE   $3090, $3021, $2FB2, $2F44, $2ED6, $2E69, $2DFC, $2D90
FBB1   2ED6 2E69 2DFC 2D90 
FBB5   2D24 2CB9 2C4E 2BE4      	    DECLE   $2D24, $2CB9, $2C4E, $2BE4, $2B7A, $2B11, $2AA8, $2A40
FBB9   2B7A 2B11 2AA8 2A40 
FBBD   29D8 2971 290A 28A4      	    DECLE   $29D8, $2971, $290A, $28A4, $283E, $27D9, $2774, $2710
FBC1   283E 27D9 2774 2710 
FBC5   26AC 2649 25E6 2584      	    DECLE   $26AC, $2649, $25E6, $2584, $2522, $24C1, $2460, $2400
FBC9   2522 24C1 2460 2400 
FBCD   23A0 2341 22E2 2284      	    DECLE   $23A0, $2341, $22E2, $2284, $2226, $21C9, $216C, $2110
FBD1   2226 21C9 216C 2110 
FBD5   20B4 2059 1FFE 1FA4      	    DECLE   $20B4, $2059, $1FFE, $1FA4, $1F4A, $1EF1, $1E98, $1E40
FBD9   1F4A 1EF1 1E98 1E40 
FBDD   1DE8 1D91 1D3A 1CE4      	    DECLE   $1DE8, $1D91, $1D3A, $1CE4, $1C8E, $1C39, $1BE4, $1B90
FBE1   1C8E 1C39 1BE4 1B90 
FBE5   1B3C 1AE9 1A96 1A44      	    DECLE   $1B3C, $1AE9, $1A96, $1A44, $19F2, $19A1, $1950, $1900
FBE9   19F2 19A1 1950 1900 
FBED   18B0 1861 1812 17C4      	    DECLE   $18B0, $1861, $1812, $17C4, $1776, $1729, $16DC, $1690
FBF1   1776 1729 16DC 1690 
FBF5   1644 15F9 15AE 1564      	    DECLE   $1644, $15F9, $15AE, $1564, $151A, $14D1, $1488, $1440
FBF9   151A 14D1 1488 1440 
FBFD   13F8 13B1 136A 1324      	    DECLE   $13F8, $13B1, $136A, $1324, $12DE, $1299, $1254, $1210
FC01   12DE 1299 1254 1210 
FC05   11CC 1189 1146 1104      	    DECLE   $11CC, $1189, $1146, $1104, $10C2, $1081, $1040, $1000
FC09   10C2 1081 1040 1000 
FC0D   0FC0 0F81 0F42 0F04      	    DECLE   $0FC0, $0F81, $0F42, $0F04, $0EC6, $0E89, $0E4C, $0E10
FC11   0EC6 0E89 0E4C 0E10 
FC15   0DD4 0D99 0D5E 0D24      	    DECLE   $0DD4, $0D99, $0D5E, $0D24, $0CEA, $0CB1, $0C78, $0C40
FC19   0CEA 0CB1 0C78 0C40 
FC1D   0C08 0BD1 0B9A 0B64      	    DECLE   $0C08, $0BD1, $0B9A, $0B64, $0B2E, $0AF9, $0AC4, $0A90
FC21   0B2E 0AF9 0AC4 0A90 
FC25   0A5C 0A29 09F6 09C4      	    DECLE   $0A5C, $0A29, $09F6, $09C4, $0992, $0961, $0930, $0900
FC29   0992 0961 0930 0900 
FC2D   08D0 08A1 0872 0844      	    DECLE   $08D0, $08A1, $0872, $0844, $0816, $07E9, $07BC, $0790
FC31   0816 07E9 07BC 0790 
FC35   0764 0739 070E 06E4      	    DECLE   $0764, $0739, $070E, $06E4, $06BA, $0691, $0668, $0640
FC39   06BA 0691 0668 0640 
FC3D   0618 05F1 05CA 05A4      	    DECLE   $0618, $05F1, $05CA, $05A4, $057E, $0559, $0534, $0510
FC41   057E 0559 0534 0510 
FC45   04EC 04C9 04A6 0484      	    DECLE   $04EC, $04C9, $04A6, $0484, $0462, $0441, $0420, $0400
FC49   0462 0441 0420 0400 
FC4D   03E0 03C1 03A2 0384      	    DECLE   $03E0, $03C1, $03A2, $0384, $0366, $0349, $032C, $0310
FC51   0366 0349 032C 0310 
FC55   02F4 02D9 02BE 02A4      	    DECLE   $02F4, $02D9, $02BE, $02A4, $028A, $0271, $0258, $0240
FC59   028A 0271 0258 0240 
FC5D   0228 0211 01FA 01E4      	    DECLE   $0228, $0211, $01FA, $01E4, $01CE, $01B9, $01A4, $0190
FC61   01CE 01B9 01A4 0190 
FC65   017C 0169 0156 0144      	    DECLE   $017C, $0169, $0156, $0144, $0132, $0121, $0110, $0100
FC69   0132 0121 0110 0100 
FC6D   00F0 00E1 00D2 00C4      	    DECLE   $00F0, $00E1, $00D2, $00C4, $00B6, $00A9, $009C, $0090
FC71   00B6 00A9 009C 0090 
FC75   0084 0079 006E 0064      	    DECLE   $0084, $0079, $006E, $0064, $005A, $0051, $0048, $0040
FC79   005A 0051 0048 0040 
FC7D   0038 0031 002A 0024      	    DECLE   $0038, $0031, $002A, $0024, $001E, $0019, $0014, $0010
FC81   001E 0019 0014 0010 
FC85   000C 0009 0006 0004      	    DECLE   $000C, $0009, $0006, $0004, $0002, $0001, $0000
FC89   0002 0001 0000 
0xFC8C                          @@mid:
FC8C   0000 0000 0001 0002      	    DECLE   $0000, $0000, $0001, $0002, $0004, $0006, $0009, $000C
FC90   0004 0006 0009 000C 
FC94   0010 0014 0019 001E      	    DECLE   $0010, $0014, $0019, $001E, $0024, $002A, $0031, $0038
FC98   0024 002A 0031 0038 
FC9C   0040 0048 0051 005A      	    DECLE   $0040, $0048, $0051, $005A, $0064, $006E, $0079, $0084
FCA0   0064 006E 0079 0084 
FCA4   0090 009C 00A9 00B6      	    DECLE   $0090, $009C, $00A9, $00B6, $00C4, $00D2, $00E1, $00F0
FCA8   00C4 00D2 00E1 00F0 
FCAC   0100 0110 0121 0132      	    DECLE   $0100, $0110, $0121, $0132, $0144, $0156, $0169, $017C
FCB0   0144 0156 0169 017C 
FCB4   0190 01A4 01B9 01CE      	    DECLE   $0190, $01A4, $01B9, $01CE, $01E4, $01FA, $0211, $0228
FCB8   01E4 01FA 0211 0228 
FCBC   0240 0258 0271 028A      	    DECLE   $0240, $0258, $0271, $028A, $02A4, $02BE, $02D9, $02F4
FCC0   02A4 02BE 02D9 02F4 
FCC4   0310 032C 0349 0366      	    DECLE   $0310, $032C, $0349, $0366, $0384, $03A2, $03C1, $03E0
FCC8   0384 03A2 03C1 03E0 
FCCC   0400 0420 0441 0462      	    DECLE   $0400, $0420, $0441, $0462, $0484, $04A6, $04C9, $04EC
FCD0   0484 04A6 04C9 04EC 
FCD4   0510 0534 0559 057E      	    DECLE   $0510, $0534, $0559, $057E, $05A4, $05CA, $05F1, $0618
FCD8   05A4 05CA 05F1 0618 
FCDC   0640 0668 0691 06BA      	    DECLE   $0640, $0668, $0691, $06BA, $06E4, $070E, $0739, $0764
FCE0   06E4 070E 0739 0764 
FCE4   0790 07BC 07E9 0816      	    DECLE   $0790, $07BC, $07E9, $0816, $0844, $0872, $08A1, $08D0
FCE8   0844 0872 08A1 08D0 
FCEC   0900 0930 0961 0992      	    DECLE   $0900, $0930, $0961, $0992, $09C4, $09F6, $0A29, $0A5C
FCF0   09C4 09F6 0A29 0A5C 
FCF4   0A90 0AC4 0AF9 0B2E      	    DECLE   $0A90, $0AC4, $0AF9, $0B2E, $0B64, $0B9A, $0BD1, $0C08
FCF8   0B64 0B9A 0BD1 0C08 
FCFC   0C40 0C78 0CB1 0CEA      	    DECLE   $0C40, $0C78, $0CB1, $0CEA, $0D24, $0D5E, $0D99, $0DD4
FD00   0D24 0D5E 0D99 0DD4 
FD04   0E10 0E4C 0E89 0EC6      	    DECLE   $0E10, $0E4C, $0E89, $0EC6, $0F04, $0F42, $0F81, $0FC0
FD08   0F04 0F42 0F81 0FC0 
FD0C   1000 1040 1081 10C2      	    DECLE   $1000, $1040, $1081, $10C2, $1104, $1146, $1189, $11CC
FD10   1104 1146 1189 11CC 
FD14   1210 1254 1299 12DE      	    DECLE   $1210, $1254, $1299, $12DE, $1324, $136A, $13B1, $13F8
FD18   1324 136A 13B1 13F8 
FD1C   1440 1488 14D1 151A      	    DECLE   $1440, $1488, $14D1, $151A, $1564, $15AE, $15F9, $1644
FD20   1564 15AE 15F9 1644 
FD24   1690 16DC 1729 1776      	    DECLE   $1690, $16DC, $1729, $1776, $17C4, $1812, $1861, $18B0
FD28   17C4 1812 1861 18B0 
FD2C   1900 1950 19A1 19F2      	    DECLE   $1900, $1950, $19A1, $19F2, $1A44, $1A96, $1AE9, $1B3C
FD30   1A44 1A96 1AE9 1B3C 
FD34   1B90 1BE4 1C39 1C8E      	    DECLE   $1B90, $1BE4, $1C39, $1C8E, $1CE4, $1D3A, $1D91, $1DE8
FD38   1CE4 1D3A 1D91 1DE8 
FD3C   1E40 1E98 1EF1 1F4A      	    DECLE   $1E40, $1E98, $1EF1, $1F4A, $1FA4, $1FFE, $2059, $20B4
FD40   1FA4 1FFE 2059 20B4 
FD44   2110 216C 21C9 2226      	    DECLE   $2110, $216C, $21C9, $2226, $2284, $22E2, $2341, $23A0
FD48   2284 22E2 2341 23A0 
FD4C   2400 2460 24C1 2522      	    DECLE   $2400, $2460, $24C1, $2522, $2584, $25E6, $2649, $26AC
FD50   2584 25E6 2649 26AC 
FD54   2710 2774 27D9 283E      	    DECLE   $2710, $2774, $27D9, $283E, $28A4, $290A, $2971, $29D8
FD58   28A4 290A 2971 29D8 
FD5C   2A40 2AA8 2B11 2B7A      	    DECLE   $2A40, $2AA8, $2B11, $2B7A, $2BE4, $2C4E, $2CB9, $2D24
FD60   2BE4 2C4E 2CB9 2D24 
FD64   2D90 2DFC 2E69 2ED6      	    DECLE   $2D90, $2DFC, $2E69, $2ED6, $2F44, $2FB2, $3021, $3090
FD68   2F44 2FB2 3021 3090 
FD6C   3100 3170 31E1 3252      	    DECLE   $3100, $3170, $31E1, $3252, $32C4, $3336, $33A9, $341C
FD70   32C4 3336 33A9 341C 
FD74   3490 3504 3579 35EE      	    DECLE   $3490, $3504, $3579, $35EE, $3664, $36DA, $3751, $37C8
FD78   3664 36DA 3751 37C8 
FD7C   3840 38B8 3931 39AA      	    DECLE   $3840, $38B8, $3931, $39AA, $3A24, $3A9E, $3B19, $3B94
FD80   3A24 3A9E 3B19 3B94 
FD84   3C10 3C8C 3D09 3D86      	    DECLE   $3C10, $3C8C, $3D09, $3D86, $3E04, $3E82, $3F01, $3F80
FD88   3E04 3E82 3F01 3F80 
FD8C   4000 4080 4101 4182      	    DECLE   $4000, $4080, $4101, $4182, $4204, $4286, $4309, $438C
FD90   4204 4286 4309 438C 
FD94   4410 4494 4519 459E      	    DECLE   $4410, $4494, $4519, $459E, $4624, $46AA, $4731, $47B8
FD98   4624 46AA 4731 47B8 
FD9C   4840 48C8 4951 49DA      	    DECLE   $4840, $48C8, $4951, $49DA, $4A64, $4AEE, $4B79, $4C04
FDA0   4A64 4AEE 4B79 4C04 
FDA4   4C90 4D1C 4DA9 4E36      	    DECLE   $4C90, $4D1C, $4DA9, $4E36, $4EC4, $4F52, $4FE1, $5070
FDA8   4EC4 4F52 4FE1 5070 
FDAC   5100 5190 5221 52B2      	    DECLE   $5100, $5190, $5221, $52B2, $5344, $53D6, $5469, $54FC
FDB0   5344 53D6 5469 54FC 
FDB4   5590 5624 56B9 574E      	    DECLE   $5590, $5624, $56B9, $574E, $57E4, $587A, $5911, $59A8
FDB8   57E4 587A 5911 59A8 
FDBC   5A40 5AD8 5B71 5C0A      	    DECLE   $5A40, $5AD8, $5B71, $5C0A, $5CA4, $5D3E, $5DD9, $5E74
FDC0   5CA4 5D3E 5DD9 5E74 
FDC4   5F10 5FAC 6049 60E6      	    DECLE   $5F10, $5FAC, $6049, $60E6, $6184, $6222, $62C1, $6360
FDC8   6184 6222 62C1 6360 
FDCC   6400 64A0 6541 65E2      	    DECLE   $6400, $64A0, $6541, $65E2, $6684, $6726, $67C9, $686C
FDD0   6684 6726 67C9 686C 
FDD4   6910 69B4 6A59 6AFE      	    DECLE   $6910, $69B4, $6A59, $6AFE, $6BA4, $6C4A, $6CF1, $6D98
FDD8   6BA4 6C4A 6CF1 6D98 
FDDC   6E40 6EE8 6F91 703A      	    DECLE   $6E40, $6EE8, $6F91, $703A, $70E4, $718E, $7239, $72E4
FDE0   70E4 718E 7239 72E4 
FDE4   7390 743C 74E9 7596      	    DECLE   $7390, $743C, $74E9, $7596, $7644, $76F2, $77A1, $7850
FDE8   7644 76F2 77A1 7850 
FDEC   7900 79B0 7A61 7B12      	    DECLE   $7900, $79B0, $7A61, $7B12, $7BC4, $7C76, $7D29, $7DDC
FDF0   7BC4 7C76 7D29 7DDC 
FDF4   7E90 7F44 7FF9 80AE      	    DECLE   $7E90, $7F44, $7FF9, $80AE, $8164, $821A, $82D1, $8388
FDF8   8164 821A 82D1 8388 
FDFC   8440 84F8 85B1 866A      	    DECLE   $8440, $84F8, $85B1, $866A, $8724, $87DE, $8899, $8954
FE00   8724 87DE 8899 8954 
FE04   8A10 8ACC 8B89 8C46      	    DECLE   $8A10, $8ACC, $8B89, $8C46, $8D04, $8DC2, $8E81, $8F40
FE08   8D04 8DC2 8E81 8F40 
FE0C   9000 90C0 9181 9242      	    DECLE   $9000, $90C0, $9181, $9242, $9304, $93C6, $9489, $954C
FE10   9304 93C6 9489 954C 
FE14   9610 96D4 9799 985E      	    DECLE   $9610, $96D4, $9799, $985E, $9924, $99EA, $9AB1, $9B78
FE18   9924 99EA 9AB1 9B78 
FE1C   9C40 9D08 9DD1 9E9A      	    DECLE   $9C40, $9D08, $9DD1, $9E9A, $9F64, $A02E, $A0F9, $A1C4
FE20   9F64 A02E A0F9 A1C4 
FE24   A290 A35C A429 A4F6      	    DECLE   $A290, $A35C, $A429, $A4F6, $A5C4, $A692, $A761, $A830
FE28   A5C4 A692 A761 A830 
FE2C   A900 A9D0 AAA1 AB72      	    DECLE   $A900, $A9D0, $AAA1, $AB72, $AC44, $AD16, $ADE9, $AEBC
FE30   AC44 AD16 ADE9 AEBC 
FE34   AF90 B064 B139 B20E      	    DECLE   $AF90, $B064, $B139, $B20E, $B2E4, $B3BA, $B491, $B568
FE38   B2E4 B3BA B491 B568 
FE3C   B640 B718 B7F1 B8CA      	    DECLE   $B640, $B718, $B7F1, $B8CA, $B9A4, $BA7E, $BB59, $BC34
FE40   B9A4 BA7E BB59 BC34 
FE44   BD10 BDEC BEC9 BFA6      	    DECLE   $BD10, $BDEC, $BEC9, $BFA6, $C084, $C162, $C241, $C320
FE48   C084 C162 C241 C320 
FE4C   C400 C4E0 C5C1 C6A2      	    DECLE   $C400, $C4E0, $C5C1, $C6A2, $C784, $C866, $C949, $CA2C
FE50   C784 C866 C949 CA2C 
FE54   CB10 CBF4 CCD9 CDBE      	    DECLE   $CB10, $CBF4, $CCD9, $CDBE, $CEA4, $CF8A, $D071, $D158
FE58   CEA4 CF8A D071 D158 
FE5C   D240 D328 D411 D4FA      	    DECLE   $D240, $D328, $D411, $D4FA, $D5E4, $D6CE, $D7B9, $D8A4
FE60   D5E4 D6CE D7B9 D8A4 
FE64   D990 DA7C DB69 DC56      	    DECLE   $D990, $DA7C, $DB69, $DC56, $DD44, $DE32, $DF21, $E010
FE68   DD44 DE32 DF21 E010 
FE6C   E100 E1F0 E2E1 E3D2      	    DECLE   $E100, $E1F0, $E2E1, $E3D2, $E4C4, $E5B6, $E6A9, $E79C
FE70   E4C4 E5B6 E6A9 E79C 
FE74   E890 E984 EA79 EB6E      	    DECLE   $E890, $E984, $EA79, $EB6E, $EC64, $ED5A, $EE51, $EF48
FE78   EC64 ED5A EE51 EF48 
FE7C   F040 F138 F231 F32A      	    DECLE   $F040, $F138, $F231, $F32A, $F424, $F51E, $F619, $F714
FE80   F424 F51E F619 F714 
FE84   F810 F90C FA09 FB06      	    DECLE   $F810, $F90C, $FA09, $FB06, $FC04, $FD02, $FE01
FE88   FC04 FD02 FE01 
                                	    ENDP

                                ; R0 = R0 * R1, where R0 and R1 are unsigned 8-bit values
                                ; Destroys R1, R4
0xFE8B                          qs_mpy8:    PROC
FE8B   0084                     	    MOVR    R0,	     R4      ;   6
FE8C   02F9 FC8C                	    ADDI    #QSQR8_TBL.mid, R1      ;   8
FE8E   00CC                     	    ADDR    R1,	     R4      ;   6   a + b
FE8F   0101                     	    SUBR    R0,	     R1      ;   6   a - b
FE90   02A0                     @@ok:       MVI@    R4,	     R0      ;   8
FE91   0308                     	    SUB@    R1,	     R0      ;   8
FE92   00AF                     	    JR      R5		      ;   7
                                					    ;----
                                					    ;  49
                                	    ENDP
                                	    

                                ; R1 = R0 * R1, where R0 and R1 are 16-bit values
                                ; destroys R0, R2, R3, R4, R5
0xFE93                          qs_mpy16:   PROC
FE93   0275                     	    PSHR    R5		  ;   9
                                				   
                                	    ; Unpack lo/hi
FE94   0082                     	    MOVR    R0,	 R2      ;   6   
FE95   03B8 00FF                	    ANDI    #$FF,       R0      ;   8   R0 is lo(a)
FE97   01C2                     	    XORR    R0,	 R2      ;   6   
FE98   0042                     	    SWAP    R2		  ;   6   R2 is hi(a)

FE99   008B                     	    MOVR    R1,	 R3      ;   6   R3 is orig 16-bit b
FE9A   03B9 00FF                	    ANDI    #$FF,       R1      ;   8   R1 is lo(b)
FE9C   008D                     	    MOVR    R1,	 R5      ;   6   R5 is lo(b)
FE9D   01CB                     	    XORR    R1,	 R3      ;   6   
FE9E   0043                     	    SWAP    R3		  ;   6   R3 is hi(b)
                                					;----
                                					;  67
                                					
                                	    ; lo * lo		   
FE9F   0084                     	    MOVR    R0,	 R4      ;   6   R4 is lo(a)
FEA0   02F9 FC8C                	    ADDI    #QSQR8_TBL.mid, R1  ;   8
FEA2   00CC                     	    ADDR    R1,	 R4      ;   6   R4 = lo(a) + lo(b)
FEA3   0101                     	    SUBR    R0,	 R1      ;   6   R1 = lo(a) - lo(b)
                                					
FEA4   02A4                     @@pos_ll:   MVI@    R4,	 R4      ;   8   R4 = qstbl[lo(a)+lo(b)]
FEA5   030C                     	    SUB@    R1,	 R4      ;   8   R4 = lo(a)*lo(b)
                                					;----
                                					;  42
                                					;  67 (carried forward)
                                					;----
                                					; 109
                                				       
                                	    ; lo * hi		  
FEA6   0081                     	    MOVR    R0,	 R1      ;   6   R0 = R1 = lo(a)
FEA7   02FB FC8C                	    ADDI    #QSQR8_TBL.mid, R3  ;   8
FEA9   00D9                     	    ADDR    R3,	 R1      ;   6   R1 = hi(b) + lo(a)
FEAA   0103                     	    SUBR    R0,	 R3      ;   6   R3 = hi(b) - lo(a)
                                				       
FEAB   0289                     @@pos_lh:   MVI@    R1,	 R1      ;   8   R1 = qstbl[hi(b)-lo(a)]
FEAC   0319                     	    SUB@    R3,	 R1      ;   8   R1 = lo(a)*hi(b)
                                					;----
                                					;  42
                                					; 109 (carried forward)
                                					;----
                                					; 151
                                				       
                                	    ; hi * lo		  
FEAD   00A8                     	    MOVR    R5,	 R0      ;   6   R5 = R0 = lo(b)
FEAE   02FA FC8C                	    ADDI    #QSQR8_TBL.mid, R2  ;   8
FEB0   00D5                     	    ADDR    R2,	 R5      ;   6   R3 = hi(a) + lo(b)
FEB1   0102                     	    SUBR    R0,	 R2      ;   6   R2 = hi(a) - lo(b)
                                				       
FEB2   02E9                     @@pos_hl:   ADD@    R5,	 R1      ;   8   \_ R1 = lo(a)*hi(b)+hi(a)*lo(b)
FEB3   0311                     	    SUB@    R2,	 R1      ;   8   /
                                					;----
                                					;  42
                                					; 151 (carried forward)
                                					;----
                                					; 193
                                				       
FEB4   0041                     	    SWAP    R1		  ;   6   \_ shift upper product left 8
FEB5   03B9 FF00                	    ANDI    #$FF00,     R1      ;   8   /
FEB7   00E1                     	    ADDR    R4,	 R1      ;   6   final product
FEB8   02B7                     	    PULR    PC		  ;  12
                                					;----
                                					;  32
                                					; 193 (carried forward)
                                					;----
                                					; 225
                                	    ENDP

                                	ENDI

                                	IF intybasic_fastdiv

                                ; Fast unsigned division/remainder
                                ; Assembly code by Oscar Toledo G. Jul/10/2015
                                ; Released to public domain.

                                	; Ultrafast unsigned division/remainder operation
                                	; Entry: R0 = Dividend
                                	;	R1 = Divisor
                                	; Output: R0 = Quotient
                                	;	 R2 = Remainder
                                	; Worst case: 6 + 6 + 9 + 496 = 517 cycles
                                	; Best case: 6 + (6 + 7) * 16 = 214 cycles

                                uf_udiv16:	PROC
                                	CLRR R2		; 6
                                	SLLC R0,1	; 6
                                	BC @@1		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@2		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@3		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@4		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@5		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@6		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@7		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@8		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@9		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@10		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@11		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@12		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@13		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@14		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@15		; 7/9
                                	SLLC R0,1	; 6
                                	BC @@16		; 7/9
                                	JR R5

                                @@1:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@2:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@3:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@4:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@5:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@6:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@7:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@8:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@9:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@10:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@11:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@12:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@13:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@14:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@15:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                @@16:	RLC R2,1	; 6
                                	CMPR R1,R2	; 6
                                	BNC $+3		; 7/9
                                	SUBR R1,R2	; 6
                                	RLC R0,1	; 6
                                	JR R5
                                	
                                	ENDP

                                	ENDI

                                ;	ROM.End
                                	;

                                ;	ROM.OutputRomStats
                                	;

0x200                           	ORG $200,$200,"-RWB"

0x200                           Q2:	; Reserved label for #BACKTAB

                                	;
                                	; 16-bits variables
                                	; Note IntyBASIC variables grow up starting in $308.
                                	;

0x33F                           BASE_16BIT_SYSTEM_VARS: QSET $33f
                                    IF intybasic_voice
                                BASE_16BIT_SYSTEM_VARS: QSET BASE_16BIT_SYSTEM_VARS-10
                                    ENDI
                                    IF intybasic_col
0x337                           BASE_16BIT_SYSTEM_VARS: QSET BASE_16BIT_SYSTEM_VARS-8
                                    ENDI
                                    IF intybasic_scroll
                                BASE_16BIT_SYSTEM_VARS: QSET BASE_16BIT_SYSTEM_VARS-20
                                    ENDI

0x337                           	ORG BASE_16BIT_SYSTEM_VARS,BASE_16BIT_SYSTEM_VARS,"-RWB"

                                    IF intybasic_voice
                                IV.Q:      RMB 8    ; IV_xxx	16-bit	  Voice queue  (8 words)
                                IV.FPTR:   RMB 1    ; IV_xxx	16-bit	  Current FIFO ptr.
                                IV.PPTR:   RMB 1    ; IV_xxx	16-bit	  Current Phrase ptr.
                                    ENDI
                                    IF intybasic_col
0x337                           _col0:      RMB 1       ; Collision status for MOB0
0x338                           _col1:      RMB 1       ; Collision status for MOB1
0x339                           _col2:      RMB 1       ; Collision status for MOB2
0x33A                           _col3:      RMB 1       ; Collision status for MOB3
0x33B                           _col4:      RMB 1       ; Collision status for MOB4
0x33C                           _col5:      RMB 1       ; Collision status for MOB5
0x33D                           _col6:      RMB 1       ; Collision status for MOB6
0x33E                           _col7:      RMB 1       ; Collision status for MOB7
                                    ENDI
                                    IF intybasic_scroll
                                _scroll_buffer: RMB 20  ; Sometimes this is unused
                                    ENDI
0x33F                           _music_gosub:	RMB 1	; GOSUB pointer
0x340                           _music_table:	RMB 1	; Note table
0x341                           _music_p:	RMB 1	; Pointer to music
0x342                           _frame:		RMB 1   ; Current frame
0x343                           _read:		RMB 1   ; Pointer to DATA
0x344                           _gram_bitmap:   RMB 1   ; Bitmap for definition
0x345                           _gram2_bitmap:  RMB 1   ; Secondary bitmap for definition
0x346                           _screen:	RMB 1	; Pointer to current screen position
0x347                           _color:		RMB 1	; Current color

0x348                           Q1:			; Reserved label for #MOBSHADOW
0x348                           _mobs:      RMB 3*8     ; MOB buffer

0x100                           SCRATCH:    ORG $100,$100,"-RWBN"
                                	;
                                	; 8-bits variables
                                	;
0x100                           ISRVEC:     RMB 2       ; Pointer to ISR vector (required by Intellivision ROM)
0x102                           _int:       RMB 1       ; Signals interrupt received
0x103                           _ntsc:      RMB 1       ; bit 0 = 1=NTSC, 0=PAL. Bit 1 = 1=ECS detected.
0x104                           _rand:      RMB 1       ; Pseudo-random value
0x105                           _gram_target:   RMB 1   ; Contains GRAM card number
0x106                           _gram_total:    RMB 1   ; Contains total GRAM cards for definition
0x107                           _gram2_target:  RMB 1   ; Contains GRAM card number
0x108                           _gram2_total:   RMB 1   ; Contains total GRAM cards for definition
0x109                           _mode_select:   RMB 1   ; Graphics mode selection
0x10A                           _border_color:  RMB 1   ; Border color
0x10B                           _border_mask:   RMB 1   ; Border mask
                                    IF intybasic_keypad
                                _cnt1_p0:   RMB 1       ; Debouncing 1
                                _cnt1_p1:   RMB 1       ; Debouncing 2
                                _cnt1_key:  RMB 1       ; Currently pressed key
                                _cnt2_p0:   RMB 1       ; Debouncing 1
                                _cnt2_p1:   RMB 1       ; Debouncing 2
                                _cnt2_key:  RMB 1       ; Currently pressed key
                                    ENDI
                                    IF intybasic_scroll
                                _scroll_x:  RMB 1       ; Scroll X offset
                                _scroll_y:  RMB 1       ; Scroll Y offset
                                _scroll_d:  RMB 1       ; Scroll direction
                                    ENDI
                                    IF intybasic_music
0x10C                           _music_start:	RMB 2	; Start of music

0x10E                           _music_mode: RMB 1      ; Music mode (0= Not using PSG, 2= Simple, 4= Full, add 1 if using noise channel for drums)
0x10F                           _music_frame: RMB 1     ; Music frame (for 50 hz fixed)
0x110                           _music_tc:  RMB 1       ; Time counter
0x111                           _music_t:   RMB 1       ; Time base
0x112                           _music_i1:  RMB 1       ; Instrument 1 
0x113                           _music_s1:  RMB 1       ; Sample pointer 1
0x114                           _music_n1:  RMB 1       ; Note 1
0x115                           _music_i2:  RMB 1       ; Instrument 2
0x116                           _music_s2:  RMB 1       ; Sample pointer 2
0x117                           _music_n2:  RMB 1       ; Note 2
0x118                           _music_i3:  RMB 1       ; Instrument 3
0x119                           _music_s3:  RMB 1       ; Sample pointer 3
0x11A                           _music_n3:  RMB 1       ; Note 3
0x11B                           _music_s4:  RMB 1       ; Sample pointer 4
0x11C                           _music_n4:  RMB 1       ; Note 4 (really it's drum)

0x11D                           _music_freq10:	RMB 1   ; Low byte frequency A
0x11E                           _music_freq20:	RMB 1   ; Low byte frequency B
0x11F                           _music_freq30:	RMB 1   ; Low byte frequency C
0x120                           _music_freq11:	RMB 1   ; High byte frequency A
0x121                           _music_freq21:	RMB 1   ; High byte frequency B
0x122                           _music_freq31:	RMB 1   ; High byte frequency C
0x123                           _music_mix:	RMB 1   ; Mixer
0x124                           _music_noise:	RMB 1   ; Noise
0x125                           _music_vol1:	RMB 1   ; Volume A
0x126                           _music_vol2:	RMB 1   ; Volume B
0x127                           _music_vol3:	RMB 1   ; Volume C
                                    ENDI
                                    IF intybasic_music_ecs
                                _music_i5:  RMB 1       ; Instrument 5
                                _music_s5:  RMB 1       ; Sample pointer 5
                                _music_n5:  RMB 1       ; Note 5
                                _music_i6:  RMB 1       ; Instrument 6
                                _music_s6:  RMB 1       ; Sample pointer 6
                                _music_n6:  RMB 1       ; Note 6
                                _music_i7:  RMB 1       ; Instrument 7
                                _music_s7:  RMB 1       ; Sample pointer 7
                                _music_n7:  RMB 1       ; Note 7
                                _music_s8:  RMB 1       ; Sample pointer 8
                                _music_n8:  RMB 1       ; Note 8 (really it's drum)

                                _music2_freq10:	RMB 1   ; Low byte frequency A
                                _music2_freq20:	RMB 1   ; Low byte frequency B
                                _music2_freq30:	RMB 1   ; Low byte frequency C
                                _music2_freq11:	RMB 1   ; High byte frequency A
                                _music2_freq21:	RMB 1   ; High byte frequency B
                                _music2_freq31:	RMB 1   ; High byte frequency C
                                _music2_mix:	RMB 1   ; Mixer
                                _music2_noise:	RMB 1   ; Noise
                                _music2_vol1:	RMB 1   ; Volume A
                                _music2_vol2:	RMB 1   ; Volume B
                                _music2_vol3:	RMB 1   ; Volume C
                                    ENDI
                                    IF intybasic_music_volume
0x128                           _music_vol:	RMB 1	; Global music volume
                                    ENDI
                                    IF intybasic_voice
                                IV.QH:     RMB 1    ; IV_xxx	8-bit	   Voice queue head
                                IV.QT:     RMB 1    ; IV_xxx	8-bit	   Voice queue tail
                                IV.FLEN:   RMB 1    ; IV_xxx	8-bit	   Length of FIFO data
                                    ENDI

0x129                           var_BLOCKS:	RMB 1	; BLOCKS
0x12A                           var_BX:	RMB 1	; BX
0x12B                           var_BY:	RMB 1	; BY
0x12C                           var_C:	RMB 1	; C
0x12D                           var_CUCU_WAVE:	RMB 1	; CUCU_WAVE
0x12E                           var_D:	RMB 1	; D
0x12F                           var_DROP_BULLET:	RMB 1	; DROP_BULLET
0x130                           var_FIRST_TIME_EVER:	RMB 1	; FIRST_TIME_EVER
0x131                           var_GRONK:	RMB 1	; GRONK
0x132                           var_LEVEL:	RMB 1	; LEVEL
0x133                           var_LIVES:	RMB 1	; LIVES
0x134                           var_NEXT_BULLET:	RMB 1	; NEXT_BULLET
0x135                           var_NEXT_WAVE:	RMB 1	; NEXT_WAVE
0x136                           var_PX:	RMB 1	; PX
0x137                           var_PY:	RMB 1	; PY
0x138                           var_SOUND_EFFECT:	RMB 1	; SOUND_EFFECT
0x139                           var_SOUND_STATE:	RMB 1	; SOUND_STATE
0x13A                           var_SUBLEVEL:	RMB 1	; SUBLEVEL
0x13B                           var_VALID:	RMB 1	; VALID
0x13C                           var_WAVE:	RMB 1	; WAVE
0x13D                           array_B:	RMB 6	; B
0x143                           array_S:	RMB 6	; S
0x149                           array_X:	RMB 6	; X
0x14F                           array_Y:	RMB 6	; Y
0x155                           array_Z:	RMB 6	; Z
0x15B                           _SCRATCH:	EQU $

0x2F0                           SYSTEM:	ORG $2F0, $2F0, "-RWBN"
0x2F0                           STACK:	RMB 24
0x308                           _SYSTEM:	EQU $

0x8040                          SYSTEM2:	ORG $8040, $8040, "-RWBN"
0x8040                          var_&RECORD:	RMB 1	; #RECORD
0x8041                          var_&SCORE:	RMB 1	; #SCORE
0x8042                          _SYSTEM2:	EQU $
 ERROR SUMMARY - ERRORS DETECTED 0
               -  WARNINGS       0
